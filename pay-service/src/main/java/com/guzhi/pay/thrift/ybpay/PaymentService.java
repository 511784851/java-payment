/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.TApplicationException;
import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.TProcessor;
import org.apache.thrift.TServiceClient;
import org.apache.thrift.TServiceClientFactory;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.async.TAsyncClient;
import org.apache.thrift.async.TAsyncClientFactory;
import org.apache.thrift.async.TAsyncClientManager;
import org.apache.thrift.async.TAsyncMethodCall;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.ListMetaData;
import org.apache.thrift.meta_data.StructMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TList;
import org.apache.thrift.protocol.TMessage;
import org.apache.thrift.protocol.TMessageType;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolFactory;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TNonblockingTransport;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PaymentService {

    /**
     * 充值系统对外服务接口定义
     */
    public interface Iface {

        /**
         * 获得用户有多少多玩币，返回PaymentResult.info=多玩币数量
         * 2012/10/30 修改：增加账本的支持
         * 
         * @param username
         * @param product
         * @param moneyType
         * @param sign
         */
        public PaymentResult getDuowanb(String username, String product, int moneyType, String sign) throws TException;

        /**
         * 扣除多玩币。
         * 注：此接口日后废除，请使用payMoneyWithOriginalOrder接口 (2013/3/1)
         * 
         * @param request
         */
        public PaymentResult payMoney(PayMoneyRequest request) throws ServiceException, TException;

        /**
         * 扣除多玩币，需传入原始订单，另外参数类型改为PayMoneyRequest2
         * 2013/2/28 修改
         * 
         * @param request
         * @param originalOrder
         */
        public PaymentResult payMoneyWithOriginalOrder(PayMoneyRequest2 request, OriginalOrder originalOrder)
                throws ServiceException, TException;

        /**
         * 扣除多玩币，需传入PayMoneyToken，某些情况下不会弹窗，例如移动端支付。
         * 2013/4/28 新增
         * 
         * @param request
         * @param originalOrder
         * @param token
         */
        public PaymentResult payMoneyWithToken(PayMoneyRequest2 request, OriginalOrder originalOrder,
                PayMoneyToken token) throws ServiceException, TException;

        /**
         * 获得扣除多玩币的结果
         * 
         * @param username
         * @param product
         * @param orderId
         * @param sign
         */
        public PaymentResult getPayMoneyResult(String username, String product, String orderId, String sign)
                throws TException;

        /**
         * 增加佣金
         * 
         * @param request
         */
        public PaymentResult addCommission(AddCommissionRequest request) throws ServiceException, TException;

        /**
         * 获得增加佣金的结果
         * 
         * @param username
         * @param product
         * @param orderId
         * @param sign
         */
        public PaymentResult getAddCommissionResult(String username, String product, String orderId, String sign)
                throws TException;

        /**
         * 获取用户的多玩币和佣金的总额
         * 
         * @param username
         * @param product
         * @param moneyType
         * @param sign
         */
        public PaymentResult getTotalMoney(String username, String product, int moneyType, String sign)
                throws TException;

        /**
         * 冻结资金接口
         * 
         * @param request
         */
        public PaymentResult lockMoney(LockMoneyRequest request) throws ServiceException, TException;

        /**
         * 解除冻结接口
         * 
         * @param request
         */
        public PaymentResult unlockMoney(UnlockMoneyRequest request) throws ServiceException, TException;

        /**
         * 用户确认扣款后，产品回调接口。
         * 注：此接口已不支持。(2013/3/1)
         * 
         * @param passport
         * @param product
         * @param orderId
         * @param confirm
         * @param authorizationType
         * @param deductSettings
         * @param sign
         */
        public PaymentResult confirmPayMoney(String passport, String product, String orderId, int confirm,
                int authorizationType, int deductSettings, String sign) throws TException;

        /**
         * 账本转账：在用户自己的各个账本间转账
         * 2012/10/30 新增
         * 
         * @param request
         */
        public PaymentResult transferBalance(TransferBalanceRequest request) throws ServiceException, TException;

        /**
         * 冲正payMoney的订单。
         * 2013/6/3 新增
         * 成功返回:
         * code=1, info=冲正的金额
         * 失败返回:
         * code=错误代码, info=错误信息
         * 
         * @param request
         */
        public PaymentResult reversePayMoney(ReverseOrderRequest request) throws ServiceException, TException;

        /**
         * 冲正addMoney的订单。
         * 2013/6/3 新增
         * 成功返回:
         * code=1, info=冲正的金额
         * 失败返回:
         * code=错误代码, info=错误信息
         * 
         * @param request
         */
        public PaymentResult reverseAddMoney(ReverseOrderRequest request) throws ServiceException, TException;

        /**
         * 获取扣G币的设置。
         * 返回结果：info={'deductgb': true/false, 'deductCommission': true/false}
         * 2013/2/20 新增
         * 
         * @param username
         * @param product
         * @param sign
         */
        public PaymentResult getPaymentSettings(String username, String product, String sign) throws TException;

        /**
         * 查询交易明细，[startDate, endDate] 闭区间，只能查最近半年的数据。
         * startDate: 开始日期，格式 2013-01-01，必填参数
         * endDate：结束日期，格式 2013-01-01，必填参数
         * 返回：json格式的数据
         * 2013/2/28 新增
         * 
         * @param criteria
         */
        public QueryResult queryTradeDetails(QueryCriteria criteria) throws ServiceException, TException;

        /**
         * 查询冻结资金的明细，[startDate, endDate] 闭区间，只能查最近半年的数据。
         * startDate: 开始日期，格式 2013-01-01，必填参数
         * endDate：结束日期，格式 2013-01-01，必填参数
         * 返回：json格式的数据
         * 2013/2/28 新增
         * 
         * @param criteria
         */
        public QueryResult queryLockDetails(QueryCriteria criteria) throws ServiceException, TException;

        /**
         * 增加虚拟货币。
         * 同一个orderId可以重复请求，但重复请求的时间间隔不能超过1个月，否则会导致重复加G币。
         * 成功返回：code=1, info=当前余额
         * 2013/2/28 新增
         * 
         * @param request
         */
        public PaymentResult addMoney(AddMoneyRequest request) throws ServiceException, TException;

        /**
         * 获得addMoney 的结果,
         * 成功返回 code=1
         * gbuid: gbuid
         * product: 产品ID
         * orderId: 产品订单ID
         * sign: HMacSha1签名
         * 
         * @param gbuid
         * @param product
         * @param orderId
         * @param sign
         */
        public PaymentResult getAddMoneyResult(long gbuid, String product, String orderId, String sign)
                throws TException;

        /**
         * 查询未被使用的优惠券列表，
         * startDate, endDate 可不填
         * 2013/3/6 新增
         * 返回json格式的数据
         * 如果 gameId=""，返回所有可用的优惠券
         * 如果 gameId!=""，返回这种 gameId 适用的优惠券
         * 
         * @param criteria
         */
        public QueryResult queryAvailableCoupons(QueryCriteria criteria) throws TException;

        /**
         * 生成优惠券
         * 2013/3/8 新增
         * 
         * @param request
         */
        public PaymentResult generateCoupon(GenerateCouponRequest request) throws TException;

        /**
         * 激活优惠券
         * 2013/3/21 新增
         * 成功返回
         * code=1，
         * 错误返回
         * code=错误代码, info=错误信息
         * product: 应用ID
         * gbuid: gbUID
         * couponCode: 优惠券号码
         * useEndTime: 使用的过期时间，格式gbgb-MM-dd HH:mm:ss
         * sign: HMacSha1 校验码
         * 
         * @param product
         * @param gbuid
         * @param couponCode
         * @param useEndTime
         * @param sign
         */
        public PaymentResult activeCoupon(String product, long gbuid, String couponCode, String useEndTime, String sign)
                throws TException;

        /**
         * 使用一张优惠券
         * 2013/3/6 新增
         * 
         * @param usage
         */
        public PaymentResult useCoupon(CouponUsage usage) throws TException;

        /**
         * 锁住一张优惠券，只有未使用的优惠券可以被锁住
         * 2013/4/24 新增
         * 
         * @param product
         * @param gbuid
         * @param couponCode
         * @param sign
         */
        public PaymentResult lockCoupon(String product, long gbuid, String couponCode, String sign) throws TException;

        /**
         * 解锁一张优惠券
         * 2013/4/24 新增
         * beUsed: 是否被使用，true=使用这张优惠券，false=解锁这张优惠券，优惠券变成未使用状态
         * 
         * @param usage
         * @param beUsed
         */
        public PaymentResult unlockOrUseCoupon(CouponUsage usage, boolean beUsed) throws TException;

        /**
         * 获取优惠券的信息，优惠券如果不属于此用户，返回错误
         * 2013/3/6 新增
         * 成功返回
         * code=1, info=json格式的数据，
         * 错误返回
         * code=错误代码, info=错误信息
         * product: 应用ID
         * gbuid: gbUID
         * couponCode: 优惠券号码
         * 注：这个方法不需要签名
         * 
         * @param product
         * @param gbuid
         * @param couponCode
         */
        public PaymentResult getCouponInfo(String product, long gbuid, String couponCode) throws TException;

        /**
         * 冻结优惠券
         * product: 应用ID
         * batchId: 要冻结的批次，可选参数，如果没有值，请使用""，
         * couponIdList: 要冻结的优惠券ID列表，size不能超过200，可选参数，没有参数为null或size=0的list
         * sign: HMacSha1签名
         * 成功返回：
         * code=1, info=操作成功的数量
         * 失败返回：
         * code=错误代码, info=错误信息
         * 
         * @param product
         * @param batchId
         * @param couponIdList
         * @param sign
         */
        public PaymentResult freezeCoupon(String product, String batchId, List<String> couponIdList, String sign)
                throws TException;

        /**
         * 获取支付密码设置，
         * 2013/3/11 新增
         * product: 应用ID
         * gbuid: 用户的gbUID
         * 成功返回：
         * code=1时, info=json数据，格式：
         * {'needPassword' : true/false, 'minAmount' : '要输入支付密码的最小额度'}
         * 失败返回：
         * code=错误代码, info=错误信息
         * 不需签名
         * 
         * @param product
         * @param gbuid
         */
        public PaymentResult getPayPasswordSettings(String product, long gbuid) throws TException;

        /**
         * 校验密码是否正确，如果用户没有设置支付密码，都返回成功(code=1)
         * 2013/3/11 新增
         * product: 应用ID
         * gbuid: 用户的gbUID
         * password: 密码（加密后的）
         * sign: HMacSha1 签名
         * 成功返回
         * code=1
         * 失败返回：
         * code=错误代码, info=错误信息
         * 
         * @param product
         * @param gbuid
         * @param password
         * @param sign
         */
        public PaymentResult verifyPassword(String product, long gbuid, String password, String sign) throws TException;

        /**
         * 用于状态检测的ping() 方法
         */
        public void ping() throws TException;

        /**
         * 获得用户在频道中某种货币有多少余额
         * 成功：返回PaymentResult.info=余额；失败：返回失败原因
         * 
         * @param req
         */
        public PaymentResult getgbChannelBalance(GetgbChannelBalanceRequest req) throws TException;

        /**
         * 增加用户在频道中的虚拟货币
         * 成功：返回PaymentResult.info=用户在频道中的虚拟货币余额；失败：返回失败原因
         * 
         * @param req
         */
        public PaymentResult addgbChannelMoney(AddgbChannelMoneyRequest req) throws TException;

        /**
         * 扣除用户在频道中的虚拟货币
         * 成功：返回PaymentResult.info=成功；失败：返回失败原因
         * 
         * @param req
         * @param originalOrder
         */
        public PaymentResult pagbyChannelMoney(PagbyChannelMoneyRequest req, OriginalOrder originalOrder)
                throws TException;

        /**
         * 冲正充值频道虚拟货币
         * 成功：返回PaymentResult.info=成功；失败：返回失败原因
         * 
         * @param req
         */
        public PaymentResult reverseAddgbChannelMoney(ReversegbChannelOrderRequest req) throws TException;

        /**
         * 冲正扣除频道虚拟货币
         * 成功：返回PaymentResult.info=成功；失败：返回失败原因
         * 
         * @param req
         */
        public PaymentResult reversePagbyChannelMoney(ReversegbChannelOrderRequest req) throws TException;

    }

    public interface AsyncIface {

        public void getDuowanb(String username, String product, int moneyType, String sign,
                AsyncMethodCallback<AsyncClient.getDuowanb_call> resultHandler) throws TException;

        public void payMoney(PayMoneyRequest request, AsyncMethodCallback<AsyncClient.payMoney_call> resultHandler)
                throws TException;

        public void payMoneyWithOriginalOrder(PayMoneyRequest2 request, OriginalOrder originalOrder,
                AsyncMethodCallback<AsyncClient.payMoneyWithOriginalOrder_call> resultHandler) throws TException;

        public void payMoneyWithToken(PayMoneyRequest2 request, OriginalOrder originalOrder, PayMoneyToken token,
                AsyncMethodCallback<AsyncClient.payMoneyWithToken_call> resultHandler) throws TException;

        public void getPayMoneyResult(String username, String product, String orderId, String sign,
                AsyncMethodCallback<AsyncClient.getPayMoneyResult_call> resultHandler) throws TException;

        public void addCommission(AddCommissionRequest request,
                AsyncMethodCallback<AsyncClient.addCommission_call> resultHandler) throws TException;

        public void getAddCommissionResult(String username, String product, String orderId, String sign,
                AsyncMethodCallback<AsyncClient.getAddCommissionResult_call> resultHandler) throws TException;

        public void getTotalMoney(String username, String product, int moneyType, String sign,
                AsyncMethodCallback<AsyncClient.getTotalMoney_call> resultHandler) throws TException;

        public void lockMoney(LockMoneyRequest request, AsyncMethodCallback<AsyncClient.lockMoney_call> resultHandler)
                throws TException;

        public void unlockMoney(UnlockMoneyRequest request,
                AsyncMethodCallback<AsyncClient.unlockMoney_call> resultHandler) throws TException;

        public void confirmPayMoney(String passport, String product, String orderId, int confirm,
                int authorizationType, int deductSettings, String sign,
                AsyncMethodCallback<AsyncClient.confirmPayMoney_call> resultHandler) throws TException;

        public void transferBalance(TransferBalanceRequest request,
                AsyncMethodCallback<AsyncClient.transferBalance_call> resultHandler) throws TException;

        public void reversePayMoney(ReverseOrderRequest request,
                AsyncMethodCallback<AsyncClient.reversePayMoney_call> resultHandler) throws TException;

        public void reverseAddMoney(ReverseOrderRequest request,
                AsyncMethodCallback<AsyncClient.reverseAddMoney_call> resultHandler) throws TException;

        public void getPaymentSettings(String username, String product, String sign,
                AsyncMethodCallback<AsyncClient.getPaymentSettings_call> resultHandler) throws TException;

        public void queryTradeDetails(QueryCriteria criteria,
                AsyncMethodCallback<AsyncClient.queryTradeDetails_call> resultHandler) throws TException;

        public void queryLockDetails(QueryCriteria criteria,
                AsyncMethodCallback<AsyncClient.queryLockDetails_call> resultHandler) throws TException;

        public void addMoney(AddMoneyRequest request, AsyncMethodCallback<AsyncClient.addMoney_call> resultHandler)
                throws TException;

        public void getAddMoneyResult(long gbuid, String product, String orderId, String sign,
                AsyncMethodCallback<AsyncClient.getAddMoneyResult_call> resultHandler) throws TException;

        public void queryAvailableCoupons(QueryCriteria criteria,
                AsyncMethodCallback<AsyncClient.queryAvailableCoupons_call> resultHandler) throws TException;

        public void generateCoupon(GenerateCouponRequest request,
                AsyncMethodCallback<AsyncClient.generateCoupon_call> resultHandler) throws TException;

        public void activeCoupon(String product, long gbuid, String couponCode, String useEndTime, String sign,
                AsyncMethodCallback<AsyncClient.activeCoupon_call> resultHandler) throws TException;

        public void useCoupon(CouponUsage usage, AsyncMethodCallback<AsyncClient.useCoupon_call> resultHandler)
                throws TException;

        public void lockCoupon(String product, long gbuid, String couponCode, String sign,
                AsyncMethodCallback<AsyncClient.lockCoupon_call> resultHandler) throws TException;

        public void unlockOrUseCoupon(CouponUsage usage, boolean beUsed,
                AsyncMethodCallback<AsyncClient.unlockOrUseCoupon_call> resultHandler) throws TException;

        public void getCouponInfo(String product, long gbuid, String couponCode,
                AsyncMethodCallback<AsyncClient.getCouponInfo_call> resultHandler) throws TException;

        public void freezeCoupon(String product, String batchId, List<String> couponIdList, String sign,
                AsyncMethodCallback<AsyncClient.freezeCoupon_call> resultHandler) throws TException;

        public void getPayPasswordSettings(String product, long gbuid,
                AsyncMethodCallback<AsyncClient.getPayPasswordSettings_call> resultHandler) throws TException;

        public void verifyPassword(String product, long gbuid, String password, String sign,
                AsyncMethodCallback<AsyncClient.verifyPassword_call> resultHandler) throws TException;

        public void ping(AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws TException;

        public void getgbChannelBalance(GetgbChannelBalanceRequest req,
                AsyncMethodCallback<AsyncClient.getgbChannelBalance_call> resultHandler) throws TException;

        public void addgbChannelMoney(AddgbChannelMoneyRequest req,
                AsyncMethodCallback<AsyncClient.addgbChannelMoney_call> resultHandler) throws TException;

        public void pagbyChannelMoney(PagbyChannelMoneyRequest req, OriginalOrder originalOrder,
                AsyncMethodCallback<AsyncClient.pagbyChannelMoney_call> resultHandler) throws TException;

        public void reverseAddgbChannelMoney(ReversegbChannelOrderRequest req,
                AsyncMethodCallback<AsyncClient.reverseAddgbChannelMoney_call> resultHandler) throws TException;

        public void reversePagbyChannelMoney(ReversegbChannelOrderRequest req,
                AsyncMethodCallback<AsyncClient.reversePagbyChannelMoney_call> resultHandler) throws TException;

    }

    public static class Client implements TServiceClient, Iface {
        public static class Factory implements TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(TProtocol iprot, TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(TProtocol prot) {
            this(prot, prot);
        }

        public Client(TProtocol iprot, TProtocol oprot) {
            iprot_ = iprot;
            oprot_ = oprot;
        }

        protected TProtocol iprot_;
        protected TProtocol oprot_;

        protected int seqid_;

        public TProtocol getInputProtocol() {
            return this.iprot_;
        }

        public TProtocol getOutputProtocol() {
            return this.oprot_;
        }

        public PaymentResult getDuowanb(String username, String product, int moneyType, String sign) throws TException {
            send_getDuowanb(username, product, moneyType, sign);
            return recv_getDuowanb();
        }

        public void send_getDuowanb(String username, String product, int moneyType, String sign) throws TException {
            oprot_.writeMessageBegin(new TMessage("getDuowanb", TMessageType.CALL, ++seqid_));
            getDuowanb_args args = new getDuowanb_args();
            args.setUsername(username);
            args.setProduct(product);
            args.setMoneyType(moneyType);
            args.setSign(sign);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_getDuowanb() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "getDuowanb failed: out of sequence response");
            }
            getDuowanb_result result = new getDuowanb_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "getDuowanb failed: unknown result");
        }

        public PaymentResult payMoney(PayMoneyRequest request) throws ServiceException, TException {
            send_payMoney(request);
            return recv_payMoney();
        }

        public void send_payMoney(PayMoneyRequest request) throws TException {
            oprot_.writeMessageBegin(new TMessage("payMoney", TMessageType.CALL, ++seqid_));
            payMoney_args args = new payMoney_args();
            args.setRequest(request);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_payMoney() throws ServiceException, TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "payMoney failed: out of sequence response");
            }
            payMoney_result result = new payMoney_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "payMoney failed: unknown result");
        }

        public PaymentResult payMoneyWithOriginalOrder(PayMoneyRequest2 request, OriginalOrder originalOrder)
                throws ServiceException, TException {
            send_payMoneyWithOriginalOrder(request, originalOrder);
            return recv_payMoneyWithOriginalOrder();
        }

        public void send_payMoneyWithOriginalOrder(PayMoneyRequest2 request, OriginalOrder originalOrder)
                throws TException {
            oprot_.writeMessageBegin(new TMessage("payMoneyWithOriginalOrder", TMessageType.CALL, ++seqid_));
            payMoneyWithOriginalOrder_args args = new payMoneyWithOriginalOrder_args();
            args.setRequest(request);
            args.setOriginalOrder(originalOrder);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_payMoneyWithOriginalOrder() throws ServiceException, TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "payMoneyWithOriginalOrder failed: out of sequence response");
            }
            payMoneyWithOriginalOrder_result result = new payMoneyWithOriginalOrder_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "payMoneyWithOriginalOrder failed: unknown result");
        }

        public PaymentResult payMoneyWithToken(PayMoneyRequest2 request, OriginalOrder originalOrder,
                PayMoneyToken token) throws ServiceException, TException {
            send_payMoneyWithToken(request, originalOrder, token);
            return recv_payMoneyWithToken();
        }

        public void send_payMoneyWithToken(PayMoneyRequest2 request, OriginalOrder originalOrder, PayMoneyToken token)
                throws TException {
            oprot_.writeMessageBegin(new TMessage("payMoneyWithToken", TMessageType.CALL, ++seqid_));
            payMoneyWithToken_args args = new payMoneyWithToken_args();
            args.setRequest(request);
            args.setOriginalOrder(originalOrder);
            args.setToken(token);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_payMoneyWithToken() throws ServiceException, TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "payMoneyWithToken failed: out of sequence response");
            }
            payMoneyWithToken_result result = new payMoneyWithToken_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "payMoneyWithToken failed: unknown result");
        }

        public PaymentResult getPayMoneyResult(String username, String product, String orderId, String sign)
                throws TException {
            send_getPayMoneyResult(username, product, orderId, sign);
            return recv_getPayMoneyResult();
        }

        public void send_getPayMoneyResult(String username, String product, String orderId, String sign)
                throws TException {
            oprot_.writeMessageBegin(new TMessage("getPayMoneyResult", TMessageType.CALL, ++seqid_));
            getPayMoneyResult_args args = new getPayMoneyResult_args();
            args.setUsername(username);
            args.setProduct(product);
            args.setOrderId(orderId);
            args.setSign(sign);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_getPayMoneyResult() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "getPayMoneyResult failed: out of sequence response");
            }
            getPayMoneyResult_result result = new getPayMoneyResult_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "getPayMoneyResult failed: unknown result");
        }

        public PaymentResult addCommission(AddCommissionRequest request) throws ServiceException, TException {
            send_addCommission(request);
            return recv_addCommission();
        }

        public void send_addCommission(AddCommissionRequest request) throws TException {
            oprot_.writeMessageBegin(new TMessage("addCommission", TMessageType.CALL, ++seqid_));
            addCommission_args args = new addCommission_args();
            args.setRequest(request);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_addCommission() throws ServiceException, TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "addCommission failed: out of sequence response");
            }
            addCommission_result result = new addCommission_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "addCommission failed: unknown result");
        }

        public PaymentResult getAddCommissionResult(String username, String product, String orderId, String sign)
                throws TException {
            send_getAddCommissionResult(username, product, orderId, sign);
            return recv_getAddCommissionResult();
        }

        public void send_getAddCommissionResult(String username, String product, String orderId, String sign)
                throws TException {
            oprot_.writeMessageBegin(new TMessage("getAddCommissionResult", TMessageType.CALL, ++seqid_));
            getAddCommissionResult_args args = new getAddCommissionResult_args();
            args.setUsername(username);
            args.setProduct(product);
            args.setOrderId(orderId);
            args.setSign(sign);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_getAddCommissionResult() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "getAddCommissionResult failed: out of sequence response");
            }
            getAddCommissionResult_result result = new getAddCommissionResult_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "getAddCommissionResult failed: unknown result");
        }

        public PaymentResult getTotalMoney(String username, String product, int moneyType, String sign)
                throws TException {
            send_getTotalMoney(username, product, moneyType, sign);
            return recv_getTotalMoney();
        }

        public void send_getTotalMoney(String username, String product, int moneyType, String sign) throws TException {
            oprot_.writeMessageBegin(new TMessage("getTotalMoney", TMessageType.CALL, ++seqid_));
            getTotalMoney_args args = new getTotalMoney_args();
            args.setUsername(username);
            args.setProduct(product);
            args.setMoneyType(moneyType);
            args.setSign(sign);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_getTotalMoney() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "getTotalMoney failed: out of sequence response");
            }
            getTotalMoney_result result = new getTotalMoney_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "getTotalMoney failed: unknown result");
        }

        public PaymentResult lockMoney(LockMoneyRequest request) throws ServiceException, TException {
            send_lockMoney(request);
            return recv_lockMoney();
        }

        public void send_lockMoney(LockMoneyRequest request) throws TException {
            oprot_.writeMessageBegin(new TMessage("lockMoney", TMessageType.CALL, ++seqid_));
            lockMoney_args args = new lockMoney_args();
            args.setRequest(request);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_lockMoney() throws ServiceException, TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "lockMoney failed: out of sequence response");
            }
            lockMoney_result result = new lockMoney_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "lockMoney failed: unknown result");
        }

        public PaymentResult unlockMoney(UnlockMoneyRequest request) throws ServiceException, TException {
            send_unlockMoney(request);
            return recv_unlockMoney();
        }

        public void send_unlockMoney(UnlockMoneyRequest request) throws TException {
            oprot_.writeMessageBegin(new TMessage("unlockMoney", TMessageType.CALL, ++seqid_));
            unlockMoney_args args = new unlockMoney_args();
            args.setRequest(request);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_unlockMoney() throws ServiceException, TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "unlockMoney failed: out of sequence response");
            }
            unlockMoney_result result = new unlockMoney_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "unlockMoney failed: unknown result");
        }

        public PaymentResult confirmPayMoney(String passport, String product, String orderId, int confirm,
                int authorizationType, int deductSettings, String sign) throws TException {
            send_confirmPayMoney(passport, product, orderId, confirm, authorizationType, deductSettings, sign);
            return recv_confirmPayMoney();
        }

        public void send_confirmPayMoney(String passport, String product, String orderId, int confirm,
                int authorizationType, int deductSettings, String sign) throws TException {
            oprot_.writeMessageBegin(new TMessage("confirmPayMoney", TMessageType.CALL, ++seqid_));
            confirmPayMoney_args args = new confirmPayMoney_args();
            args.setPassport(passport);
            args.setProduct(product);
            args.setOrderId(orderId);
            args.setConfirm(confirm);
            args.setAuthorizationType(authorizationType);
            args.setDeductSettings(deductSettings);
            args.setSign(sign);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_confirmPayMoney() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "confirmPayMoney failed: out of sequence response");
            }
            confirmPayMoney_result result = new confirmPayMoney_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "confirmPayMoney failed: unknown result");
        }

        public PaymentResult transferBalance(TransferBalanceRequest request) throws ServiceException, TException {
            send_transferBalance(request);
            return recv_transferBalance();
        }

        public void send_transferBalance(TransferBalanceRequest request) throws TException {
            oprot_.writeMessageBegin(new TMessage("transferBalance", TMessageType.CALL, ++seqid_));
            transferBalance_args args = new transferBalance_args();
            args.setRequest(request);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_transferBalance() throws ServiceException, TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "transferBalance failed: out of sequence response");
            }
            transferBalance_result result = new transferBalance_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "transferBalance failed: unknown result");
        }

        public PaymentResult reversePayMoney(ReverseOrderRequest request) throws ServiceException, TException {
            send_reversePayMoney(request);
            return recv_reversePayMoney();
        }

        public void send_reversePayMoney(ReverseOrderRequest request) throws TException {
            oprot_.writeMessageBegin(new TMessage("reversePayMoney", TMessageType.CALL, ++seqid_));
            reversePayMoney_args args = new reversePayMoney_args();
            args.setRequest(request);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_reversePayMoney() throws ServiceException, TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "reversePayMoney failed: out of sequence response");
            }
            reversePayMoney_result result = new reversePayMoney_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "reversePayMoney failed: unknown result");
        }

        public PaymentResult reverseAddMoney(ReverseOrderRequest request) throws ServiceException, TException {
            send_reverseAddMoney(request);
            return recv_reverseAddMoney();
        }

        public void send_reverseAddMoney(ReverseOrderRequest request) throws TException {
            oprot_.writeMessageBegin(new TMessage("reverseAddMoney", TMessageType.CALL, ++seqid_));
            reverseAddMoney_args args = new reverseAddMoney_args();
            args.setRequest(request);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_reverseAddMoney() throws ServiceException, TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "reverseAddMoney failed: out of sequence response");
            }
            reverseAddMoney_result result = new reverseAddMoney_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "reverseAddMoney failed: unknown result");
        }

        public PaymentResult getPaymentSettings(String username, String product, String sign) throws TException {
            send_getPaymentSettings(username, product, sign);
            return recv_getPaymentSettings();
        }

        public void send_getPaymentSettings(String username, String product, String sign) throws TException {
            oprot_.writeMessageBegin(new TMessage("getPaymentSettings", TMessageType.CALL, ++seqid_));
            getPaymentSettings_args args = new getPaymentSettings_args();
            args.setUsername(username);
            args.setProduct(product);
            args.setSign(sign);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_getPaymentSettings() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "getPaymentSettings failed: out of sequence response");
            }
            getPaymentSettings_result result = new getPaymentSettings_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "getPaymentSettings failed: unknown result");
        }

        public QueryResult queryTradeDetails(QueryCriteria criteria) throws ServiceException, TException {
            send_queryTradeDetails(criteria);
            return recv_queryTradeDetails();
        }

        public void send_queryTradeDetails(QueryCriteria criteria) throws TException {
            oprot_.writeMessageBegin(new TMessage("queryTradeDetails", TMessageType.CALL, ++seqid_));
            queryTradeDetails_args args = new queryTradeDetails_args();
            args.setCriteria(criteria);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public QueryResult recv_queryTradeDetails() throws ServiceException, TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "queryTradeDetails failed: out of sequence response");
            }
            queryTradeDetails_result result = new queryTradeDetails_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "queryTradeDetails failed: unknown result");
        }

        public QueryResult queryLockDetails(QueryCriteria criteria) throws ServiceException, TException {
            send_queryLockDetails(criteria);
            return recv_queryLockDetails();
        }

        public void send_queryLockDetails(QueryCriteria criteria) throws TException {
            oprot_.writeMessageBegin(new TMessage("queryLockDetails", TMessageType.CALL, ++seqid_));
            queryLockDetails_args args = new queryLockDetails_args();
            args.setCriteria(criteria);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public QueryResult recv_queryLockDetails() throws ServiceException, TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "queryLockDetails failed: out of sequence response");
            }
            queryLockDetails_result result = new queryLockDetails_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "queryLockDetails failed: unknown result");
        }

        public PaymentResult addMoney(AddMoneyRequest request) throws ServiceException, TException {
            send_addMoney(request);
            return recv_addMoney();
        }

        public void send_addMoney(AddMoneyRequest request) throws TException {
            oprot_.writeMessageBegin(new TMessage("addMoney", TMessageType.CALL, ++seqid_));
            addMoney_args args = new addMoney_args();
            args.setRequest(request);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_addMoney() throws ServiceException, TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "addMoney failed: out of sequence response");
            }
            addMoney_result result = new addMoney_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "addMoney failed: unknown result");
        }

        public PaymentResult getAddMoneyResult(long gbuid, String product, String orderId, String sign)
                throws TException {
            send_getAddMoneyResult(gbuid, product, orderId, sign);
            return recv_getAddMoneyResult();
        }

        public void send_getAddMoneyResult(long gbuid, String product, String orderId, String sign) throws TException {
            oprot_.writeMessageBegin(new TMessage("getAddMoneyResult", TMessageType.CALL, ++seqid_));
            getAddMoneyResult_args args = new getAddMoneyResult_args();
            args.setgbuid(gbuid);
            args.setProduct(product);
            args.setOrderId(orderId);
            args.setSign(sign);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_getAddMoneyResult() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "getAddMoneyResult failed: out of sequence response");
            }
            getAddMoneyResult_result result = new getAddMoneyResult_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "getAddMoneyResult failed: unknown result");
        }

        public QueryResult queryAvailableCoupons(QueryCriteria criteria) throws TException {
            send_queryAvailableCoupons(criteria);
            return recv_queryAvailableCoupons();
        }

        public void send_queryAvailableCoupons(QueryCriteria criteria) throws TException {
            oprot_.writeMessageBegin(new TMessage("queryAvailableCoupons", TMessageType.CALL, ++seqid_));
            queryAvailableCoupons_args args = new queryAvailableCoupons_args();
            args.setCriteria(criteria);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public QueryResult recv_queryAvailableCoupons() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "queryAvailableCoupons failed: out of sequence response");
            }
            queryAvailableCoupons_result result = new queryAvailableCoupons_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "queryAvailableCoupons failed: unknown result");
        }

        public PaymentResult generateCoupon(GenerateCouponRequest request) throws TException {
            send_generateCoupon(request);
            return recv_generateCoupon();
        }

        public void send_generateCoupon(GenerateCouponRequest request) throws TException {
            oprot_.writeMessageBegin(new TMessage("generateCoupon", TMessageType.CALL, ++seqid_));
            generateCoupon_args args = new generateCoupon_args();
            args.setRequest(request);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_generateCoupon() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "generateCoupon failed: out of sequence response");
            }
            generateCoupon_result result = new generateCoupon_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "generateCoupon failed: unknown result");
        }

        public PaymentResult activeCoupon(String product, long gbuid, String couponCode, String useEndTime, String sign)
                throws TException {
            send_activeCoupon(product, gbuid, couponCode, useEndTime, sign);
            return recv_activeCoupon();
        }

        public void send_activeCoupon(String product, long gbuid, String couponCode, String useEndTime, String sign)
                throws TException {
            oprot_.writeMessageBegin(new TMessage("activeCoupon", TMessageType.CALL, ++seqid_));
            activeCoupon_args args = new activeCoupon_args();
            args.setProduct(product);
            args.setgbuid(gbuid);
            args.setCouponCode(couponCode);
            args.setUseEndTime(useEndTime);
            args.setSign(sign);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_activeCoupon() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "activeCoupon failed: out of sequence response");
            }
            activeCoupon_result result = new activeCoupon_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "activeCoupon failed: unknown result");
        }

        public PaymentResult useCoupon(CouponUsage usage) throws TException {
            send_useCoupon(usage);
            return recv_useCoupon();
        }

        public void send_useCoupon(CouponUsage usage) throws TException {
            oprot_.writeMessageBegin(new TMessage("useCoupon", TMessageType.CALL, ++seqid_));
            useCoupon_args args = new useCoupon_args();
            args.setUsage(usage);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_useCoupon() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "useCoupon failed: out of sequence response");
            }
            useCoupon_result result = new useCoupon_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "useCoupon failed: unknown result");
        }

        public PaymentResult lockCoupon(String product, long gbuid, String couponCode, String sign) throws TException {
            send_lockCoupon(product, gbuid, couponCode, sign);
            return recv_lockCoupon();
        }

        public void send_lockCoupon(String product, long gbuid, String couponCode, String sign) throws TException {
            oprot_.writeMessageBegin(new TMessage("lockCoupon", TMessageType.CALL, ++seqid_));
            lockCoupon_args args = new lockCoupon_args();
            args.setProduct(product);
            args.setgbuid(gbuid);
            args.setCouponCode(couponCode);
            args.setSign(sign);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_lockCoupon() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "lockCoupon failed: out of sequence response");
            }
            lockCoupon_result result = new lockCoupon_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "lockCoupon failed: unknown result");
        }

        public PaymentResult unlockOrUseCoupon(CouponUsage usage, boolean beUsed) throws TException {
            send_unlockOrUseCoupon(usage, beUsed);
            return recv_unlockOrUseCoupon();
        }

        public void send_unlockOrUseCoupon(CouponUsage usage, boolean beUsed) throws TException {
            oprot_.writeMessageBegin(new TMessage("unlockOrUseCoupon", TMessageType.CALL, ++seqid_));
            unlockOrUseCoupon_args args = new unlockOrUseCoupon_args();
            args.setUsage(usage);
            args.setBeUsed(beUsed);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_unlockOrUseCoupon() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "unlockOrUseCoupon failed: out of sequence response");
            }
            unlockOrUseCoupon_result result = new unlockOrUseCoupon_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "unlockOrUseCoupon failed: unknown result");
        }

        public PaymentResult getCouponInfo(String product, long gbuid, String couponCode) throws TException {
            send_getCouponInfo(product, gbuid, couponCode);
            return recv_getCouponInfo();
        }

        public void send_getCouponInfo(String product, long gbuid, String couponCode) throws TException {
            oprot_.writeMessageBegin(new TMessage("getCouponInfo", TMessageType.CALL, ++seqid_));
            getCouponInfo_args args = new getCouponInfo_args();
            args.setProduct(product);
            args.setgbuid(gbuid);
            args.setCouponCode(couponCode);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_getCouponInfo() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "getCouponInfo failed: out of sequence response");
            }
            getCouponInfo_result result = new getCouponInfo_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "getCouponInfo failed: unknown result");
        }

        public PaymentResult freezeCoupon(String product, String batchId, List<String> couponIdList, String sign)
                throws TException {
            send_freezeCoupon(product, batchId, couponIdList, sign);
            return recv_freezeCoupon();
        }

        public void send_freezeCoupon(String product, String batchId, List<String> couponIdList, String sign)
                throws TException {
            oprot_.writeMessageBegin(new TMessage("freezeCoupon", TMessageType.CALL, ++seqid_));
            freezeCoupon_args args = new freezeCoupon_args();
            args.setProduct(product);
            args.setBatchId(batchId);
            args.setCouponIdList(couponIdList);
            args.setSign(sign);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_freezeCoupon() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "freezeCoupon failed: out of sequence response");
            }
            freezeCoupon_result result = new freezeCoupon_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "freezeCoupon failed: unknown result");
        }

        public PaymentResult getPayPasswordSettings(String product, long gbuid) throws TException {
            send_getPayPasswordSettings(product, gbuid);
            return recv_getPayPasswordSettings();
        }

        public void send_getPayPasswordSettings(String product, long gbuid) throws TException {
            oprot_.writeMessageBegin(new TMessage("getPayPasswordSettings", TMessageType.CALL, ++seqid_));
            getPayPasswordSettings_args args = new getPayPasswordSettings_args();
            args.setProduct(product);
            args.setgbuid(gbuid);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_getPayPasswordSettings() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "getPayPasswordSettings failed: out of sequence response");
            }
            getPayPasswordSettings_result result = new getPayPasswordSettings_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "getPayPasswordSettings failed: unknown result");
        }

        public PaymentResult verifyPassword(String product, long gbuid, String password, String sign) throws TException {
            send_verifyPassword(product, gbuid, password, sign);
            return recv_verifyPassword();
        }

        public void send_verifyPassword(String product, long gbuid, String password, String sign) throws TException {
            oprot_.writeMessageBegin(new TMessage("verifyPassword", TMessageType.CALL, ++seqid_));
            verifyPassword_args args = new verifyPassword_args();
            args.setProduct(product);
            args.setgbuid(gbuid);
            args.setPassword(password);
            args.setSign(sign);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_verifyPassword() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "verifyPassword failed: out of sequence response");
            }
            verifyPassword_result result = new verifyPassword_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "verifyPassword failed: unknown result");
        }

        public void ping() throws TException {
            send_ping();
            recv_ping();
        }

        public void send_ping() throws TException {
            oprot_.writeMessageBegin(new TMessage("ping", TMessageType.CALL, ++seqid_));
            ping_args args = new ping_args();
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public void recv_ping() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "ping failed: out of sequence response");
            }
            ping_result result = new ping_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            return;
        }

        public PaymentResult getgbChannelBalance(GetgbChannelBalanceRequest req) throws TException {
            send_getgbChannelBalance(req);
            return recv_getgbChannelBalance();
        }

        public void send_getgbChannelBalance(GetgbChannelBalanceRequest req) throws TException {
            oprot_.writeMessageBegin(new TMessage("getgbChannelBalance", TMessageType.CALL, ++seqid_));
            getgbChannelBalance_args args = new getgbChannelBalance_args();
            args.setReq(req);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_getgbChannelBalance() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "getgbChannelBalance failed: out of sequence response");
            }
            getgbChannelBalance_result result = new getgbChannelBalance_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "getgbChannelBalance failed: unknown result");
        }

        public PaymentResult addgbChannelMoney(AddgbChannelMoneyRequest req) throws TException {
            send_addgbChannelMoney(req);
            return recv_addgbChannelMoney();
        }

        public void send_addgbChannelMoney(AddgbChannelMoneyRequest req) throws TException {
            oprot_.writeMessageBegin(new TMessage("addgbChannelMoney", TMessageType.CALL, ++seqid_));
            addgbChannelMoney_args args = new addgbChannelMoney_args();
            args.setReq(req);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_addgbChannelMoney() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "addgbChannelMoney failed: out of sequence response");
            }
            addgbChannelMoney_result result = new addgbChannelMoney_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "addgbChannelMoney failed: unknown result");
        }

        public PaymentResult pagbyChannelMoney(PagbyChannelMoneyRequest req, OriginalOrder originalOrder)
                throws TException {
            send_pagbyChannelMoney(req, originalOrder);
            return recv_pagbyChannelMoney();
        }

        public void send_pagbyChannelMoney(PagbyChannelMoneyRequest req, OriginalOrder originalOrder) throws TException {
            oprot_.writeMessageBegin(new TMessage("pagbyChannelMoney", TMessageType.CALL, ++seqid_));
            pagbyChannelMoney_args args = new pagbyChannelMoney_args();
            args.setReq(req);
            args.setOriginalOrder(originalOrder);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_pagbyChannelMoney() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "pagbyChannelMoney failed: out of sequence response");
            }
            pagbyChannelMoney_result result = new pagbyChannelMoney_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "pagbyChannelMoney failed: unknown result");
        }

        public PaymentResult reverseAddgbChannelMoney(ReversegbChannelOrderRequest req) throws TException {
            send_reverseAddgbChannelMoney(req);
            return recv_reverseAddgbChannelMoney();
        }

        public void send_reverseAddgbChannelMoney(ReversegbChannelOrderRequest req) throws TException {
            oprot_.writeMessageBegin(new TMessage("reverseAddgbChannelMoney", TMessageType.CALL, ++seqid_));
            reverseAddgbChannelMoney_args args = new reverseAddgbChannelMoney_args();
            args.setReq(req);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_reverseAddgbChannelMoney() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "reverseAddgbChannelMoney failed: out of sequence response");
            }
            reverseAddgbChannelMoney_result result = new reverseAddgbChannelMoney_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "reverseAddgbChannelMoney failed: unknown result");
        }

        public PaymentResult reversePagbyChannelMoney(ReversegbChannelOrderRequest req) throws TException {
            send_reversePagbyChannelMoney(req);
            return recv_reversePagbyChannelMoney();
        }

        public void send_reversePagbyChannelMoney(ReversegbChannelOrderRequest req) throws TException {
            oprot_.writeMessageBegin(new TMessage("reversePagbyChannelMoney", TMessageType.CALL, ++seqid_));
            reversePagbyChannelMoney_args args = new reversePagbyChannelMoney_args();
            args.setReq(req);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public PaymentResult recv_reversePagbyChannelMoney() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,
                        "reversePagbyChannelMoney failed: out of sequence response");
            }
            reversePagbyChannelMoney_result result = new reversePagbyChannelMoney_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT,
                    "reversePagbyChannelMoney failed: unknown result");
        }

    }

    public static class AsyncClient extends TAsyncClient implements AsyncIface {
        public static class Factory implements TAsyncClientFactory<AsyncClient> {
            private TAsyncClientManager clientManager;
            private TProtocolFactory protocolFactory;

            public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager,
                TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void getDuowanb(String username, String product, int moneyType, String sign,
                AsyncMethodCallback<getDuowanb_call> resultHandler) throws TException {
            checkReady();
            getDuowanb_call method_call = new getDuowanb_call(username, product, moneyType, sign, resultHandler, this,
                    protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getDuowanb_call extends TAsyncMethodCall {
            private String username;
            private String product;
            private int moneyType;
            private String sign;

            public getDuowanb_call(String username, String product, int moneyType, String sign,
                    AsyncMethodCallback<getDuowanb_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.username = username;
                this.product = product;
                this.moneyType = moneyType;
                this.sign = sign;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getDuowanb", TMessageType.CALL, 0));
                getDuowanb_args args = new getDuowanb_args();
                args.setUsername(username);
                args.setProduct(product);
                args.setMoneyType(moneyType);
                args.setSign(sign);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getDuowanb();
            }
        }

        public void payMoney(PayMoneyRequest request, AsyncMethodCallback<payMoney_call> resultHandler)
                throws TException {
            checkReady();
            payMoney_call method_call = new payMoney_call(request, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class payMoney_call extends TAsyncMethodCall {
            private PayMoneyRequest request;

            public payMoney_call(PayMoneyRequest request, AsyncMethodCallback<payMoney_call> resultHandler,
                    TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport)
                    throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.request = request;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("payMoney", TMessageType.CALL, 0));
                payMoney_args args = new payMoney_args();
                args.setRequest(request);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws ServiceException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_payMoney();
            }
        }

        public void payMoneyWithOriginalOrder(PayMoneyRequest2 request, OriginalOrder originalOrder,
                AsyncMethodCallback<payMoneyWithOriginalOrder_call> resultHandler) throws TException {
            checkReady();
            payMoneyWithOriginalOrder_call method_call = new payMoneyWithOriginalOrder_call(request, originalOrder,
                    resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class payMoneyWithOriginalOrder_call extends TAsyncMethodCall {
            private PayMoneyRequest2 request;
            private OriginalOrder originalOrder;

            public payMoneyWithOriginalOrder_call(PayMoneyRequest2 request, OriginalOrder originalOrder,
                    AsyncMethodCallback<payMoneyWithOriginalOrder_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.request = request;
                this.originalOrder = originalOrder;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("payMoneyWithOriginalOrder", TMessageType.CALL, 0));
                payMoneyWithOriginalOrder_args args = new payMoneyWithOriginalOrder_args();
                args.setRequest(request);
                args.setOriginalOrder(originalOrder);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws ServiceException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_payMoneyWithOriginalOrder();
            }
        }

        public void payMoneyWithToken(PayMoneyRequest2 request, OriginalOrder originalOrder, PayMoneyToken token,
                AsyncMethodCallback<payMoneyWithToken_call> resultHandler) throws TException {
            checkReady();
            payMoneyWithToken_call method_call = new payMoneyWithToken_call(request, originalOrder, token,
                    resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class payMoneyWithToken_call extends TAsyncMethodCall {
            private PayMoneyRequest2 request;
            private OriginalOrder originalOrder;
            private PayMoneyToken token;

            public payMoneyWithToken_call(PayMoneyRequest2 request, OriginalOrder originalOrder, PayMoneyToken token,
                    AsyncMethodCallback<payMoneyWithToken_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.request = request;
                this.originalOrder = originalOrder;
                this.token = token;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("payMoneyWithToken", TMessageType.CALL, 0));
                payMoneyWithToken_args args = new payMoneyWithToken_args();
                args.setRequest(request);
                args.setOriginalOrder(originalOrder);
                args.setToken(token);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws ServiceException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_payMoneyWithToken();
            }
        }

        public void getPayMoneyResult(String username, String product, String orderId, String sign,
                AsyncMethodCallback<getPayMoneyResult_call> resultHandler) throws TException {
            checkReady();
            getPayMoneyResult_call method_call = new getPayMoneyResult_call(username, product, orderId, sign,
                    resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getPayMoneyResult_call extends TAsyncMethodCall {
            private String username;
            private String product;
            private String orderId;
            private String sign;

            public getPayMoneyResult_call(String username, String product, String orderId, String sign,
                    AsyncMethodCallback<getPayMoneyResult_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.username = username;
                this.product = product;
                this.orderId = orderId;
                this.sign = sign;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getPayMoneyResult", TMessageType.CALL, 0));
                getPayMoneyResult_args args = new getPayMoneyResult_args();
                args.setUsername(username);
                args.setProduct(product);
                args.setOrderId(orderId);
                args.setSign(sign);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPayMoneyResult();
            }
        }

        public void addCommission(AddCommissionRequest request, AsyncMethodCallback<addCommission_call> resultHandler)
                throws TException {
            checkReady();
            addCommission_call method_call = new addCommission_call(request, resultHandler, this, protocolFactory,
                    transport);
            manager.call(method_call);
        }

        public static class addCommission_call extends TAsyncMethodCall {
            private AddCommissionRequest request;

            public addCommission_call(AddCommissionRequest request,
                    AsyncMethodCallback<addCommission_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.request = request;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("addCommission", TMessageType.CALL, 0));
                addCommission_args args = new addCommission_args();
                args.setRequest(request);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws ServiceException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addCommission();
            }
        }

        public void getAddCommissionResult(String username, String product, String orderId, String sign,
                AsyncMethodCallback<getAddCommissionResult_call> resultHandler) throws TException {
            checkReady();
            getAddCommissionResult_call method_call = new getAddCommissionResult_call(username, product, orderId, sign,
                    resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getAddCommissionResult_call extends TAsyncMethodCall {
            private String username;
            private String product;
            private String orderId;
            private String sign;

            public getAddCommissionResult_call(String username, String product, String orderId, String sign,
                    AsyncMethodCallback<getAddCommissionResult_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.username = username;
                this.product = product;
                this.orderId = orderId;
                this.sign = sign;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getAddCommissionResult", TMessageType.CALL, 0));
                getAddCommissionResult_args args = new getAddCommissionResult_args();
                args.setUsername(username);
                args.setProduct(product);
                args.setOrderId(orderId);
                args.setSign(sign);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getAddCommissionResult();
            }
        }

        public void getTotalMoney(String username, String product, int moneyType, String sign,
                AsyncMethodCallback<getTotalMoney_call> resultHandler) throws TException {
            checkReady();
            getTotalMoney_call method_call = new getTotalMoney_call(username, product, moneyType, sign, resultHandler,
                    this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getTotalMoney_call extends TAsyncMethodCall {
            private String username;
            private String product;
            private int moneyType;
            private String sign;

            public getTotalMoney_call(String username, String product, int moneyType, String sign,
                    AsyncMethodCallback<getTotalMoney_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.username = username;
                this.product = product;
                this.moneyType = moneyType;
                this.sign = sign;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getTotalMoney", TMessageType.CALL, 0));
                getTotalMoney_args args = new getTotalMoney_args();
                args.setUsername(username);
                args.setProduct(product);
                args.setMoneyType(moneyType);
                args.setSign(sign);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTotalMoney();
            }
        }

        public void lockMoney(LockMoneyRequest request, AsyncMethodCallback<lockMoney_call> resultHandler)
                throws TException {
            checkReady();
            lockMoney_call method_call = new lockMoney_call(request, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class lockMoney_call extends TAsyncMethodCall {
            private LockMoneyRequest request;

            public lockMoney_call(LockMoneyRequest request, AsyncMethodCallback<lockMoney_call> resultHandler,
                    TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport)
                    throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.request = request;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("lockMoney", TMessageType.CALL, 0));
                lockMoney_args args = new lockMoney_args();
                args.setRequest(request);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws ServiceException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_lockMoney();
            }
        }

        public void unlockMoney(UnlockMoneyRequest request, AsyncMethodCallback<unlockMoney_call> resultHandler)
                throws TException {
            checkReady();
            unlockMoney_call method_call = new unlockMoney_call(request, resultHandler, this, protocolFactory,
                    transport);
            manager.call(method_call);
        }

        public static class unlockMoney_call extends TAsyncMethodCall {
            private UnlockMoneyRequest request;

            public unlockMoney_call(UnlockMoneyRequest request, AsyncMethodCallback<unlockMoney_call> resultHandler,
                    TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport)
                    throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.request = request;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("unlockMoney", TMessageType.CALL, 0));
                unlockMoney_args args = new unlockMoney_args();
                args.setRequest(request);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws ServiceException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_unlockMoney();
            }
        }

        public void confirmPayMoney(String passport, String product, String orderId, int confirm,
                int authorizationType, int deductSettings, String sign,
                AsyncMethodCallback<confirmPayMoney_call> resultHandler) throws TException {
            checkReady();
            confirmPayMoney_call method_call = new confirmPayMoney_call(passport, product, orderId, confirm,
                    authorizationType, deductSettings, sign, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class confirmPayMoney_call extends TAsyncMethodCall {
            private String passport;
            private String product;
            private String orderId;
            private int confirm;
            private int authorizationType;
            private int deductSettings;
            private String sign;

            public confirmPayMoney_call(String passport, String product, String orderId, int confirm,
                    int authorizationType, int deductSettings, String sign,
                    AsyncMethodCallback<confirmPayMoney_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.passport = passport;
                this.product = product;
                this.orderId = orderId;
                this.confirm = confirm;
                this.authorizationType = authorizationType;
                this.deductSettings = deductSettings;
                this.sign = sign;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("confirmPayMoney", TMessageType.CALL, 0));
                confirmPayMoney_args args = new confirmPayMoney_args();
                args.setPassport(passport);
                args.setProduct(product);
                args.setOrderId(orderId);
                args.setConfirm(confirm);
                args.setAuthorizationType(authorizationType);
                args.setDeductSettings(deductSettings);
                args.setSign(sign);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_confirmPayMoney();
            }
        }

        public void transferBalance(TransferBalanceRequest request,
                AsyncMethodCallback<transferBalance_call> resultHandler) throws TException {
            checkReady();
            transferBalance_call method_call = new transferBalance_call(request, resultHandler, this, protocolFactory,
                    transport);
            manager.call(method_call);
        }

        public static class transferBalance_call extends TAsyncMethodCall {
            private TransferBalanceRequest request;

            public transferBalance_call(TransferBalanceRequest request,
                    AsyncMethodCallback<transferBalance_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.request = request;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("transferBalance", TMessageType.CALL, 0));
                transferBalance_args args = new transferBalance_args();
                args.setRequest(request);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws ServiceException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_transferBalance();
            }
        }

        public void reversePayMoney(ReverseOrderRequest request, AsyncMethodCallback<reversePayMoney_call> resultHandler)
                throws TException {
            checkReady();
            reversePayMoney_call method_call = new reversePayMoney_call(request, resultHandler, this, protocolFactory,
                    transport);
            manager.call(method_call);
        }

        public static class reversePayMoney_call extends TAsyncMethodCall {
            private ReverseOrderRequest request;

            public reversePayMoney_call(ReverseOrderRequest request,
                    AsyncMethodCallback<reversePayMoney_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.request = request;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("reversePayMoney", TMessageType.CALL, 0));
                reversePayMoney_args args = new reversePayMoney_args();
                args.setRequest(request);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws ServiceException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_reversePayMoney();
            }
        }

        public void reverseAddMoney(ReverseOrderRequest request, AsyncMethodCallback<reverseAddMoney_call> resultHandler)
                throws TException {
            checkReady();
            reverseAddMoney_call method_call = new reverseAddMoney_call(request, resultHandler, this, protocolFactory,
                    transport);
            manager.call(method_call);
        }

        public static class reverseAddMoney_call extends TAsyncMethodCall {
            private ReverseOrderRequest request;

            public reverseAddMoney_call(ReverseOrderRequest request,
                    AsyncMethodCallback<reverseAddMoney_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.request = request;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("reverseAddMoney", TMessageType.CALL, 0));
                reverseAddMoney_args args = new reverseAddMoney_args();
                args.setRequest(request);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws ServiceException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_reverseAddMoney();
            }
        }

        public void getPaymentSettings(String username, String product, String sign,
                AsyncMethodCallback<getPaymentSettings_call> resultHandler) throws TException {
            checkReady();
            getPaymentSettings_call method_call = new getPaymentSettings_call(username, product, sign, resultHandler,
                    this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getPaymentSettings_call extends TAsyncMethodCall {
            private String username;
            private String product;
            private String sign;

            public getPaymentSettings_call(String username, String product, String sign,
                    AsyncMethodCallback<getPaymentSettings_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.username = username;
                this.product = product;
                this.sign = sign;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getPaymentSettings", TMessageType.CALL, 0));
                getPaymentSettings_args args = new getPaymentSettings_args();
                args.setUsername(username);
                args.setProduct(product);
                args.setSign(sign);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPaymentSettings();
            }
        }

        public void queryTradeDetails(QueryCriteria criteria, AsyncMethodCallback<queryTradeDetails_call> resultHandler)
                throws TException {
            checkReady();
            queryTradeDetails_call method_call = new queryTradeDetails_call(criteria, resultHandler, this,
                    protocolFactory, transport);
            manager.call(method_call);
        }

        public static class queryTradeDetails_call extends TAsyncMethodCall {
            private QueryCriteria criteria;

            public queryTradeDetails_call(QueryCriteria criteria,
                    AsyncMethodCallback<queryTradeDetails_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.criteria = criteria;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("queryTradeDetails", TMessageType.CALL, 0));
                queryTradeDetails_args args = new queryTradeDetails_args();
                args.setCriteria(criteria);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public QueryResult getResult() throws ServiceException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryTradeDetails();
            }
        }

        public void queryLockDetails(QueryCriteria criteria, AsyncMethodCallback<queryLockDetails_call> resultHandler)
                throws TException {
            checkReady();
            queryLockDetails_call method_call = new queryLockDetails_call(criteria, resultHandler, this,
                    protocolFactory, transport);
            manager.call(method_call);
        }

        public static class queryLockDetails_call extends TAsyncMethodCall {
            private QueryCriteria criteria;

            public queryLockDetails_call(QueryCriteria criteria,
                    AsyncMethodCallback<queryLockDetails_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.criteria = criteria;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("queryLockDetails", TMessageType.CALL, 0));
                queryLockDetails_args args = new queryLockDetails_args();
                args.setCriteria(criteria);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public QueryResult getResult() throws ServiceException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryLockDetails();
            }
        }

        public void addMoney(AddMoneyRequest request, AsyncMethodCallback<addMoney_call> resultHandler)
                throws TException {
            checkReady();
            addMoney_call method_call = new addMoney_call(request, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class addMoney_call extends TAsyncMethodCall {
            private AddMoneyRequest request;

            public addMoney_call(AddMoneyRequest request, AsyncMethodCallback<addMoney_call> resultHandler,
                    TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport)
                    throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.request = request;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("addMoney", TMessageType.CALL, 0));
                addMoney_args args = new addMoney_args();
                args.setRequest(request);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws ServiceException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addMoney();
            }
        }

        public void getAddMoneyResult(long gbuid, String product, String orderId, String sign,
                AsyncMethodCallback<getAddMoneyResult_call> resultHandler) throws TException {
            checkReady();
            getAddMoneyResult_call method_call = new getAddMoneyResult_call(gbuid, product, orderId, sign,
                    resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getAddMoneyResult_call extends TAsyncMethodCall {
            private long gbuid;
            private String product;
            private String orderId;
            private String sign;

            public getAddMoneyResult_call(long gbuid, String product, String orderId, String sign,
                    AsyncMethodCallback<getAddMoneyResult_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.gbuid = gbuid;
                this.product = product;
                this.orderId = orderId;
                this.sign = sign;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getAddMoneyResult", TMessageType.CALL, 0));
                getAddMoneyResult_args args = new getAddMoneyResult_args();
                args.setgbuid(gbuid);
                args.setProduct(product);
                args.setOrderId(orderId);
                args.setSign(sign);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getAddMoneyResult();
            }
        }

        public void queryAvailableCoupons(QueryCriteria criteria,
                AsyncMethodCallback<queryAvailableCoupons_call> resultHandler) throws TException {
            checkReady();
            queryAvailableCoupons_call method_call = new queryAvailableCoupons_call(criteria, resultHandler, this,
                    protocolFactory, transport);
            manager.call(method_call);
        }

        public static class queryAvailableCoupons_call extends TAsyncMethodCall {
            private QueryCriteria criteria;

            public queryAvailableCoupons_call(QueryCriteria criteria,
                    AsyncMethodCallback<queryAvailableCoupons_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.criteria = criteria;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("queryAvailableCoupons", TMessageType.CALL, 0));
                queryAvailableCoupons_args args = new queryAvailableCoupons_args();
                args.setCriteria(criteria);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public QueryResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryAvailableCoupons();
            }
        }

        public void generateCoupon(GenerateCouponRequest request, AsyncMethodCallback<generateCoupon_call> resultHandler)
                throws TException {
            checkReady();
            generateCoupon_call method_call = new generateCoupon_call(request, resultHandler, this, protocolFactory,
                    transport);
            manager.call(method_call);
        }

        public static class generateCoupon_call extends TAsyncMethodCall {
            private GenerateCouponRequest request;

            public generateCoupon_call(GenerateCouponRequest request,
                    AsyncMethodCallback<generateCoupon_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.request = request;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("generateCoupon", TMessageType.CALL, 0));
                generateCoupon_args args = new generateCoupon_args();
                args.setRequest(request);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_generateCoupon();
            }
        }

        public void activeCoupon(String product, long gbuid, String couponCode, String useEndTime, String sign,
                AsyncMethodCallback<activeCoupon_call> resultHandler) throws TException {
            checkReady();
            activeCoupon_call method_call = new activeCoupon_call(product, gbuid, couponCode, useEndTime, sign,
                    resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class activeCoupon_call extends TAsyncMethodCall {
            private String product;
            private long gbuid;
            private String couponCode;
            private String useEndTime;
            private String sign;

            public activeCoupon_call(String product, long gbuid, String couponCode, String useEndTime, String sign,
                    AsyncMethodCallback<activeCoupon_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.product = product;
                this.gbuid = gbuid;
                this.couponCode = couponCode;
                this.useEndTime = useEndTime;
                this.sign = sign;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("activeCoupon", TMessageType.CALL, 0));
                activeCoupon_args args = new activeCoupon_args();
                args.setProduct(product);
                args.setgbuid(gbuid);
                args.setCouponCode(couponCode);
                args.setUseEndTime(useEndTime);
                args.setSign(sign);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_activeCoupon();
            }
        }

        public void useCoupon(CouponUsage usage, AsyncMethodCallback<useCoupon_call> resultHandler) throws TException {
            checkReady();
            useCoupon_call method_call = new useCoupon_call(usage, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class useCoupon_call extends TAsyncMethodCall {
            private CouponUsage usage;

            public useCoupon_call(CouponUsage usage, AsyncMethodCallback<useCoupon_call> resultHandler,
                    TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport)
                    throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.usage = usage;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("useCoupon", TMessageType.CALL, 0));
                useCoupon_args args = new useCoupon_args();
                args.setUsage(usage);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_useCoupon();
            }
        }

        public void lockCoupon(String product, long gbuid, String couponCode, String sign,
                AsyncMethodCallback<lockCoupon_call> resultHandler) throws TException {
            checkReady();
            lockCoupon_call method_call = new lockCoupon_call(product, gbuid, couponCode, sign, resultHandler, this,
                    protocolFactory, transport);
            manager.call(method_call);
        }

        public static class lockCoupon_call extends TAsyncMethodCall {
            private String product;
            private long gbuid;
            private String couponCode;
            private String sign;

            public lockCoupon_call(String product, long gbuid, String couponCode, String sign,
                    AsyncMethodCallback<lockCoupon_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.product = product;
                this.gbuid = gbuid;
                this.couponCode = couponCode;
                this.sign = sign;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("lockCoupon", TMessageType.CALL, 0));
                lockCoupon_args args = new lockCoupon_args();
                args.setProduct(product);
                args.setgbuid(gbuid);
                args.setCouponCode(couponCode);
                args.setSign(sign);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_lockCoupon();
            }
        }

        public void unlockOrUseCoupon(CouponUsage usage, boolean beUsed,
                AsyncMethodCallback<unlockOrUseCoupon_call> resultHandler) throws TException {
            checkReady();
            unlockOrUseCoupon_call method_call = new unlockOrUseCoupon_call(usage, beUsed, resultHandler, this,
                    protocolFactory, transport);
            manager.call(method_call);
        }

        public static class unlockOrUseCoupon_call extends TAsyncMethodCall {
            private CouponUsage usage;
            private boolean beUsed;

            public unlockOrUseCoupon_call(CouponUsage usage, boolean beUsed,
                    AsyncMethodCallback<unlockOrUseCoupon_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.usage = usage;
                this.beUsed = beUsed;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("unlockOrUseCoupon", TMessageType.CALL, 0));
                unlockOrUseCoupon_args args = new unlockOrUseCoupon_args();
                args.setUsage(usage);
                args.setBeUsed(beUsed);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_unlockOrUseCoupon();
            }
        }

        public void getCouponInfo(String product, long gbuid, String couponCode,
                AsyncMethodCallback<getCouponInfo_call> resultHandler) throws TException {
            checkReady();
            getCouponInfo_call method_call = new getCouponInfo_call(product, gbuid, couponCode, resultHandler, this,
                    protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getCouponInfo_call extends TAsyncMethodCall {
            private String product;
            private long gbuid;
            private String couponCode;

            public getCouponInfo_call(String product, long gbuid, String couponCode,
                    AsyncMethodCallback<getCouponInfo_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.product = product;
                this.gbuid = gbuid;
                this.couponCode = couponCode;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getCouponInfo", TMessageType.CALL, 0));
                getCouponInfo_args args = new getCouponInfo_args();
                args.setProduct(product);
                args.setgbuid(gbuid);
                args.setCouponCode(couponCode);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCouponInfo();
            }
        }

        public void freezeCoupon(String product, String batchId, List<String> couponIdList, String sign,
                AsyncMethodCallback<freezeCoupon_call> resultHandler) throws TException {
            checkReady();
            freezeCoupon_call method_call = new freezeCoupon_call(product, batchId, couponIdList, sign, resultHandler,
                    this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class freezeCoupon_call extends TAsyncMethodCall {
            private String product;
            private String batchId;
            private List<String> couponIdList;
            private String sign;

            public freezeCoupon_call(String product, String batchId, List<String> couponIdList, String sign,
                    AsyncMethodCallback<freezeCoupon_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.product = product;
                this.batchId = batchId;
                this.couponIdList = couponIdList;
                this.sign = sign;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("freezeCoupon", TMessageType.CALL, 0));
                freezeCoupon_args args = new freezeCoupon_args();
                args.setProduct(product);
                args.setBatchId(batchId);
                args.setCouponIdList(couponIdList);
                args.setSign(sign);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_freezeCoupon();
            }
        }

        public void getPayPasswordSettings(String product, long gbuid,
                AsyncMethodCallback<getPayPasswordSettings_call> resultHandler) throws TException {
            checkReady();
            getPayPasswordSettings_call method_call = new getPayPasswordSettings_call(product, gbuid, resultHandler,
                    this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getPayPasswordSettings_call extends TAsyncMethodCall {
            private String product;
            private long gbuid;

            public getPayPasswordSettings_call(String product, long gbuid,
                    AsyncMethodCallback<getPayPasswordSettings_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.product = product;
                this.gbuid = gbuid;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getPayPasswordSettings", TMessageType.CALL, 0));
                getPayPasswordSettings_args args = new getPayPasswordSettings_args();
                args.setProduct(product);
                args.setgbuid(gbuid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPayPasswordSettings();
            }
        }

        public void verifyPassword(String product, long gbuid, String password, String sign,
                AsyncMethodCallback<verifyPassword_call> resultHandler) throws TException {
            checkReady();
            verifyPassword_call method_call = new verifyPassword_call(product, gbuid, password, sign, resultHandler,
                    this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class verifyPassword_call extends TAsyncMethodCall {
            private String product;
            private long gbuid;
            private String password;
            private String sign;

            public verifyPassword_call(String product, long gbuid, String password, String sign,
                    AsyncMethodCallback<verifyPassword_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.product = product;
                this.gbuid = gbuid;
                this.password = password;
                this.sign = sign;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("verifyPassword", TMessageType.CALL, 0));
                verifyPassword_args args = new verifyPassword_args();
                args.setProduct(product);
                args.setgbuid(gbuid);
                args.setPassword(password);
                args.setSign(sign);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_verifyPassword();
            }
        }

        public void ping(AsyncMethodCallback<ping_call> resultHandler) throws TException {
            checkReady();
            ping_call method_call = new ping_call(resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class ping_call extends TAsyncMethodCall {
            public ping_call(AsyncMethodCallback<ping_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("ping", TMessageType.CALL, 0));
                ping_args args = new ping_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_ping();
            }
        }

        public void getgbChannelBalance(GetgbChannelBalanceRequest req,
                AsyncMethodCallback<getgbChannelBalance_call> resultHandler) throws TException {
            checkReady();
            getgbChannelBalance_call method_call = new getgbChannelBalance_call(req, resultHandler, this,
                    protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getgbChannelBalance_call extends TAsyncMethodCall {
            private GetgbChannelBalanceRequest req;

            public getgbChannelBalance_call(GetgbChannelBalanceRequest req,
                    AsyncMethodCallback<getgbChannelBalance_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.req = req;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getgbChannelBalance", TMessageType.CALL, 0));
                getgbChannelBalance_args args = new getgbChannelBalance_args();
                args.setReq(req);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getgbChannelBalance();
            }
        }

        public void addgbChannelMoney(AddgbChannelMoneyRequest req,
                AsyncMethodCallback<addgbChannelMoney_call> resultHandler) throws TException {
            checkReady();
            addgbChannelMoney_call method_call = new addgbChannelMoney_call(req, resultHandler, this, protocolFactory,
                    transport);
            manager.call(method_call);
        }

        public static class addgbChannelMoney_call extends TAsyncMethodCall {
            private AddgbChannelMoneyRequest req;

            public addgbChannelMoney_call(AddgbChannelMoneyRequest req,
                    AsyncMethodCallback<addgbChannelMoney_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.req = req;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("addgbChannelMoney", TMessageType.CALL, 0));
                addgbChannelMoney_args args = new addgbChannelMoney_args();
                args.setReq(req);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addgbChannelMoney();
            }
        }

        public void pagbyChannelMoney(PagbyChannelMoneyRequest req, OriginalOrder originalOrder,
                AsyncMethodCallback<pagbyChannelMoney_call> resultHandler) throws TException {
            checkReady();
            pagbyChannelMoney_call method_call = new pagbyChannelMoney_call(req, originalOrder, resultHandler, this,
                    protocolFactory, transport);
            manager.call(method_call);
        }

        public static class pagbyChannelMoney_call extends TAsyncMethodCall {
            private PagbyChannelMoneyRequest req;
            private OriginalOrder originalOrder;

            public pagbyChannelMoney_call(PagbyChannelMoneyRequest req, OriginalOrder originalOrder,
                    AsyncMethodCallback<pagbyChannelMoney_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.req = req;
                this.originalOrder = originalOrder;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("pagbyChannelMoney", TMessageType.CALL, 0));
                pagbyChannelMoney_args args = new pagbyChannelMoney_args();
                args.setReq(req);
                args.setOriginalOrder(originalOrder);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_pagbyChannelMoney();
            }
        }

        public void reverseAddgbChannelMoney(ReversegbChannelOrderRequest req,
                AsyncMethodCallback<reverseAddgbChannelMoney_call> resultHandler) throws TException {
            checkReady();
            reverseAddgbChannelMoney_call method_call = new reverseAddgbChannelMoney_call(req, resultHandler, this,
                    protocolFactory, transport);
            manager.call(method_call);
        }

        public static class reverseAddgbChannelMoney_call extends TAsyncMethodCall {
            private ReversegbChannelOrderRequest req;

            public reverseAddgbChannelMoney_call(ReversegbChannelOrderRequest req,
                    AsyncMethodCallback<reverseAddgbChannelMoney_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.req = req;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("reverseAddgbChannelMoney", TMessageType.CALL, 0));
                reverseAddgbChannelMoney_args args = new reverseAddgbChannelMoney_args();
                args.setReq(req);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_reverseAddgbChannelMoney();
            }
        }

        public void reversePagbyChannelMoney(ReversegbChannelOrderRequest req,
                AsyncMethodCallback<reversePagbyChannelMoney_call> resultHandler) throws TException {
            checkReady();
            reversePagbyChannelMoney_call method_call = new reversePagbyChannelMoney_call(req, resultHandler, this,
                    protocolFactory, transport);
            manager.call(method_call);
        }

        public static class reversePagbyChannelMoney_call extends TAsyncMethodCall {
            private ReversegbChannelOrderRequest req;

            public reversePagbyChannelMoney_call(ReversegbChannelOrderRequest req,
                    AsyncMethodCallback<reversePagbyChannelMoney_call> resultHandler, TAsyncClient client,
                    TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.req = req;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("reversePagbyChannelMoney", TMessageType.CALL, 0));
                reversePagbyChannelMoney_args args = new reversePagbyChannelMoney_args();
                args.setReq(req);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PaymentResult getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_reversePagbyChannelMoney();
            }
        }

    }

    public static class Processor implements TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(Iface iface) {
            iface_ = iface;
            processMap_.put("getDuowanb", new getDuowanb());
            processMap_.put("payMoney", new payMoney());
            processMap_.put("payMoneyWithOriginalOrder", new payMoneyWithOriginalOrder());
            processMap_.put("payMoneyWithToken", new payMoneyWithToken());
            processMap_.put("getPayMoneyResult", new getPayMoneyResult());
            processMap_.put("addCommission", new addCommission());
            processMap_.put("getAddCommissionResult", new getAddCommissionResult());
            processMap_.put("getTotalMoney", new getTotalMoney());
            processMap_.put("lockMoney", new lockMoney());
            processMap_.put("unlockMoney", new unlockMoney());
            processMap_.put("confirmPayMoney", new confirmPayMoney());
            processMap_.put("transferBalance", new transferBalance());
            processMap_.put("reversePayMoney", new reversePayMoney());
            processMap_.put("reverseAddMoney", new reverseAddMoney());
            processMap_.put("getPaymentSettings", new getPaymentSettings());
            processMap_.put("queryTradeDetails", new queryTradeDetails());
            processMap_.put("queryLockDetails", new queryLockDetails());
            processMap_.put("addMoney", new addMoney());
            processMap_.put("getAddMoneyResult", new getAddMoneyResult());
            processMap_.put("queryAvailableCoupons", new queryAvailableCoupons());
            processMap_.put("generateCoupon", new generateCoupon());
            processMap_.put("activeCoupon", new activeCoupon());
            processMap_.put("useCoupon", new useCoupon());
            processMap_.put("lockCoupon", new lockCoupon());
            processMap_.put("unlockOrUseCoupon", new unlockOrUseCoupon());
            processMap_.put("getCouponInfo", new getCouponInfo());
            processMap_.put("freezeCoupon", new freezeCoupon());
            processMap_.put("getPayPasswordSettings", new getPayPasswordSettings());
            processMap_.put("verifyPassword", new verifyPassword());
            processMap_.put("ping", new ping());
            processMap_.put("getgbChannelBalance", new getgbChannelBalance());
            processMap_.put("addgbChannelMoney", new addgbChannelMoney());
            processMap_.put("pagbyChannelMoney", new pagbyChannelMoney());
            processMap_.put("reverseAddgbChannelMoney", new reverseAddgbChannelMoney());
            processMap_.put("reversePagbyChannelMoney", new reversePagbyChannelMoney());
        }

        protected static interface ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
        }

        private Iface iface_;
        protected final HashMap<String, ProcessFunction> processMap_ = new HashMap<String, ProcessFunction>();

        public boolean process(TProtocol iprot, TProtocol oprot) throws TException {
            TMessage msg = iprot.readMessageBegin();
            ProcessFunction fn = processMap_.get(msg.name);
            if (fn == null) {
                TProtocolUtil.skip(iprot, TType.STRUCT);
                iprot.readMessageEnd();
                TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD,
                        "Invalid method name: '" + msg.name + "'");
                oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
                x.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
                return true;
            }
            fn.process(msg.seqid, iprot, oprot);
            return true;
        }

        private class getDuowanb implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getDuowanb_args args = new getDuowanb_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getDuowanb", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getDuowanb_result result = new getDuowanb_result();
                result.success = iface_.getDuowanb(args.username, args.product, args.moneyType, args.sign);
                oprot.writeMessageBegin(new TMessage("getDuowanb", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class payMoney implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                payMoney_args args = new payMoney_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("payMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                payMoney_result result = new payMoney_result();
                try {
                    result.success = iface_.payMoney(args.request);
                } catch (ServiceException se) {
                    result.se = se;
                } catch (Throwable th) {
                    LOGGER.error("Internal error processing payMoney", th);
                    TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR,
                            "Internal error processing payMoney");
                    oprot.writeMessageBegin(new TMessage("payMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                oprot.writeMessageBegin(new TMessage("payMoney", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class payMoneyWithOriginalOrder implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                payMoneyWithOriginalOrder_args args = new payMoneyWithOriginalOrder_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("payMoneyWithOriginalOrder", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                payMoneyWithOriginalOrder_result result = new payMoneyWithOriginalOrder_result();
                try {
                    result.success = iface_.payMoneyWithOriginalOrder(args.request, args.originalOrder);
                } catch (ServiceException se) {
                    result.se = se;
                } catch (Throwable th) {
                    LOGGER.error("Internal error processing payMoneyWithOriginalOrder", th);
                    TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR,
                            "Internal error processing payMoneyWithOriginalOrder");
                    oprot.writeMessageBegin(new TMessage("payMoneyWithOriginalOrder", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                oprot.writeMessageBegin(new TMessage("payMoneyWithOriginalOrder", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class payMoneyWithToken implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                payMoneyWithToken_args args = new payMoneyWithToken_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("payMoneyWithToken", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                payMoneyWithToken_result result = new payMoneyWithToken_result();
                try {
                    result.success = iface_.payMoneyWithToken(args.request, args.originalOrder, args.token);
                } catch (ServiceException se) {
                    result.se = se;
                } catch (Throwable th) {
                    LOGGER.error("Internal error processing payMoneyWithToken", th);
                    TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR,
                            "Internal error processing payMoneyWithToken");
                    oprot.writeMessageBegin(new TMessage("payMoneyWithToken", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                oprot.writeMessageBegin(new TMessage("payMoneyWithToken", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class getPayMoneyResult implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getPayMoneyResult_args args = new getPayMoneyResult_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getPayMoneyResult", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getPayMoneyResult_result result = new getPayMoneyResult_result();
                result.success = iface_.getPayMoneyResult(args.username, args.product, args.orderId, args.sign);
                oprot.writeMessageBegin(new TMessage("getPayMoneyResult", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class addCommission implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                addCommission_args args = new addCommission_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("addCommission", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                addCommission_result result = new addCommission_result();
                try {
                    result.success = iface_.addCommission(args.request);
                } catch (ServiceException se) {
                    result.se = se;
                } catch (Throwable th) {
                    LOGGER.error("Internal error processing addCommission", th);
                    TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR,
                            "Internal error processing addCommission");
                    oprot.writeMessageBegin(new TMessage("addCommission", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                oprot.writeMessageBegin(new TMessage("addCommission", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class getAddCommissionResult implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getAddCommissionResult_args args = new getAddCommissionResult_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getAddCommissionResult", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getAddCommissionResult_result result = new getAddCommissionResult_result();
                result.success = iface_.getAddCommissionResult(args.username, args.product, args.orderId, args.sign);
                oprot.writeMessageBegin(new TMessage("getAddCommissionResult", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class getTotalMoney implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getTotalMoney_args args = new getTotalMoney_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getTotalMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getTotalMoney_result result = new getTotalMoney_result();
                result.success = iface_.getTotalMoney(args.username, args.product, args.moneyType, args.sign);
                oprot.writeMessageBegin(new TMessage("getTotalMoney", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class lockMoney implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                lockMoney_args args = new lockMoney_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("lockMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                lockMoney_result result = new lockMoney_result();
                try {
                    result.success = iface_.lockMoney(args.request);
                } catch (ServiceException se) {
                    result.se = se;
                } catch (Throwable th) {
                    LOGGER.error("Internal error processing lockMoney", th);
                    TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR,
                            "Internal error processing lockMoney");
                    oprot.writeMessageBegin(new TMessage("lockMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                oprot.writeMessageBegin(new TMessage("lockMoney", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class unlockMoney implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                unlockMoney_args args = new unlockMoney_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("unlockMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                unlockMoney_result result = new unlockMoney_result();
                try {
                    result.success = iface_.unlockMoney(args.request);
                } catch (ServiceException se) {
                    result.se = se;
                } catch (Throwable th) {
                    LOGGER.error("Internal error processing unlockMoney", th);
                    TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR,
                            "Internal error processing unlockMoney");
                    oprot.writeMessageBegin(new TMessage("unlockMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                oprot.writeMessageBegin(new TMessage("unlockMoney", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class confirmPayMoney implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                confirmPayMoney_args args = new confirmPayMoney_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("confirmPayMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                confirmPayMoney_result result = new confirmPayMoney_result();
                result.success = iface_.confirmPayMoney(args.passport, args.product, args.orderId, args.confirm,
                        args.authorizationType, args.deductSettings, args.sign);
                oprot.writeMessageBegin(new TMessage("confirmPayMoney", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class transferBalance implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                transferBalance_args args = new transferBalance_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("transferBalance", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                transferBalance_result result = new transferBalance_result();
                try {
                    result.success = iface_.transferBalance(args.request);
                } catch (ServiceException se) {
                    result.se = se;
                } catch (Throwable th) {
                    LOGGER.error("Internal error processing transferBalance", th);
                    TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR,
                            "Internal error processing transferBalance");
                    oprot.writeMessageBegin(new TMessage("transferBalance", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                oprot.writeMessageBegin(new TMessage("transferBalance", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class reversePayMoney implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                reversePayMoney_args args = new reversePayMoney_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("reversePayMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                reversePayMoney_result result = new reversePayMoney_result();
                try {
                    result.success = iface_.reversePayMoney(args.request);
                } catch (ServiceException se) {
                    result.se = se;
                } catch (Throwable th) {
                    LOGGER.error("Internal error processing reversePayMoney", th);
                    TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR,
                            "Internal error processing reversePayMoney");
                    oprot.writeMessageBegin(new TMessage("reversePayMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                oprot.writeMessageBegin(new TMessage("reversePayMoney", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class reverseAddMoney implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                reverseAddMoney_args args = new reverseAddMoney_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("reverseAddMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                reverseAddMoney_result result = new reverseAddMoney_result();
                try {
                    result.success = iface_.reverseAddMoney(args.request);
                } catch (ServiceException se) {
                    result.se = se;
                } catch (Throwable th) {
                    LOGGER.error("Internal error processing reverseAddMoney", th);
                    TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR,
                            "Internal error processing reverseAddMoney");
                    oprot.writeMessageBegin(new TMessage("reverseAddMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                oprot.writeMessageBegin(new TMessage("reverseAddMoney", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class getPaymentSettings implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getPaymentSettings_args args = new getPaymentSettings_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getPaymentSettings", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getPaymentSettings_result result = new getPaymentSettings_result();
                result.success = iface_.getPaymentSettings(args.username, args.product, args.sign);
                oprot.writeMessageBegin(new TMessage("getPaymentSettings", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class queryTradeDetails implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                queryTradeDetails_args args = new queryTradeDetails_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("queryTradeDetails", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                queryTradeDetails_result result = new queryTradeDetails_result();
                try {
                    result.success = iface_.queryTradeDetails(args.criteria);
                } catch (ServiceException se) {
                    result.se = se;
                } catch (Throwable th) {
                    LOGGER.error("Internal error processing queryTradeDetails", th);
                    TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR,
                            "Internal error processing queryTradeDetails");
                    oprot.writeMessageBegin(new TMessage("queryTradeDetails", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                oprot.writeMessageBegin(new TMessage("queryTradeDetails", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class queryLockDetails implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                queryLockDetails_args args = new queryLockDetails_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("queryLockDetails", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                queryLockDetails_result result = new queryLockDetails_result();
                try {
                    result.success = iface_.queryLockDetails(args.criteria);
                } catch (ServiceException se) {
                    result.se = se;
                } catch (Throwable th) {
                    LOGGER.error("Internal error processing queryLockDetails", th);
                    TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR,
                            "Internal error processing queryLockDetails");
                    oprot.writeMessageBegin(new TMessage("queryLockDetails", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                oprot.writeMessageBegin(new TMessage("queryLockDetails", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class addMoney implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                addMoney_args args = new addMoney_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("addMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                addMoney_result result = new addMoney_result();
                try {
                    result.success = iface_.addMoney(args.request);
                } catch (ServiceException se) {
                    result.se = se;
                } catch (Throwable th) {
                    LOGGER.error("Internal error processing addMoney", th);
                    TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR,
                            "Internal error processing addMoney");
                    oprot.writeMessageBegin(new TMessage("addMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                oprot.writeMessageBegin(new TMessage("addMoney", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class getAddMoneyResult implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getAddMoneyResult_args args = new getAddMoneyResult_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getAddMoneyResult", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getAddMoneyResult_result result = new getAddMoneyResult_result();
                result.success = iface_.getAddMoneyResult(args.gbuid, args.product, args.orderId, args.sign);
                oprot.writeMessageBegin(new TMessage("getAddMoneyResult", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class queryAvailableCoupons implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                queryAvailableCoupons_args args = new queryAvailableCoupons_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("queryAvailableCoupons", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                queryAvailableCoupons_result result = new queryAvailableCoupons_result();
                result.success = iface_.queryAvailableCoupons(args.criteria);
                oprot.writeMessageBegin(new TMessage("queryAvailableCoupons", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class generateCoupon implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                generateCoupon_args args = new generateCoupon_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("generateCoupon", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                generateCoupon_result result = new generateCoupon_result();
                result.success = iface_.generateCoupon(args.request);
                oprot.writeMessageBegin(new TMessage("generateCoupon", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class activeCoupon implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                activeCoupon_args args = new activeCoupon_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("activeCoupon", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                activeCoupon_result result = new activeCoupon_result();
                result.success = iface_.activeCoupon(args.product, args.gbuid, args.couponCode, args.useEndTime,
                        args.sign);
                oprot.writeMessageBegin(new TMessage("activeCoupon", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class useCoupon implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                useCoupon_args args = new useCoupon_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("useCoupon", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                useCoupon_result result = new useCoupon_result();
                result.success = iface_.useCoupon(args.usage);
                oprot.writeMessageBegin(new TMessage("useCoupon", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class lockCoupon implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                lockCoupon_args args = new lockCoupon_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("lockCoupon", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                lockCoupon_result result = new lockCoupon_result();
                result.success = iface_.lockCoupon(args.product, args.gbuid, args.couponCode, args.sign);
                oprot.writeMessageBegin(new TMessage("lockCoupon", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class unlockOrUseCoupon implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                unlockOrUseCoupon_args args = new unlockOrUseCoupon_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("unlockOrUseCoupon", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                unlockOrUseCoupon_result result = new unlockOrUseCoupon_result();
                result.success = iface_.unlockOrUseCoupon(args.usage, args.beUsed);
                oprot.writeMessageBegin(new TMessage("unlockOrUseCoupon", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class getCouponInfo implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getCouponInfo_args args = new getCouponInfo_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getCouponInfo", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getCouponInfo_result result = new getCouponInfo_result();
                result.success = iface_.getCouponInfo(args.product, args.gbuid, args.couponCode);
                oprot.writeMessageBegin(new TMessage("getCouponInfo", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class freezeCoupon implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                freezeCoupon_args args = new freezeCoupon_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("freezeCoupon", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                freezeCoupon_result result = new freezeCoupon_result();
                result.success = iface_.freezeCoupon(args.product, args.batchId, args.couponIdList, args.sign);
                oprot.writeMessageBegin(new TMessage("freezeCoupon", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class getPayPasswordSettings implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getPayPasswordSettings_args args = new getPayPasswordSettings_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getPayPasswordSettings", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getPayPasswordSettings_result result = new getPayPasswordSettings_result();
                result.success = iface_.getPayPasswordSettings(args.product, args.gbuid);
                oprot.writeMessageBegin(new TMessage("getPayPasswordSettings", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class verifyPassword implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                verifyPassword_args args = new verifyPassword_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("verifyPassword", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                verifyPassword_result result = new verifyPassword_result();
                result.success = iface_.verifyPassword(args.product, args.gbuid, args.password, args.sign);
                oprot.writeMessageBegin(new TMessage("verifyPassword", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class ping implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                ping_args args = new ping_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("ping", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                ping_result result = new ping_result();
                iface_.ping();
                oprot.writeMessageBegin(new TMessage("ping", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class getgbChannelBalance implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getgbChannelBalance_args args = new getgbChannelBalance_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getgbChannelBalance", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getgbChannelBalance_result result = new getgbChannelBalance_result();
                result.success = iface_.getgbChannelBalance(args.req);
                oprot.writeMessageBegin(new TMessage("getgbChannelBalance", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class addgbChannelMoney implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                addgbChannelMoney_args args = new addgbChannelMoney_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("addgbChannelMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                addgbChannelMoney_result result = new addgbChannelMoney_result();
                result.success = iface_.addgbChannelMoney(args.req);
                oprot.writeMessageBegin(new TMessage("addgbChannelMoney", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class pagbyChannelMoney implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                pagbyChannelMoney_args args = new pagbyChannelMoney_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("pagbyChannelMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                pagbyChannelMoney_result result = new pagbyChannelMoney_result();
                result.success = iface_.pagbyChannelMoney(args.req, args.originalOrder);
                oprot.writeMessageBegin(new TMessage("pagbyChannelMoney", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class reverseAddgbChannelMoney implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                reverseAddgbChannelMoney_args args = new reverseAddgbChannelMoney_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("reverseAddgbChannelMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                reverseAddgbChannelMoney_result result = new reverseAddgbChannelMoney_result();
                result.success = iface_.reverseAddgbChannelMoney(args.req);
                oprot.writeMessageBegin(new TMessage("reverseAddgbChannelMoney", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class reversePagbyChannelMoney implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                reversePagbyChannelMoney_args args = new reversePagbyChannelMoney_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR,
                            e.getMessage());
                    oprot.writeMessageBegin(new TMessage("reversePagbyChannelMoney", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                reversePagbyChannelMoney_result result = new reversePagbyChannelMoney_result();
                result.success = iface_.reversePagbyChannelMoney(args.req);
                oprot.writeMessageBegin(new TMessage("reversePagbyChannelMoney", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

    }

    public static class getDuowanb_args implements TBase<getDuowanb_args, getDuowanb_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getDuowanb_args");

        private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short) 1);
        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 2);
        private static final TField MONEY_TYPE_FIELD_DESC = new TField("moneyType", TType.I32, (short) 3);
        private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 4);

        public String username;
        public String product;
        public int moneyType;
        public String sign;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            USERNAME((short) 1, "username"), PRODUCT((short) 2, "product"), MONEY_TYPE((short) 3, "moneyType"), SIGN(
                    (short) 4, "sign");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // USERNAME
                    return USERNAME;
                case 2: // PRODUCT
                    return PRODUCT;
                case 3: // MONEY_TYPE
                    return MONEY_TYPE;
                case 4: // SIGN
                    return SIGN;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __MONEYTYPE_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.MONEY_TYPE, new FieldMetaData("moneyType", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.I32)));
            tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                    TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getDuowanb_args.class, metaDataMap);
        }

        public getDuowanb_args() {
        }

        public getDuowanb_args(String username, String product, int moneyType, String sign) {
            this();
            this.username = username;
            this.product = product;
            this.moneyType = moneyType;
            setMoneyTypeIsSet(true);
            this.sign = sign;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDuowanb_args(getDuowanb_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetUsername()) {
                this.username = other.username;
            }
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            this.moneyType = other.moneyType;
            if (other.isSetSign()) {
                this.sign = other.sign;
            }
        }

        public getDuowanb_args deepCopy() {
            return new getDuowanb_args(this);
        }

        @Override
        public void clear() {
            this.username = null;
            this.product = null;
            setMoneyTypeIsSet(false);
            this.moneyType = 0;
            this.sign = null;
        }

        public String getUsername() {
            return this.username;
        }

        public getDuowanb_args setUsername(String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        /**
         * Returns true if field username is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        public String getProduct() {
            return this.product;
        }

        public getDuowanb_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public int getMoneyType() {
            return this.moneyType;
        }

        public getDuowanb_args setMoneyType(int moneyType) {
            this.moneyType = moneyType;
            setMoneyTypeIsSet(true);
            return this;
        }

        public void unsetMoneyType() {
            __isset_bit_vector.clear(__MONEYTYPE_ISSET_ID);
        }

        /**
         * Returns true if field moneyType is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetMoneyType() {
            return __isset_bit_vector.get(__MONEYTYPE_ISSET_ID);
        }

        public void setMoneyTypeIsSet(boolean value) {
            __isset_bit_vector.set(__MONEYTYPE_ISSET_ID, value);
        }

        public String getSign() {
            return this.sign;
        }

        public getDuowanb_args setSign(String sign) {
            this.sign = sign;
            return this;
        }

        public void unsetSign() {
            this.sign = null;
        }

        /**
         * Returns true if field sign is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSign() {
            return this.sign != null;
        }

        public void setSignIsSet(boolean value) {
            if (!value) {
                this.sign = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case USERNAME:
                if (value == null) {
                    unsetUsername();
                } else {
                    setUsername((String) value);
                }
                break;

            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case MONEY_TYPE:
                if (value == null) {
                    unsetMoneyType();
                } else {
                    setMoneyType((Integer) value);
                }
                break;

            case SIGN:
                if (value == null) {
                    unsetSign();
                } else {
                    setSign((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case USERNAME:
                return getUsername();

            case PRODUCT:
                return getProduct();

            case MONEY_TYPE:
                return new Integer(getMoneyType());

            case SIGN:
                return getSign();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case USERNAME:
                return isSetUsername();
            case PRODUCT:
                return isSetProduct();
            case MONEY_TYPE:
                return isSetMoneyType();
            case SIGN:
                return isSetSign();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getDuowanb_args)
                return this.equals((getDuowanb_args) that);
            return false;
        }

        public boolean equals(getDuowanb_args that) {
            if (that == null)
                return false;

            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_moneyType = true;
            boolean that_present_moneyType = true;
            if (this_present_moneyType || that_present_moneyType) {
                if (!(this_present_moneyType && that_present_moneyType))
                    return false;
                if (this.moneyType != that.moneyType)
                    return false;
            }

            boolean this_present_sign = true && this.isSetSign();
            boolean that_present_sign = true && that.isSetSign();
            if (this_present_sign || that_present_sign) {
                if (!(this_present_sign && that_present_sign))
                    return false;
                if (!this.sign.equals(that.sign))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getDuowanb_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getDuowanb_args typedOther = (getDuowanb_args) other;

            lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMoneyType()).compareTo(typedOther.isSetMoneyType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMoneyType()) {
                lastComparison = TBaseHelper.compareTo(this.moneyType, typedOther.moneyType);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSign()) {
                lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // USERNAME
                    if (field.type == TType.STRING) {
                        this.username = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // MONEY_TYPE
                    if (field.type == TType.I32) {
                        this.moneyType = iprot.readI32();
                        setMoneyTypeIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // SIGN
                    if (field.type == TType.STRING) {
                        this.sign = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            if (!isSetMoneyType()) {
                throw new TProtocolException("Required field 'moneyType' was not found in serialized data! Struct: "
                        + toString());
            }
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.username != null) {
                oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                oprot.writeString(this.username);
                oprot.writeFieldEnd();
            }
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(MONEY_TYPE_FIELD_DESC);
            oprot.writeI32(this.moneyType);
            oprot.writeFieldEnd();
            if (this.sign != null) {
                oprot.writeFieldBegin(SIGN_FIELD_DESC);
                oprot.writeString(this.sign);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getDuowanb_args(");
            boolean first = true;

            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("moneyType:");
            sb.append(this.moneyType);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sign:");
            if (this.sign == null) {
                sb.append("null");
            } else {
                sb.append(this.sign);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            if (username == null) {
                throw new TProtocolException("Required field 'username' was not present! Struct: " + toString());
            }
            if (product == null) {
                throw new TProtocolException("Required field 'product' was not present! Struct: " + toString());
            }
            // alas, we cannot check 'moneyType' because it's a primitive and
            // you chose the non-beans generator.
            if (sign == null) {
                throw new TProtocolException("Required field 'sign' was not present! Struct: " + toString());
            }
        }

    }

    public static class getDuowanb_result implements TBase<getDuowanb_result, getDuowanb_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getDuowanb_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getDuowanb_result.class, metaDataMap);
        }

        public getDuowanb_result() {
        }

        public getDuowanb_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDuowanb_result(getDuowanb_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public getDuowanb_result deepCopy() {
            return new getDuowanb_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public getDuowanb_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getDuowanb_result)
                return this.equals((getDuowanb_result) that);
            return false;
        }

        public boolean equals(getDuowanb_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getDuowanb_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getDuowanb_result typedOther = (getDuowanb_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getDuowanb_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class payMoney_args implements TBase<payMoney_args, payMoney_args._Fields>, java.io.Serializable,
            Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("payMoney_args");

        private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short) 1);

        public PayMoneyRequest request;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQUEST((short) 1, "request");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQUEST
                    return REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.REQUIRED,
                    new StructMetaData(TType.STRUCT, PayMoneyRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(payMoney_args.class, metaDataMap);
        }

        public payMoney_args() {
        }

        public payMoney_args(PayMoneyRequest request) {
            this();
            this.request = request;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public payMoney_args(payMoney_args other) {
            if (other.isSetRequest()) {
                this.request = new PayMoneyRequest(other.request);
            }
        }

        public payMoney_args deepCopy() {
            return new payMoney_args(this);
        }

        @Override
        public void clear() {
            this.request = null;
        }

        public PayMoneyRequest getRequest() {
            return this.request;
        }

        public payMoney_args setRequest(PayMoneyRequest request) {
            this.request = request;
            return this;
        }

        public void unsetRequest() {
            this.request = null;
        }

        /**
         * Returns true if field request is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetRequest() {
            return this.request != null;
        }

        public void setRequestIsSet(boolean value) {
            if (!value) {
                this.request = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQUEST:
                if (value == null) {
                    unsetRequest();
                } else {
                    setRequest((PayMoneyRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQUEST:
                return getRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQUEST:
                return isSetRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof payMoney_args)
                return this.equals((payMoney_args) that);
            return false;
        }

        public boolean equals(payMoney_args that) {
            if (that == null)
                return false;

            boolean this_present_request = true && this.isSetRequest();
            boolean that_present_request = true && that.isSetRequest();
            if (this_present_request || that_present_request) {
                if (!(this_present_request && that_present_request))
                    return false;
                if (!this.request.equals(that.request))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(payMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            payMoney_args typedOther = (payMoney_args) other;

            lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRequest()) {
                lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQUEST
                    if (field.type == TType.STRUCT) {
                        this.request = new PayMoneyRequest();
                        this.request.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.request != null) {
                oprot.writeFieldBegin(REQUEST_FIELD_DESC);
                this.request.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("payMoney_args(");
            boolean first = true;

            sb.append("request:");
            if (this.request == null) {
                sb.append("null");
            } else {
                sb.append(this.request);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            if (request == null) {
                throw new TProtocolException("Required field 'request' was not present! Struct: " + toString());
            }
        }

    }

    public static class payMoney_result implements TBase<payMoney_result, payMoney_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("payMoney_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField SE_FIELD_DESC = new TField("se", TType.STRUCT, (short) 1);

        public PaymentResult success;
        public ServiceException se;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"), SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // SE
                    return SE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            tmpMap.put(_Fields.SE, new FieldMetaData("se", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(payMoney_result.class, metaDataMap);
        }

        public payMoney_result() {
        }

        public payMoney_result(PaymentResult success, ServiceException se) {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public payMoney_result(payMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
            if (other.isSetSe()) {
                this.se = new ServiceException(other.se);
            }
        }

        public payMoney_result deepCopy() {
            return new payMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.se = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public payMoney_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceException getSe() {
            return this.se;
        }

        public payMoney_result setSe(ServiceException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /**
         * Returns true if field se is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            case SE:
                if (value == null) {
                    unsetSe();
                } else {
                    setSe((ServiceException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case SE:
                return getSe();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case SE:
                return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof payMoney_result)
                return this.equals((payMoney_result) that);
            return false;
        }

        public boolean equals(payMoney_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(payMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            payMoney_result typedOther = (payMoney_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 1: // SE
                    if (field.type == TType.STRUCT) {
                        this.se = new ServiceException();
                        this.se.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            } else if (this.isSetSe()) {
                oprot.writeFieldBegin(SE_FIELD_DESC);
                this.se.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("payMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class payMoneyWithOriginalOrder_args implements
            TBase<payMoneyWithOriginalOrder_args, payMoneyWithOriginalOrder_args._Fields>, java.io.Serializable,
            Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("payMoneyWithOriginalOrder_args");

        private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short) 1);
        private static final TField ORIGINAL_ORDER_FIELD_DESC = new TField("originalOrder", TType.STRUCT, (short) 2);

        public PayMoneyRequest2 request;
        public OriginalOrder originalOrder;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQUEST((short) 1, "request"), ORIGINAL_ORDER((short) 2, "originalOrder");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQUEST
                    return REQUEST;
                case 2: // ORIGINAL_ORDER
                    return ORIGINAL_ORDER;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PayMoneyRequest2.class)));
            tmpMap.put(_Fields.ORIGINAL_ORDER, new FieldMetaData("originalOrder", TFieldRequirementType.DEFAULT,
                    new StructMetaData(TType.STRUCT, OriginalOrder.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(payMoneyWithOriginalOrder_args.class, metaDataMap);
        }

        public payMoneyWithOriginalOrder_args() {
        }

        public payMoneyWithOriginalOrder_args(PayMoneyRequest2 request, OriginalOrder originalOrder) {
            this();
            this.request = request;
            this.originalOrder = originalOrder;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public payMoneyWithOriginalOrder_args(payMoneyWithOriginalOrder_args other) {
            if (other.isSetRequest()) {
                this.request = new PayMoneyRequest2(other.request);
            }
            if (other.isSetOriginalOrder()) {
                this.originalOrder = new OriginalOrder(other.originalOrder);
            }
        }

        public payMoneyWithOriginalOrder_args deepCopy() {
            return new payMoneyWithOriginalOrder_args(this);
        }

        @Override
        public void clear() {
            this.request = null;
            this.originalOrder = null;
        }

        public PayMoneyRequest2 getRequest() {
            return this.request;
        }

        public payMoneyWithOriginalOrder_args setRequest(PayMoneyRequest2 request) {
            this.request = request;
            return this;
        }

        public void unsetRequest() {
            this.request = null;
        }

        /**
         * Returns true if field request is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetRequest() {
            return this.request != null;
        }

        public void setRequestIsSet(boolean value) {
            if (!value) {
                this.request = null;
            }
        }

        public OriginalOrder getOriginalOrder() {
            return this.originalOrder;
        }

        public payMoneyWithOriginalOrder_args setOriginalOrder(OriginalOrder originalOrder) {
            this.originalOrder = originalOrder;
            return this;
        }

        public void unsetOriginalOrder() {
            this.originalOrder = null;
        }

        /**
         * Returns true if field originalOrder is set (has been asigned a value)
         * and false otherwise
         */
        public boolean isSetOriginalOrder() {
            return this.originalOrder != null;
        }

        public void setOriginalOrderIsSet(boolean value) {
            if (!value) {
                this.originalOrder = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQUEST:
                if (value == null) {
                    unsetRequest();
                } else {
                    setRequest((PayMoneyRequest2) value);
                }
                break;

            case ORIGINAL_ORDER:
                if (value == null) {
                    unsetOriginalOrder();
                } else {
                    setOriginalOrder((OriginalOrder) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQUEST:
                return getRequest();

            case ORIGINAL_ORDER:
                return getOriginalOrder();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQUEST:
                return isSetRequest();
            case ORIGINAL_ORDER:
                return isSetOriginalOrder();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof payMoneyWithOriginalOrder_args)
                return this.equals((payMoneyWithOriginalOrder_args) that);
            return false;
        }

        public boolean equals(payMoneyWithOriginalOrder_args that) {
            if (that == null)
                return false;

            boolean this_present_request = true && this.isSetRequest();
            boolean that_present_request = true && that.isSetRequest();
            if (this_present_request || that_present_request) {
                if (!(this_present_request && that_present_request))
                    return false;
                if (!this.request.equals(that.request))
                    return false;
            }

            boolean this_present_originalOrder = true && this.isSetOriginalOrder();
            boolean that_present_originalOrder = true && that.isSetOriginalOrder();
            if (this_present_originalOrder || that_present_originalOrder) {
                if (!(this_present_originalOrder && that_present_originalOrder))
                    return false;
                if (!this.originalOrder.equals(that.originalOrder))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(payMoneyWithOriginalOrder_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            payMoneyWithOriginalOrder_args typedOther = (payMoneyWithOriginalOrder_args) other;

            lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRequest()) {
                lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOriginalOrder()).compareTo(typedOther.isSetOriginalOrder());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOriginalOrder()) {
                lastComparison = TBaseHelper.compareTo(this.originalOrder, typedOther.originalOrder);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQUEST
                    if (field.type == TType.STRUCT) {
                        this.request = new PayMoneyRequest2();
                        this.request.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // ORIGINAL_ORDER
                    if (field.type == TType.STRUCT) {
                        this.originalOrder = new OriginalOrder();
                        this.originalOrder.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.request != null) {
                oprot.writeFieldBegin(REQUEST_FIELD_DESC);
                this.request.write(oprot);
                oprot.writeFieldEnd();
            }
            if (this.originalOrder != null) {
                oprot.writeFieldBegin(ORIGINAL_ORDER_FIELD_DESC);
                this.originalOrder.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("payMoneyWithOriginalOrder_args(");
            boolean first = true;

            sb.append("request:");
            if (this.request == null) {
                sb.append("null");
            } else {
                sb.append(this.request);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("originalOrder:");
            if (this.originalOrder == null) {
                sb.append("null");
            } else {
                sb.append(this.originalOrder);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class payMoneyWithOriginalOrder_result implements
            TBase<payMoneyWithOriginalOrder_result, payMoneyWithOriginalOrder_result._Fields>, java.io.Serializable,
            Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("payMoneyWithOriginalOrder_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField SE_FIELD_DESC = new TField("se", TType.STRUCT, (short) 1);

        public PaymentResult success;
        public ServiceException se;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"), SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // SE
                    return SE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            tmpMap.put(_Fields.SE, new FieldMetaData("se", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(payMoneyWithOriginalOrder_result.class, metaDataMap);
        }

        public payMoneyWithOriginalOrder_result() {
        }

        public payMoneyWithOriginalOrder_result(PaymentResult success, ServiceException se) {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public payMoneyWithOriginalOrder_result(payMoneyWithOriginalOrder_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
            if (other.isSetSe()) {
                this.se = new ServiceException(other.se);
            }
        }

        public payMoneyWithOriginalOrder_result deepCopy() {
            return new payMoneyWithOriginalOrder_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.se = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public payMoneyWithOriginalOrder_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceException getSe() {
            return this.se;
        }

        public payMoneyWithOriginalOrder_result setSe(ServiceException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /**
         * Returns true if field se is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            case SE:
                if (value == null) {
                    unsetSe();
                } else {
                    setSe((ServiceException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case SE:
                return getSe();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case SE:
                return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof payMoneyWithOriginalOrder_result)
                return this.equals((payMoneyWithOriginalOrder_result) that);
            return false;
        }

        public boolean equals(payMoneyWithOriginalOrder_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(payMoneyWithOriginalOrder_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            payMoneyWithOriginalOrder_result typedOther = (payMoneyWithOriginalOrder_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 1: // SE
                    if (field.type == TType.STRUCT) {
                        this.se = new ServiceException();
                        this.se.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            } else if (this.isSetSe()) {
                oprot.writeFieldBegin(SE_FIELD_DESC);
                this.se.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("payMoneyWithOriginalOrder_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class payMoneyWithToken_args implements
            TBase<payMoneyWithToken_args, payMoneyWithToken_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("payMoneyWithToken_args");

        private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short) 1);
        private static final TField ORIGINAL_ORDER_FIELD_DESC = new TField("originalOrder", TType.STRUCT, (short) 2);
        private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRUCT, (short) 3);

        public PayMoneyRequest2 request;
        public OriginalOrder originalOrder;
        public PayMoneyToken token;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQUEST((short) 1, "request"), ORIGINAL_ORDER((short) 2, "originalOrder"), TOKEN((short) 3, "token");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQUEST
                    return REQUEST;
                case 2: // ORIGINAL_ORDER
                    return ORIGINAL_ORDER;
                case 3: // TOKEN
                    return TOKEN;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PayMoneyRequest2.class)));
            tmpMap.put(_Fields.ORIGINAL_ORDER, new FieldMetaData("originalOrder", TFieldRequirementType.DEFAULT,
                    new StructMetaData(TType.STRUCT, OriginalOrder.class)));
            tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PayMoneyToken.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(payMoneyWithToken_args.class, metaDataMap);
        }

        public payMoneyWithToken_args() {
        }

        public payMoneyWithToken_args(PayMoneyRequest2 request, OriginalOrder originalOrder, PayMoneyToken token) {
            this();
            this.request = request;
            this.originalOrder = originalOrder;
            this.token = token;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public payMoneyWithToken_args(payMoneyWithToken_args other) {
            if (other.isSetRequest()) {
                this.request = new PayMoneyRequest2(other.request);
            }
            if (other.isSetOriginalOrder()) {
                this.originalOrder = new OriginalOrder(other.originalOrder);
            }
            if (other.isSetToken()) {
                this.token = new PayMoneyToken(other.token);
            }
        }

        public payMoneyWithToken_args deepCopy() {
            return new payMoneyWithToken_args(this);
        }

        @Override
        public void clear() {
            this.request = null;
            this.originalOrder = null;
            this.token = null;
        }

        public PayMoneyRequest2 getRequest() {
            return this.request;
        }

        public payMoneyWithToken_args setRequest(PayMoneyRequest2 request) {
            this.request = request;
            return this;
        }

        public void unsetRequest() {
            this.request = null;
        }

        /**
         * Returns true if field request is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetRequest() {
            return this.request != null;
        }

        public void setRequestIsSet(boolean value) {
            if (!value) {
                this.request = null;
            }
        }

        public OriginalOrder getOriginalOrder() {
            return this.originalOrder;
        }

        public payMoneyWithToken_args setOriginalOrder(OriginalOrder originalOrder) {
            this.originalOrder = originalOrder;
            return this;
        }

        public void unsetOriginalOrder() {
            this.originalOrder = null;
        }

        /**
         * Returns true if field originalOrder is set (has been asigned a value)
         * and false otherwise
         */
        public boolean isSetOriginalOrder() {
            return this.originalOrder != null;
        }

        public void setOriginalOrderIsSet(boolean value) {
            if (!value) {
                this.originalOrder = null;
            }
        }

        public PayMoneyToken getToken() {
            return this.token;
        }

        public payMoneyWithToken_args setToken(PayMoneyToken token) {
            this.token = token;
            return this;
        }

        public void unsetToken() {
            this.token = null;
        }

        /**
         * Returns true if field token is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetToken() {
            return this.token != null;
        }

        public void setTokenIsSet(boolean value) {
            if (!value) {
                this.token = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQUEST:
                if (value == null) {
                    unsetRequest();
                } else {
                    setRequest((PayMoneyRequest2) value);
                }
                break;

            case ORIGINAL_ORDER:
                if (value == null) {
                    unsetOriginalOrder();
                } else {
                    setOriginalOrder((OriginalOrder) value);
                }
                break;

            case TOKEN:
                if (value == null) {
                    unsetToken();
                } else {
                    setToken((PayMoneyToken) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQUEST:
                return getRequest();

            case ORIGINAL_ORDER:
                return getOriginalOrder();

            case TOKEN:
                return getToken();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQUEST:
                return isSetRequest();
            case ORIGINAL_ORDER:
                return isSetOriginalOrder();
            case TOKEN:
                return isSetToken();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof payMoneyWithToken_args)
                return this.equals((payMoneyWithToken_args) that);
            return false;
        }

        public boolean equals(payMoneyWithToken_args that) {
            if (that == null)
                return false;

            boolean this_present_request = true && this.isSetRequest();
            boolean that_present_request = true && that.isSetRequest();
            if (this_present_request || that_present_request) {
                if (!(this_present_request && that_present_request))
                    return false;
                if (!this.request.equals(that.request))
                    return false;
            }

            boolean this_present_originalOrder = true && this.isSetOriginalOrder();
            boolean that_present_originalOrder = true && that.isSetOriginalOrder();
            if (this_present_originalOrder || that_present_originalOrder) {
                if (!(this_present_originalOrder && that_present_originalOrder))
                    return false;
                if (!this.originalOrder.equals(that.originalOrder))
                    return false;
            }

            boolean this_present_token = true && this.isSetToken();
            boolean that_present_token = true && that.isSetToken();
            if (this_present_token || that_present_token) {
                if (!(this_present_token && that_present_token))
                    return false;
                if (!this.token.equals(that.token))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(payMoneyWithToken_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            payMoneyWithToken_args typedOther = (payMoneyWithToken_args) other;

            lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRequest()) {
                lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOriginalOrder()).compareTo(typedOther.isSetOriginalOrder());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOriginalOrder()) {
                lastComparison = TBaseHelper.compareTo(this.originalOrder, typedOther.originalOrder);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetToken()) {
                lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQUEST
                    if (field.type == TType.STRUCT) {
                        this.request = new PayMoneyRequest2();
                        this.request.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // ORIGINAL_ORDER
                    if (field.type == TType.STRUCT) {
                        this.originalOrder = new OriginalOrder();
                        this.originalOrder.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // TOKEN
                    if (field.type == TType.STRUCT) {
                        this.token = new PayMoneyToken();
                        this.token.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.request != null) {
                oprot.writeFieldBegin(REQUEST_FIELD_DESC);
                this.request.write(oprot);
                oprot.writeFieldEnd();
            }
            if (this.originalOrder != null) {
                oprot.writeFieldBegin(ORIGINAL_ORDER_FIELD_DESC);
                this.originalOrder.write(oprot);
                oprot.writeFieldEnd();
            }
            if (this.token != null) {
                oprot.writeFieldBegin(TOKEN_FIELD_DESC);
                this.token.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("payMoneyWithToken_args(");
            boolean first = true;

            sb.append("request:");
            if (this.request == null) {
                sb.append("null");
            } else {
                sb.append(this.request);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("originalOrder:");
            if (this.originalOrder == null) {
                sb.append("null");
            } else {
                sb.append(this.originalOrder);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("token:");
            if (this.token == null) {
                sb.append("null");
            } else {
                sb.append(this.token);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class payMoneyWithToken_result implements
            TBase<payMoneyWithToken_result, payMoneyWithToken_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("payMoneyWithToken_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField SE_FIELD_DESC = new TField("se", TType.STRUCT, (short) 1);

        public PaymentResult success;
        public ServiceException se;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"), SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // SE
                    return SE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            tmpMap.put(_Fields.SE, new FieldMetaData("se", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(payMoneyWithToken_result.class, metaDataMap);
        }

        public payMoneyWithToken_result() {
        }

        public payMoneyWithToken_result(PaymentResult success, ServiceException se) {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public payMoneyWithToken_result(payMoneyWithToken_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
            if (other.isSetSe()) {
                this.se = new ServiceException(other.se);
            }
        }

        public payMoneyWithToken_result deepCopy() {
            return new payMoneyWithToken_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.se = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public payMoneyWithToken_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceException getSe() {
            return this.se;
        }

        public payMoneyWithToken_result setSe(ServiceException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /**
         * Returns true if field se is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            case SE:
                if (value == null) {
                    unsetSe();
                } else {
                    setSe((ServiceException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case SE:
                return getSe();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case SE:
                return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof payMoneyWithToken_result)
                return this.equals((payMoneyWithToken_result) that);
            return false;
        }

        public boolean equals(payMoneyWithToken_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(payMoneyWithToken_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            payMoneyWithToken_result typedOther = (payMoneyWithToken_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 1: // SE
                    if (field.type == TType.STRUCT) {
                        this.se = new ServiceException();
                        this.se.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            } else if (this.isSetSe()) {
                oprot.writeFieldBegin(SE_FIELD_DESC);
                this.se.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("payMoneyWithToken_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getPayMoneyResult_args implements
            TBase<getPayMoneyResult_args, getPayMoneyResult_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getPayMoneyResult_args");

        private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short) 1);
        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 2);
        private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short) 3);
        private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 4);

        public String username;
        public String product;
        public String orderId;
        public String sign;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            USERNAME((short) 1, "username"), PRODUCT((short) 2, "product"), ORDER_ID((short) 3, "orderId"), SIGN(
                    (short) 4, "sign");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // USERNAME
                    return USERNAME;
                case 2: // PRODUCT
                    return PRODUCT;
                case 3: // ORDER_ID
                    return ORDER_ID;
                case 4: // SIGN
                    return SIGN;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                    TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getPayMoneyResult_args.class, metaDataMap);
        }

        public getPayMoneyResult_args() {
        }

        public getPayMoneyResult_args(String username, String product, String orderId, String sign) {
            this();
            this.username = username;
            this.product = product;
            this.orderId = orderId;
            this.sign = sign;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPayMoneyResult_args(getPayMoneyResult_args other) {
            if (other.isSetUsername()) {
                this.username = other.username;
            }
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            if (other.isSetOrderId()) {
                this.orderId = other.orderId;
            }
            if (other.isSetSign()) {
                this.sign = other.sign;
            }
        }

        public getPayMoneyResult_args deepCopy() {
            return new getPayMoneyResult_args(this);
        }

        @Override
        public void clear() {
            this.username = null;
            this.product = null;
            this.orderId = null;
            this.sign = null;
        }

        public String getUsername() {
            return this.username;
        }

        public getPayMoneyResult_args setUsername(String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        /**
         * Returns true if field username is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        public String getProduct() {
            return this.product;
        }

        public getPayMoneyResult_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public String getOrderId() {
            return this.orderId;
        }

        public getPayMoneyResult_args setOrderId(String orderId) {
            this.orderId = orderId;
            return this;
        }

        public void unsetOrderId() {
            this.orderId = null;
        }

        /**
         * Returns true if field orderId is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetOrderId() {
            return this.orderId != null;
        }

        public void setOrderIdIsSet(boolean value) {
            if (!value) {
                this.orderId = null;
            }
        }

        public String getSign() {
            return this.sign;
        }

        public getPayMoneyResult_args setSign(String sign) {
            this.sign = sign;
            return this;
        }

        public void unsetSign() {
            this.sign = null;
        }

        /**
         * Returns true if field sign is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSign() {
            return this.sign != null;
        }

        public void setSignIsSet(boolean value) {
            if (!value) {
                this.sign = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case USERNAME:
                if (value == null) {
                    unsetUsername();
                } else {
                    setUsername((String) value);
                }
                break;

            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case ORDER_ID:
                if (value == null) {
                    unsetOrderId();
                } else {
                    setOrderId((String) value);
                }
                break;

            case SIGN:
                if (value == null) {
                    unsetSign();
                } else {
                    setSign((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case USERNAME:
                return getUsername();

            case PRODUCT:
                return getProduct();

            case ORDER_ID:
                return getOrderId();

            case SIGN:
                return getSign();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case USERNAME:
                return isSetUsername();
            case PRODUCT:
                return isSetProduct();
            case ORDER_ID:
                return isSetOrderId();
            case SIGN:
                return isSetSign();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPayMoneyResult_args)
                return this.equals((getPayMoneyResult_args) that);
            return false;
        }

        public boolean equals(getPayMoneyResult_args that) {
            if (that == null)
                return false;

            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_orderId = true && this.isSetOrderId();
            boolean that_present_orderId = true && that.isSetOrderId();
            if (this_present_orderId || that_present_orderId) {
                if (!(this_present_orderId && that_present_orderId))
                    return false;
                if (!this.orderId.equals(that.orderId))
                    return false;
            }

            boolean this_present_sign = true && this.isSetSign();
            boolean that_present_sign = true && that.isSetSign();
            if (this_present_sign || that_present_sign) {
                if (!(this_present_sign && that_present_sign))
                    return false;
                if (!this.sign.equals(that.sign))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getPayMoneyResult_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getPayMoneyResult_args typedOther = (getPayMoneyResult_args) other;

            lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOrderId()) {
                lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSign()) {
                lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // USERNAME
                    if (field.type == TType.STRING) {
                        this.username = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // ORDER_ID
                    if (field.type == TType.STRING) {
                        this.orderId = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // SIGN
                    if (field.type == TType.STRING) {
                        this.sign = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.username != null) {
                oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                oprot.writeString(this.username);
                oprot.writeFieldEnd();
            }
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            if (this.orderId != null) {
                oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
                oprot.writeString(this.orderId);
                oprot.writeFieldEnd();
            }
            if (this.sign != null) {
                oprot.writeFieldBegin(SIGN_FIELD_DESC);
                oprot.writeString(this.sign);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPayMoneyResult_args(");
            boolean first = true;

            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("orderId:");
            if (this.orderId == null) {
                sb.append("null");
            } else {
                sb.append(this.orderId);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sign:");
            if (this.sign == null) {
                sb.append("null");
            } else {
                sb.append(this.sign);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            if (username == null) {
                throw new TProtocolException("Required field 'username' was not present! Struct: " + toString());
            }
            if (product == null) {
                throw new TProtocolException("Required field 'product' was not present! Struct: " + toString());
            }
            if (orderId == null) {
                throw new TProtocolException("Required field 'orderId' was not present! Struct: " + toString());
            }
            if (sign == null) {
                throw new TProtocolException("Required field 'sign' was not present! Struct: " + toString());
            }
        }

    }

    public static class getPayMoneyResult_result implements
            TBase<getPayMoneyResult_result, getPayMoneyResult_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getPayMoneyResult_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getPayMoneyResult_result.class, metaDataMap);
        }

        public getPayMoneyResult_result() {
        }

        public getPayMoneyResult_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPayMoneyResult_result(getPayMoneyResult_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public getPayMoneyResult_result deepCopy() {
            return new getPayMoneyResult_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public getPayMoneyResult_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPayMoneyResult_result)
                return this.equals((getPayMoneyResult_result) that);
            return false;
        }

        public boolean equals(getPayMoneyResult_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getPayMoneyResult_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getPayMoneyResult_result typedOther = (getPayMoneyResult_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPayMoneyResult_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class addCommission_args implements TBase<addCommission_args, addCommission_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("addCommission_args");

        private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short) 1);

        public AddCommissionRequest request;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQUEST((short) 1, "request");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQUEST
                    return REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.REQUIRED,
                    new StructMetaData(TType.STRUCT, AddCommissionRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(addCommission_args.class, metaDataMap);
        }

        public addCommission_args() {
        }

        public addCommission_args(AddCommissionRequest request) {
            this();
            this.request = request;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addCommission_args(addCommission_args other) {
            if (other.isSetRequest()) {
                this.request = new AddCommissionRequest(other.request);
            }
        }

        public addCommission_args deepCopy() {
            return new addCommission_args(this);
        }

        @Override
        public void clear() {
            this.request = null;
        }

        public AddCommissionRequest getRequest() {
            return this.request;
        }

        public addCommission_args setRequest(AddCommissionRequest request) {
            this.request = request;
            return this;
        }

        public void unsetRequest() {
            this.request = null;
        }

        /**
         * Returns true if field request is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetRequest() {
            return this.request != null;
        }

        public void setRequestIsSet(boolean value) {
            if (!value) {
                this.request = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQUEST:
                if (value == null) {
                    unsetRequest();
                } else {
                    setRequest((AddCommissionRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQUEST:
                return getRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQUEST:
                return isSetRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addCommission_args)
                return this.equals((addCommission_args) that);
            return false;
        }

        public boolean equals(addCommission_args that) {
            if (that == null)
                return false;

            boolean this_present_request = true && this.isSetRequest();
            boolean that_present_request = true && that.isSetRequest();
            if (this_present_request || that_present_request) {
                if (!(this_present_request && that_present_request))
                    return false;
                if (!this.request.equals(that.request))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(addCommission_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            addCommission_args typedOther = (addCommission_args) other;

            lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRequest()) {
                lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQUEST
                    if (field.type == TType.STRUCT) {
                        this.request = new AddCommissionRequest();
                        this.request.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.request != null) {
                oprot.writeFieldBegin(REQUEST_FIELD_DESC);
                this.request.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addCommission_args(");
            boolean first = true;

            sb.append("request:");
            if (this.request == null) {
                sb.append("null");
            } else {
                sb.append(this.request);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            if (request == null) {
                throw new TProtocolException("Required field 'request' was not present! Struct: " + toString());
            }
        }

    }

    public static class addCommission_result implements TBase<addCommission_result, addCommission_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("addCommission_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField SE_FIELD_DESC = new TField("se", TType.STRUCT, (short) 1);

        public PaymentResult success;
        public ServiceException se;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"), SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // SE
                    return SE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            tmpMap.put(_Fields.SE, new FieldMetaData("se", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(addCommission_result.class, metaDataMap);
        }

        public addCommission_result() {
        }

        public addCommission_result(PaymentResult success, ServiceException se) {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addCommission_result(addCommission_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
            if (other.isSetSe()) {
                this.se = new ServiceException(other.se);
            }
        }

        public addCommission_result deepCopy() {
            return new addCommission_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.se = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public addCommission_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceException getSe() {
            return this.se;
        }

        public addCommission_result setSe(ServiceException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /**
         * Returns true if field se is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            case SE:
                if (value == null) {
                    unsetSe();
                } else {
                    setSe((ServiceException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case SE:
                return getSe();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case SE:
                return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addCommission_result)
                return this.equals((addCommission_result) that);
            return false;
        }

        public boolean equals(addCommission_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(addCommission_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            addCommission_result typedOther = (addCommission_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 1: // SE
                    if (field.type == TType.STRUCT) {
                        this.se = new ServiceException();
                        this.se.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            } else if (this.isSetSe()) {
                oprot.writeFieldBegin(SE_FIELD_DESC);
                this.se.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addCommission_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getAddCommissionResult_args implements
            TBase<getAddCommissionResult_args, getAddCommissionResult_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getAddCommissionResult_args");

        private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short) 1);
        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 2);
        private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short) 3);
        private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 4);

        public String username;
        public String product;
        public String orderId;
        public String sign;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            USERNAME((short) 1, "username"), PRODUCT((short) 2, "product"), ORDER_ID((short) 3, "orderId"), SIGN(
                    (short) 4, "sign");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // USERNAME
                    return USERNAME;
                case 2: // PRODUCT
                    return PRODUCT;
                case 3: // ORDER_ID
                    return ORDER_ID;
                case 4: // SIGN
                    return SIGN;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                    TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getAddCommissionResult_args.class, metaDataMap);
        }

        public getAddCommissionResult_args() {
        }

        public getAddCommissionResult_args(String username, String product, String orderId, String sign) {
            this();
            this.username = username;
            this.product = product;
            this.orderId = orderId;
            this.sign = sign;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAddCommissionResult_args(getAddCommissionResult_args other) {
            if (other.isSetUsername()) {
                this.username = other.username;
            }
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            if (other.isSetOrderId()) {
                this.orderId = other.orderId;
            }
            if (other.isSetSign()) {
                this.sign = other.sign;
            }
        }

        public getAddCommissionResult_args deepCopy() {
            return new getAddCommissionResult_args(this);
        }

        @Override
        public void clear() {
            this.username = null;
            this.product = null;
            this.orderId = null;
            this.sign = null;
        }

        public String getUsername() {
            return this.username;
        }

        public getAddCommissionResult_args setUsername(String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        /**
         * Returns true if field username is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        public String getProduct() {
            return this.product;
        }

        public getAddCommissionResult_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public String getOrderId() {
            return this.orderId;
        }

        public getAddCommissionResult_args setOrderId(String orderId) {
            this.orderId = orderId;
            return this;
        }

        public void unsetOrderId() {
            this.orderId = null;
        }

        /**
         * Returns true if field orderId is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetOrderId() {
            return this.orderId != null;
        }

        public void setOrderIdIsSet(boolean value) {
            if (!value) {
                this.orderId = null;
            }
        }

        public String getSign() {
            return this.sign;
        }

        public getAddCommissionResult_args setSign(String sign) {
            this.sign = sign;
            return this;
        }

        public void unsetSign() {
            this.sign = null;
        }

        /**
         * Returns true if field sign is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSign() {
            return this.sign != null;
        }

        public void setSignIsSet(boolean value) {
            if (!value) {
                this.sign = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case USERNAME:
                if (value == null) {
                    unsetUsername();
                } else {
                    setUsername((String) value);
                }
                break;

            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case ORDER_ID:
                if (value == null) {
                    unsetOrderId();
                } else {
                    setOrderId((String) value);
                }
                break;

            case SIGN:
                if (value == null) {
                    unsetSign();
                } else {
                    setSign((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case USERNAME:
                return getUsername();

            case PRODUCT:
                return getProduct();

            case ORDER_ID:
                return getOrderId();

            case SIGN:
                return getSign();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case USERNAME:
                return isSetUsername();
            case PRODUCT:
                return isSetProduct();
            case ORDER_ID:
                return isSetOrderId();
            case SIGN:
                return isSetSign();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAddCommissionResult_args)
                return this.equals((getAddCommissionResult_args) that);
            return false;
        }

        public boolean equals(getAddCommissionResult_args that) {
            if (that == null)
                return false;

            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_orderId = true && this.isSetOrderId();
            boolean that_present_orderId = true && that.isSetOrderId();
            if (this_present_orderId || that_present_orderId) {
                if (!(this_present_orderId && that_present_orderId))
                    return false;
                if (!this.orderId.equals(that.orderId))
                    return false;
            }

            boolean this_present_sign = true && this.isSetSign();
            boolean that_present_sign = true && that.isSetSign();
            if (this_present_sign || that_present_sign) {
                if (!(this_present_sign && that_present_sign))
                    return false;
                if (!this.sign.equals(that.sign))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getAddCommissionResult_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getAddCommissionResult_args typedOther = (getAddCommissionResult_args) other;

            lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOrderId()) {
                lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSign()) {
                lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // USERNAME
                    if (field.type == TType.STRING) {
                        this.username = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // ORDER_ID
                    if (field.type == TType.STRING) {
                        this.orderId = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // SIGN
                    if (field.type == TType.STRING) {
                        this.sign = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.username != null) {
                oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                oprot.writeString(this.username);
                oprot.writeFieldEnd();
            }
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            if (this.orderId != null) {
                oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
                oprot.writeString(this.orderId);
                oprot.writeFieldEnd();
            }
            if (this.sign != null) {
                oprot.writeFieldBegin(SIGN_FIELD_DESC);
                oprot.writeString(this.sign);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAddCommissionResult_args(");
            boolean first = true;

            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("orderId:");
            if (this.orderId == null) {
                sb.append("null");
            } else {
                sb.append(this.orderId);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sign:");
            if (this.sign == null) {
                sb.append("null");
            } else {
                sb.append(this.sign);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            if (username == null) {
                throw new TProtocolException("Required field 'username' was not present! Struct: " + toString());
            }
            if (product == null) {
                throw new TProtocolException("Required field 'product' was not present! Struct: " + toString());
            }
            if (orderId == null) {
                throw new TProtocolException("Required field 'orderId' was not present! Struct: " + toString());
            }
            if (sign == null) {
                throw new TProtocolException("Required field 'sign' was not present! Struct: " + toString());
            }
        }

    }

    public static class getAddCommissionResult_result implements
            TBase<getAddCommissionResult_result, getAddCommissionResult_result._Fields>, java.io.Serializable,
            Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getAddCommissionResult_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getAddCommissionResult_result.class, metaDataMap);
        }

        public getAddCommissionResult_result() {
        }

        public getAddCommissionResult_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAddCommissionResult_result(getAddCommissionResult_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public getAddCommissionResult_result deepCopy() {
            return new getAddCommissionResult_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public getAddCommissionResult_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAddCommissionResult_result)
                return this.equals((getAddCommissionResult_result) that);
            return false;
        }

        public boolean equals(getAddCommissionResult_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getAddCommissionResult_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getAddCommissionResult_result typedOther = (getAddCommissionResult_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAddCommissionResult_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getTotalMoney_args implements TBase<getTotalMoney_args, getTotalMoney_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getTotalMoney_args");

        private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short) 1);
        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 2);
        private static final TField MONEY_TYPE_FIELD_DESC = new TField("moneyType", TType.I32, (short) 3);
        private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 4);

        public String username;
        public String product;
        public int moneyType;
        public String sign;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            USERNAME((short) 1, "username"), PRODUCT((short) 2, "product"), MONEY_TYPE((short) 3, "moneyType"), SIGN(
                    (short) 4, "sign");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // USERNAME
                    return USERNAME;
                case 2: // PRODUCT
                    return PRODUCT;
                case 3: // MONEY_TYPE
                    return MONEY_TYPE;
                case 4: // SIGN
                    return SIGN;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __MONEYTYPE_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.MONEY_TYPE, new FieldMetaData("moneyType", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.I32)));
            tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                    TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getTotalMoney_args.class, metaDataMap);
        }

        public getTotalMoney_args() {
        }

        public getTotalMoney_args(String username, String product, int moneyType, String sign) {
            this();
            this.username = username;
            this.product = product;
            this.moneyType = moneyType;
            setMoneyTypeIsSet(true);
            this.sign = sign;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTotalMoney_args(getTotalMoney_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetUsername()) {
                this.username = other.username;
            }
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            this.moneyType = other.moneyType;
            if (other.isSetSign()) {
                this.sign = other.sign;
            }
        }

        public getTotalMoney_args deepCopy() {
            return new getTotalMoney_args(this);
        }

        @Override
        public void clear() {
            this.username = null;
            this.product = null;
            setMoneyTypeIsSet(false);
            this.moneyType = 0;
            this.sign = null;
        }

        public String getUsername() {
            return this.username;
        }

        public getTotalMoney_args setUsername(String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        /**
         * Returns true if field username is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        public String getProduct() {
            return this.product;
        }

        public getTotalMoney_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public int getMoneyType() {
            return this.moneyType;
        }

        public getTotalMoney_args setMoneyType(int moneyType) {
            this.moneyType = moneyType;
            setMoneyTypeIsSet(true);
            return this;
        }

        public void unsetMoneyType() {
            __isset_bit_vector.clear(__MONEYTYPE_ISSET_ID);
        }

        /**
         * Returns true if field moneyType is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetMoneyType() {
            return __isset_bit_vector.get(__MONEYTYPE_ISSET_ID);
        }

        public void setMoneyTypeIsSet(boolean value) {
            __isset_bit_vector.set(__MONEYTYPE_ISSET_ID, value);
        }

        public String getSign() {
            return this.sign;
        }

        public getTotalMoney_args setSign(String sign) {
            this.sign = sign;
            return this;
        }

        public void unsetSign() {
            this.sign = null;
        }

        /**
         * Returns true if field sign is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSign() {
            return this.sign != null;
        }

        public void setSignIsSet(boolean value) {
            if (!value) {
                this.sign = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case USERNAME:
                if (value == null) {
                    unsetUsername();
                } else {
                    setUsername((String) value);
                }
                break;

            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case MONEY_TYPE:
                if (value == null) {
                    unsetMoneyType();
                } else {
                    setMoneyType((Integer) value);
                }
                break;

            case SIGN:
                if (value == null) {
                    unsetSign();
                } else {
                    setSign((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case USERNAME:
                return getUsername();

            case PRODUCT:
                return getProduct();

            case MONEY_TYPE:
                return new Integer(getMoneyType());

            case SIGN:
                return getSign();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case USERNAME:
                return isSetUsername();
            case PRODUCT:
                return isSetProduct();
            case MONEY_TYPE:
                return isSetMoneyType();
            case SIGN:
                return isSetSign();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getTotalMoney_args)
                return this.equals((getTotalMoney_args) that);
            return false;
        }

        public boolean equals(getTotalMoney_args that) {
            if (that == null)
                return false;

            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_moneyType = true;
            boolean that_present_moneyType = true;
            if (this_present_moneyType || that_present_moneyType) {
                if (!(this_present_moneyType && that_present_moneyType))
                    return false;
                if (this.moneyType != that.moneyType)
                    return false;
            }

            boolean this_present_sign = true && this.isSetSign();
            boolean that_present_sign = true && that.isSetSign();
            if (this_present_sign || that_present_sign) {
                if (!(this_present_sign && that_present_sign))
                    return false;
                if (!this.sign.equals(that.sign))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getTotalMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getTotalMoney_args typedOther = (getTotalMoney_args) other;

            lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMoneyType()).compareTo(typedOther.isSetMoneyType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMoneyType()) {
                lastComparison = TBaseHelper.compareTo(this.moneyType, typedOther.moneyType);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSign()) {
                lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // USERNAME
                    if (field.type == TType.STRING) {
                        this.username = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // MONEY_TYPE
                    if (field.type == TType.I32) {
                        this.moneyType = iprot.readI32();
                        setMoneyTypeIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // SIGN
                    if (field.type == TType.STRING) {
                        this.sign = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            if (!isSetMoneyType()) {
                throw new TProtocolException("Required field 'moneyType' was not found in serialized data! Struct: "
                        + toString());
            }
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.username != null) {
                oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                oprot.writeString(this.username);
                oprot.writeFieldEnd();
            }
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(MONEY_TYPE_FIELD_DESC);
            oprot.writeI32(this.moneyType);
            oprot.writeFieldEnd();
            if (this.sign != null) {
                oprot.writeFieldBegin(SIGN_FIELD_DESC);
                oprot.writeString(this.sign);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getTotalMoney_args(");
            boolean first = true;

            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("moneyType:");
            sb.append(this.moneyType);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sign:");
            if (this.sign == null) {
                sb.append("null");
            } else {
                sb.append(this.sign);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            if (username == null) {
                throw new TProtocolException("Required field 'username' was not present! Struct: " + toString());
            }
            if (product == null) {
                throw new TProtocolException("Required field 'product' was not present! Struct: " + toString());
            }
            // alas, we cannot check 'moneyType' because it's a primitive and
            // you chose the non-beans generator.
            if (sign == null) {
                throw new TProtocolException("Required field 'sign' was not present! Struct: " + toString());
            }
        }

    }

    public static class getTotalMoney_result implements TBase<getTotalMoney_result, getTotalMoney_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getTotalMoney_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getTotalMoney_result.class, metaDataMap);
        }

        public getTotalMoney_result() {
        }

        public getTotalMoney_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTotalMoney_result(getTotalMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public getTotalMoney_result deepCopy() {
            return new getTotalMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public getTotalMoney_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getTotalMoney_result)
                return this.equals((getTotalMoney_result) that);
            return false;
        }

        public boolean equals(getTotalMoney_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getTotalMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getTotalMoney_result typedOther = (getTotalMoney_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getTotalMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class lockMoney_args implements TBase<lockMoney_args, lockMoney_args._Fields>, java.io.Serializable,
            Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("lockMoney_args");

        private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short) 1);

        public LockMoneyRequest request;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQUEST((short) 1, "request");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQUEST
                    return REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.REQUIRED,
                    new StructMetaData(TType.STRUCT, LockMoneyRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(lockMoney_args.class, metaDataMap);
        }

        public lockMoney_args() {
        }

        public lockMoney_args(LockMoneyRequest request) {
            this();
            this.request = request;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public lockMoney_args(lockMoney_args other) {
            if (other.isSetRequest()) {
                this.request = new LockMoneyRequest(other.request);
            }
        }

        public lockMoney_args deepCopy() {
            return new lockMoney_args(this);
        }

        @Override
        public void clear() {
            this.request = null;
        }

        public LockMoneyRequest getRequest() {
            return this.request;
        }

        public lockMoney_args setRequest(LockMoneyRequest request) {
            this.request = request;
            return this;
        }

        public void unsetRequest() {
            this.request = null;
        }

        /**
         * Returns true if field request is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetRequest() {
            return this.request != null;
        }

        public void setRequestIsSet(boolean value) {
            if (!value) {
                this.request = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQUEST:
                if (value == null) {
                    unsetRequest();
                } else {
                    setRequest((LockMoneyRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQUEST:
                return getRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQUEST:
                return isSetRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof lockMoney_args)
                return this.equals((lockMoney_args) that);
            return false;
        }

        public boolean equals(lockMoney_args that) {
            if (that == null)
                return false;

            boolean this_present_request = true && this.isSetRequest();
            boolean that_present_request = true && that.isSetRequest();
            if (this_present_request || that_present_request) {
                if (!(this_present_request && that_present_request))
                    return false;
                if (!this.request.equals(that.request))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(lockMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            lockMoney_args typedOther = (lockMoney_args) other;

            lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRequest()) {
                lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQUEST
                    if (field.type == TType.STRUCT) {
                        this.request = new LockMoneyRequest();
                        this.request.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.request != null) {
                oprot.writeFieldBegin(REQUEST_FIELD_DESC);
                this.request.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("lockMoney_args(");
            boolean first = true;

            sb.append("request:");
            if (this.request == null) {
                sb.append("null");
            } else {
                sb.append(this.request);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            if (request == null) {
                throw new TProtocolException("Required field 'request' was not present! Struct: " + toString());
            }
        }

    }

    public static class lockMoney_result implements TBase<lockMoney_result, lockMoney_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("lockMoney_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField SE_FIELD_DESC = new TField("se", TType.STRUCT, (short) 1);

        public PaymentResult success;
        public ServiceException se;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"), SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // SE
                    return SE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            tmpMap.put(_Fields.SE, new FieldMetaData("se", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(lockMoney_result.class, metaDataMap);
        }

        public lockMoney_result() {
        }

        public lockMoney_result(PaymentResult success, ServiceException se) {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public lockMoney_result(lockMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
            if (other.isSetSe()) {
                this.se = new ServiceException(other.se);
            }
        }

        public lockMoney_result deepCopy() {
            return new lockMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.se = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public lockMoney_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceException getSe() {
            return this.se;
        }

        public lockMoney_result setSe(ServiceException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /**
         * Returns true if field se is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            case SE:
                if (value == null) {
                    unsetSe();
                } else {
                    setSe((ServiceException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case SE:
                return getSe();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case SE:
                return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof lockMoney_result)
                return this.equals((lockMoney_result) that);
            return false;
        }

        public boolean equals(lockMoney_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(lockMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            lockMoney_result typedOther = (lockMoney_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 1: // SE
                    if (field.type == TType.STRUCT) {
                        this.se = new ServiceException();
                        this.se.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            } else if (this.isSetSe()) {
                oprot.writeFieldBegin(SE_FIELD_DESC);
                this.se.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("lockMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class unlockMoney_args implements TBase<unlockMoney_args, unlockMoney_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("unlockMoney_args");

        private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short) 1);

        public UnlockMoneyRequest request;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQUEST((short) 1, "request");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQUEST
                    return REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.REQUIRED,
                    new StructMetaData(TType.STRUCT, UnlockMoneyRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(unlockMoney_args.class, metaDataMap);
        }

        public unlockMoney_args() {
        }

        public unlockMoney_args(UnlockMoneyRequest request) {
            this();
            this.request = request;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public unlockMoney_args(unlockMoney_args other) {
            if (other.isSetRequest()) {
                this.request = new UnlockMoneyRequest(other.request);
            }
        }

        public unlockMoney_args deepCopy() {
            return new unlockMoney_args(this);
        }

        @Override
        public void clear() {
            this.request = null;
        }

        public UnlockMoneyRequest getRequest() {
            return this.request;
        }

        public unlockMoney_args setRequest(UnlockMoneyRequest request) {
            this.request = request;
            return this;
        }

        public void unsetRequest() {
            this.request = null;
        }

        /**
         * Returns true if field request is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetRequest() {
            return this.request != null;
        }

        public void setRequestIsSet(boolean value) {
            if (!value) {
                this.request = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQUEST:
                if (value == null) {
                    unsetRequest();
                } else {
                    setRequest((UnlockMoneyRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQUEST:
                return getRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQUEST:
                return isSetRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof unlockMoney_args)
                return this.equals((unlockMoney_args) that);
            return false;
        }

        public boolean equals(unlockMoney_args that) {
            if (that == null)
                return false;

            boolean this_present_request = true && this.isSetRequest();
            boolean that_present_request = true && that.isSetRequest();
            if (this_present_request || that_present_request) {
                if (!(this_present_request && that_present_request))
                    return false;
                if (!this.request.equals(that.request))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(unlockMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            unlockMoney_args typedOther = (unlockMoney_args) other;

            lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRequest()) {
                lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQUEST
                    if (field.type == TType.STRUCT) {
                        this.request = new UnlockMoneyRequest();
                        this.request.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.request != null) {
                oprot.writeFieldBegin(REQUEST_FIELD_DESC);
                this.request.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("unlockMoney_args(");
            boolean first = true;

            sb.append("request:");
            if (this.request == null) {
                sb.append("null");
            } else {
                sb.append(this.request);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            if (request == null) {
                throw new TProtocolException("Required field 'request' was not present! Struct: " + toString());
            }
        }

    }

    public static class unlockMoney_result implements TBase<unlockMoney_result, unlockMoney_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("unlockMoney_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField SE_FIELD_DESC = new TField("se", TType.STRUCT, (short) 1);

        public PaymentResult success;
        public ServiceException se;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"), SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // SE
                    return SE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            tmpMap.put(_Fields.SE, new FieldMetaData("se", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(unlockMoney_result.class, metaDataMap);
        }

        public unlockMoney_result() {
        }

        public unlockMoney_result(PaymentResult success, ServiceException se) {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public unlockMoney_result(unlockMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
            if (other.isSetSe()) {
                this.se = new ServiceException(other.se);
            }
        }

        public unlockMoney_result deepCopy() {
            return new unlockMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.se = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public unlockMoney_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceException getSe() {
            return this.se;
        }

        public unlockMoney_result setSe(ServiceException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /**
         * Returns true if field se is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            case SE:
                if (value == null) {
                    unsetSe();
                } else {
                    setSe((ServiceException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case SE:
                return getSe();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case SE:
                return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof unlockMoney_result)
                return this.equals((unlockMoney_result) that);
            return false;
        }

        public boolean equals(unlockMoney_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(unlockMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            unlockMoney_result typedOther = (unlockMoney_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 1: // SE
                    if (field.type == TType.STRUCT) {
                        this.se = new ServiceException();
                        this.se.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            } else if (this.isSetSe()) {
                oprot.writeFieldBegin(SE_FIELD_DESC);
                this.se.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("unlockMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class confirmPayMoney_args implements TBase<confirmPayMoney_args, confirmPayMoney_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("confirmPayMoney_args");

        private static final TField PASSPORT_FIELD_DESC = new TField("passport", TType.STRING, (short) 1);
        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 2);
        private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short) 3);
        private static final TField CONFIRM_FIELD_DESC = new TField("confirm", TType.I32, (short) 4);
        private static final TField AUTHORIZATION_TYPE_FIELD_DESC = new TField("authorizationType", TType.I32,
                (short) 5);
        private static final TField DEDUCT_SETTINGS_FIELD_DESC = new TField("deductSettings", TType.I32, (short) 6);
        private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 7);

        public String passport;
        public String product;
        public String orderId;
        public int confirm;
        public int authorizationType;
        public int deductSettings;
        public String sign;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            PASSPORT((short) 1, "passport"), PRODUCT((short) 2, "product"), ORDER_ID((short) 3, "orderId"), CONFIRM(
                    (short) 4, "confirm"), AUTHORIZATION_TYPE((short) 5, "authorizationType"), DEDUCT_SETTINGS(
                    (short) 6, "deductSettings"), SIGN((short) 7, "sign");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // PASSPORT
                    return PASSPORT;
                case 2: // PRODUCT
                    return PRODUCT;
                case 3: // ORDER_ID
                    return ORDER_ID;
                case 4: // CONFIRM
                    return CONFIRM;
                case 5: // AUTHORIZATION_TYPE
                    return AUTHORIZATION_TYPE;
                case 6: // DEDUCT_SETTINGS
                    return DEDUCT_SETTINGS;
                case 7: // SIGN
                    return SIGN;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CONFIRM_ISSET_ID = 0;
        private static final int __AUTHORIZATIONTYPE_ISSET_ID = 1;
        private static final int __DEDUCTSETTINGS_ISSET_ID = 2;
        private BitSet __isset_bit_vector = new BitSet(3);

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PASSPORT, new FieldMetaData("passport", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.CONFIRM, new FieldMetaData("confirm", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.I32)));
            tmpMap.put(_Fields.AUTHORIZATION_TYPE, new FieldMetaData("authorizationType",
                    TFieldRequirementType.REQUIRED, new FieldValueMetaData(TType.I32)));
            tmpMap.put(_Fields.DEDUCT_SETTINGS, new FieldMetaData("deductSettings", TFieldRequirementType.REQUIRED,
                    new FieldValueMetaData(TType.I32)));
            tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                    TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(confirmPayMoney_args.class, metaDataMap);
        }

        public confirmPayMoney_args() {
        }

        public confirmPayMoney_args(String passport, String product, String orderId, int confirm,
                int authorizationType, int deductSettings, String sign) {
            this();
            this.passport = passport;
            this.product = product;
            this.orderId = orderId;
            this.confirm = confirm;
            setConfirmIsSet(true);
            this.authorizationType = authorizationType;
            setAuthorizationTypeIsSet(true);
            this.deductSettings = deductSettings;
            setDeductSettingsIsSet(true);
            this.sign = sign;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public confirmPayMoney_args(confirmPayMoney_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetPassport()) {
                this.passport = other.passport;
            }
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            if (other.isSetOrderId()) {
                this.orderId = other.orderId;
            }
            this.confirm = other.confirm;
            this.authorizationType = other.authorizationType;
            this.deductSettings = other.deductSettings;
            if (other.isSetSign()) {
                this.sign = other.sign;
            }
        }

        public confirmPayMoney_args deepCopy() {
            return new confirmPayMoney_args(this);
        }

        @Override
        public void clear() {
            this.passport = null;
            this.product = null;
            this.orderId = null;
            setConfirmIsSet(false);
            this.confirm = 0;
            setAuthorizationTypeIsSet(false);
            this.authorizationType = 0;
            setDeductSettingsIsSet(false);
            this.deductSettings = 0;
            this.sign = null;
        }

        public String getPassport() {
            return this.passport;
        }

        public confirmPayMoney_args setPassport(String passport) {
            this.passport = passport;
            return this;
        }

        public void unsetPassport() {
            this.passport = null;
        }

        /**
         * Returns true if field passport is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetPassport() {
            return this.passport != null;
        }

        public void setPassportIsSet(boolean value) {
            if (!value) {
                this.passport = null;
            }
        }

        public String getProduct() {
            return this.product;
        }

        public confirmPayMoney_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public String getOrderId() {
            return this.orderId;
        }

        public confirmPayMoney_args setOrderId(String orderId) {
            this.orderId = orderId;
            return this;
        }

        public void unsetOrderId() {
            this.orderId = null;
        }

        /**
         * Returns true if field orderId is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetOrderId() {
            return this.orderId != null;
        }

        public void setOrderIdIsSet(boolean value) {
            if (!value) {
                this.orderId = null;
            }
        }

        public int getConfirm() {
            return this.confirm;
        }

        public confirmPayMoney_args setConfirm(int confirm) {
            this.confirm = confirm;
            setConfirmIsSet(true);
            return this;
        }

        public void unsetConfirm() {
            __isset_bit_vector.clear(__CONFIRM_ISSET_ID);
        }

        /**
         * Returns true if field confirm is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetConfirm() {
            return __isset_bit_vector.get(__CONFIRM_ISSET_ID);
        }

        public void setConfirmIsSet(boolean value) {
            __isset_bit_vector.set(__CONFIRM_ISSET_ID, value);
        }

        public int getAuthorizationType() {
            return this.authorizationType;
        }

        public confirmPayMoney_args setAuthorizationType(int authorizationType) {
            this.authorizationType = authorizationType;
            setAuthorizationTypeIsSet(true);
            return this;
        }

        public void unsetAuthorizationType() {
            __isset_bit_vector.clear(__AUTHORIZATIONTYPE_ISSET_ID);
        }

        /**
         * Returns true if field authorizationType is set (has been asigned a
         * value) and false otherwise
         */
        public boolean isSetAuthorizationType() {
            return __isset_bit_vector.get(__AUTHORIZATIONTYPE_ISSET_ID);
        }

        public void setAuthorizationTypeIsSet(boolean value) {
            __isset_bit_vector.set(__AUTHORIZATIONTYPE_ISSET_ID, value);
        }

        public int getDeductSettings() {
            return this.deductSettings;
        }

        public confirmPayMoney_args setDeductSettings(int deductSettings) {
            this.deductSettings = deductSettings;
            setDeductSettingsIsSet(true);
            return this;
        }

        public void unsetDeductSettings() {
            __isset_bit_vector.clear(__DEDUCTSETTINGS_ISSET_ID);
        }

        /**
         * Returns true if field deductSettings is set (has been asigned a
         * value) and false otherwise
         */
        public boolean isSetDeductSettings() {
            return __isset_bit_vector.get(__DEDUCTSETTINGS_ISSET_ID);
        }

        public void setDeductSettingsIsSet(boolean value) {
            __isset_bit_vector.set(__DEDUCTSETTINGS_ISSET_ID, value);
        }

        public String getSign() {
            return this.sign;
        }

        public confirmPayMoney_args setSign(String sign) {
            this.sign = sign;
            return this;
        }

        public void unsetSign() {
            this.sign = null;
        }

        /**
         * Returns true if field sign is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSign() {
            return this.sign != null;
        }

        public void setSignIsSet(boolean value) {
            if (!value) {
                this.sign = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case PASSPORT:
                if (value == null) {
                    unsetPassport();
                } else {
                    setPassport((String) value);
                }
                break;

            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case ORDER_ID:
                if (value == null) {
                    unsetOrderId();
                } else {
                    setOrderId((String) value);
                }
                break;

            case CONFIRM:
                if (value == null) {
                    unsetConfirm();
                } else {
                    setConfirm((Integer) value);
                }
                break;

            case AUTHORIZATION_TYPE:
                if (value == null) {
                    unsetAuthorizationType();
                } else {
                    setAuthorizationType((Integer) value);
                }
                break;

            case DEDUCT_SETTINGS:
                if (value == null) {
                    unsetDeductSettings();
                } else {
                    setDeductSettings((Integer) value);
                }
                break;

            case SIGN:
                if (value == null) {
                    unsetSign();
                } else {
                    setSign((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case PASSPORT:
                return getPassport();

            case PRODUCT:
                return getProduct();

            case ORDER_ID:
                return getOrderId();

            case CONFIRM:
                return new Integer(getConfirm());

            case AUTHORIZATION_TYPE:
                return new Integer(getAuthorizationType());

            case DEDUCT_SETTINGS:
                return new Integer(getDeductSettings());

            case SIGN:
                return getSign();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case PASSPORT:
                return isSetPassport();
            case PRODUCT:
                return isSetProduct();
            case ORDER_ID:
                return isSetOrderId();
            case CONFIRM:
                return isSetConfirm();
            case AUTHORIZATION_TYPE:
                return isSetAuthorizationType();
            case DEDUCT_SETTINGS:
                return isSetDeductSettings();
            case SIGN:
                return isSetSign();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof confirmPayMoney_args)
                return this.equals((confirmPayMoney_args) that);
            return false;
        }

        public boolean equals(confirmPayMoney_args that) {
            if (that == null)
                return false;

            boolean this_present_passport = true && this.isSetPassport();
            boolean that_present_passport = true && that.isSetPassport();
            if (this_present_passport || that_present_passport) {
                if (!(this_present_passport && that_present_passport))
                    return false;
                if (!this.passport.equals(that.passport))
                    return false;
            }

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_orderId = true && this.isSetOrderId();
            boolean that_present_orderId = true && that.isSetOrderId();
            if (this_present_orderId || that_present_orderId) {
                if (!(this_present_orderId && that_present_orderId))
                    return false;
                if (!this.orderId.equals(that.orderId))
                    return false;
            }

            boolean this_present_confirm = true;
            boolean that_present_confirm = true;
            if (this_present_confirm || that_present_confirm) {
                if (!(this_present_confirm && that_present_confirm))
                    return false;
                if (this.confirm != that.confirm)
                    return false;
            }

            boolean this_present_authorizationType = true;
            boolean that_present_authorizationType = true;
            if (this_present_authorizationType || that_present_authorizationType) {
                if (!(this_present_authorizationType && that_present_authorizationType))
                    return false;
                if (this.authorizationType != that.authorizationType)
                    return false;
            }

            boolean this_present_deductSettings = true;
            boolean that_present_deductSettings = true;
            if (this_present_deductSettings || that_present_deductSettings) {
                if (!(this_present_deductSettings && that_present_deductSettings))
                    return false;
                if (this.deductSettings != that.deductSettings)
                    return false;
            }

            boolean this_present_sign = true && this.isSetSign();
            boolean that_present_sign = true && that.isSetSign();
            if (this_present_sign || that_present_sign) {
                if (!(this_present_sign && that_present_sign))
                    return false;
                if (!this.sign.equals(that.sign))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(confirmPayMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            confirmPayMoney_args typedOther = (confirmPayMoney_args) other;

            lastComparison = Boolean.valueOf(isSetPassport()).compareTo(typedOther.isSetPassport());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPassport()) {
                lastComparison = TBaseHelper.compareTo(this.passport, typedOther.passport);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOrderId()) {
                lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetConfirm()).compareTo(typedOther.isSetConfirm());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetConfirm()) {
                lastComparison = TBaseHelper.compareTo(this.confirm, typedOther.confirm);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAuthorizationType()).compareTo(typedOther.isSetAuthorizationType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthorizationType()) {
                lastComparison = TBaseHelper.compareTo(this.authorizationType, typedOther.authorizationType);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDeductSettings()).compareTo(typedOther.isSetDeductSettings());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDeductSettings()) {
                lastComparison = TBaseHelper.compareTo(this.deductSettings, typedOther.deductSettings);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSign()) {
                lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // PASSPORT
                    if (field.type == TType.STRING) {
                        this.passport = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // ORDER_ID
                    if (field.type == TType.STRING) {
                        this.orderId = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // CONFIRM
                    if (field.type == TType.I32) {
                        this.confirm = iprot.readI32();
                        setConfirmIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 5: // AUTHORIZATION_TYPE
                    if (field.type == TType.I32) {
                        this.authorizationType = iprot.readI32();
                        setAuthorizationTypeIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 6: // DEDUCT_SETTINGS
                    if (field.type == TType.I32) {
                        this.deductSettings = iprot.readI32();
                        setDeductSettingsIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 7: // SIGN
                    if (field.type == TType.STRING) {
                        this.sign = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            if (!isSetConfirm()) {
                throw new TProtocolException("Required field 'confirm' was not found in serialized data! Struct: "
                        + toString());
            }
            if (!isSetAuthorizationType()) {
                throw new TProtocolException(
                        "Required field 'authorizationType' was not found in serialized data! Struct: " + toString());
            }
            if (!isSetDeductSettings()) {
                throw new TProtocolException(
                        "Required field 'deductSettings' was not found in serialized data! Struct: " + toString());
            }
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.passport != null) {
                oprot.writeFieldBegin(PASSPORT_FIELD_DESC);
                oprot.writeString(this.passport);
                oprot.writeFieldEnd();
            }
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            if (this.orderId != null) {
                oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
                oprot.writeString(this.orderId);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(CONFIRM_FIELD_DESC);
            oprot.writeI32(this.confirm);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(AUTHORIZATION_TYPE_FIELD_DESC);
            oprot.writeI32(this.authorizationType);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(DEDUCT_SETTINGS_FIELD_DESC);
            oprot.writeI32(this.deductSettings);
            oprot.writeFieldEnd();
            if (this.sign != null) {
                oprot.writeFieldBegin(SIGN_FIELD_DESC);
                oprot.writeString(this.sign);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("confirmPayMoney_args(");
            boolean first = true;

            sb.append("passport:");
            if (this.passport == null) {
                sb.append("null");
            } else {
                sb.append(this.passport);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("orderId:");
            if (this.orderId == null) {
                sb.append("null");
            } else {
                sb.append(this.orderId);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("confirm:");
            sb.append(this.confirm);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("authorizationType:");
            sb.append(this.authorizationType);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("deductSettings:");
            sb.append(this.deductSettings);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sign:");
            if (this.sign == null) {
                sb.append("null");
            } else {
                sb.append(this.sign);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            if (passport == null) {
                throw new TProtocolException("Required field 'passport' was not present! Struct: " + toString());
            }
            if (product == null) {
                throw new TProtocolException("Required field 'product' was not present! Struct: " + toString());
            }
            if (orderId == null) {
                throw new TProtocolException("Required field 'orderId' was not present! Struct: " + toString());
            }
            // alas, we cannot check 'confirm' because it's a primitive and you
            // chose the non-beans generator.
            // alas, we cannot check 'authorizationType' because it's a
            // primitive and you chose the non-beans generator.
            // alas, we cannot check 'deductSettings' because it's a primitive
            // and you chose the non-beans generator.
            if (sign == null) {
                throw new TProtocolException("Required field 'sign' was not present! Struct: " + toString());
            }
        }

    }

    public static class confirmPayMoney_result implements
            TBase<confirmPayMoney_result, confirmPayMoney_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("confirmPayMoney_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(confirmPayMoney_result.class, metaDataMap);
        }

        public confirmPayMoney_result() {
        }

        public confirmPayMoney_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public confirmPayMoney_result(confirmPayMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public confirmPayMoney_result deepCopy() {
            return new confirmPayMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public confirmPayMoney_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof confirmPayMoney_result)
                return this.equals((confirmPayMoney_result) that);
            return false;
        }

        public boolean equals(confirmPayMoney_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(confirmPayMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            confirmPayMoney_result typedOther = (confirmPayMoney_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("confirmPayMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class transferBalance_args implements TBase<transferBalance_args, transferBalance_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("transferBalance_args");

        private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short) 1);

        public TransferBalanceRequest request;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQUEST((short) 1, "request");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQUEST
                    return REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, TransferBalanceRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(transferBalance_args.class, metaDataMap);
        }

        public transferBalance_args() {
        }

        public transferBalance_args(TransferBalanceRequest request) {
            this();
            this.request = request;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public transferBalance_args(transferBalance_args other) {
            if (other.isSetRequest()) {
                this.request = new TransferBalanceRequest(other.request);
            }
        }

        public transferBalance_args deepCopy() {
            return new transferBalance_args(this);
        }

        @Override
        public void clear() {
            this.request = null;
        }

        public TransferBalanceRequest getRequest() {
            return this.request;
        }

        public transferBalance_args setRequest(TransferBalanceRequest request) {
            this.request = request;
            return this;
        }

        public void unsetRequest() {
            this.request = null;
        }

        /**
         * Returns true if field request is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetRequest() {
            return this.request != null;
        }

        public void setRequestIsSet(boolean value) {
            if (!value) {
                this.request = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQUEST:
                if (value == null) {
                    unsetRequest();
                } else {
                    setRequest((TransferBalanceRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQUEST:
                return getRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQUEST:
                return isSetRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof transferBalance_args)
                return this.equals((transferBalance_args) that);
            return false;
        }

        public boolean equals(transferBalance_args that) {
            if (that == null)
                return false;

            boolean this_present_request = true && this.isSetRequest();
            boolean that_present_request = true && that.isSetRequest();
            if (this_present_request || that_present_request) {
                if (!(this_present_request && that_present_request))
                    return false;
                if (!this.request.equals(that.request))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(transferBalance_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            transferBalance_args typedOther = (transferBalance_args) other;

            lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRequest()) {
                lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQUEST
                    if (field.type == TType.STRUCT) {
                        this.request = new TransferBalanceRequest();
                        this.request.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.request != null) {
                oprot.writeFieldBegin(REQUEST_FIELD_DESC);
                this.request.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("transferBalance_args(");
            boolean first = true;

            sb.append("request:");
            if (this.request == null) {
                sb.append("null");
            } else {
                sb.append(this.request);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class transferBalance_result implements
            TBase<transferBalance_result, transferBalance_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("transferBalance_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField SE_FIELD_DESC = new TField("se", TType.STRUCT, (short) 1);

        public PaymentResult success;
        public ServiceException se;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"), SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // SE
                    return SE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            tmpMap.put(_Fields.SE, new FieldMetaData("se", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(transferBalance_result.class, metaDataMap);
        }

        public transferBalance_result() {
        }

        public transferBalance_result(PaymentResult success, ServiceException se) {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public transferBalance_result(transferBalance_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
            if (other.isSetSe()) {
                this.se = new ServiceException(other.se);
            }
        }

        public transferBalance_result deepCopy() {
            return new transferBalance_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.se = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public transferBalance_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceException getSe() {
            return this.se;
        }

        public transferBalance_result setSe(ServiceException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /**
         * Returns true if field se is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            case SE:
                if (value == null) {
                    unsetSe();
                } else {
                    setSe((ServiceException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case SE:
                return getSe();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case SE:
                return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof transferBalance_result)
                return this.equals((transferBalance_result) that);
            return false;
        }

        public boolean equals(transferBalance_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(transferBalance_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            transferBalance_result typedOther = (transferBalance_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 1: // SE
                    if (field.type == TType.STRUCT) {
                        this.se = new ServiceException();
                        this.se.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            } else if (this.isSetSe()) {
                oprot.writeFieldBegin(SE_FIELD_DESC);
                this.se.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("transferBalance_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class reversePayMoney_args implements TBase<reversePayMoney_args, reversePayMoney_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("reversePayMoney_args");

        private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short) 1);

        public ReverseOrderRequest request;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQUEST((short) 1, "request");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQUEST
                    return REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, ReverseOrderRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(reversePayMoney_args.class, metaDataMap);
        }

        public reversePayMoney_args() {
        }

        public reversePayMoney_args(ReverseOrderRequest request) {
            this();
            this.request = request;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reversePayMoney_args(reversePayMoney_args other) {
            if (other.isSetRequest()) {
                this.request = new ReverseOrderRequest(other.request);
            }
        }

        public reversePayMoney_args deepCopy() {
            return new reversePayMoney_args(this);
        }

        @Override
        public void clear() {
            this.request = null;
        }

        public ReverseOrderRequest getRequest() {
            return this.request;
        }

        public reversePayMoney_args setRequest(ReverseOrderRequest request) {
            this.request = request;
            return this;
        }

        public void unsetRequest() {
            this.request = null;
        }

        /**
         * Returns true if field request is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetRequest() {
            return this.request != null;
        }

        public void setRequestIsSet(boolean value) {
            if (!value) {
                this.request = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQUEST:
                if (value == null) {
                    unsetRequest();
                } else {
                    setRequest((ReverseOrderRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQUEST:
                return getRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQUEST:
                return isSetRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof reversePayMoney_args)
                return this.equals((reversePayMoney_args) that);
            return false;
        }

        public boolean equals(reversePayMoney_args that) {
            if (that == null)
                return false;

            boolean this_present_request = true && this.isSetRequest();
            boolean that_present_request = true && that.isSetRequest();
            if (this_present_request || that_present_request) {
                if (!(this_present_request && that_present_request))
                    return false;
                if (!this.request.equals(that.request))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(reversePayMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            reversePayMoney_args typedOther = (reversePayMoney_args) other;

            lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRequest()) {
                lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQUEST
                    if (field.type == TType.STRUCT) {
                        this.request = new ReverseOrderRequest();
                        this.request.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.request != null) {
                oprot.writeFieldBegin(REQUEST_FIELD_DESC);
                this.request.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("reversePayMoney_args(");
            boolean first = true;

            sb.append("request:");
            if (this.request == null) {
                sb.append("null");
            } else {
                sb.append(this.request);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class reversePayMoney_result implements
            TBase<reversePayMoney_result, reversePayMoney_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("reversePayMoney_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField SE_FIELD_DESC = new TField("se", TType.STRUCT, (short) 1);

        public PaymentResult success;
        public ServiceException se;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"), SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // SE
                    return SE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            tmpMap.put(_Fields.SE, new FieldMetaData("se", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(reversePayMoney_result.class, metaDataMap);
        }

        public reversePayMoney_result() {
        }

        public reversePayMoney_result(PaymentResult success, ServiceException se) {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reversePayMoney_result(reversePayMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
            if (other.isSetSe()) {
                this.se = new ServiceException(other.se);
            }
        }

        public reversePayMoney_result deepCopy() {
            return new reversePayMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.se = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public reversePayMoney_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceException getSe() {
            return this.se;
        }

        public reversePayMoney_result setSe(ServiceException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /**
         * Returns true if field se is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            case SE:
                if (value == null) {
                    unsetSe();
                } else {
                    setSe((ServiceException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case SE:
                return getSe();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case SE:
                return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof reversePayMoney_result)
                return this.equals((reversePayMoney_result) that);
            return false;
        }

        public boolean equals(reversePayMoney_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(reversePayMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            reversePayMoney_result typedOther = (reversePayMoney_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 1: // SE
                    if (field.type == TType.STRUCT) {
                        this.se = new ServiceException();
                        this.se.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            } else if (this.isSetSe()) {
                oprot.writeFieldBegin(SE_FIELD_DESC);
                this.se.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("reversePayMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class reverseAddMoney_args implements TBase<reverseAddMoney_args, reverseAddMoney_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("reverseAddMoney_args");

        private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short) 1);

        public ReverseOrderRequest request;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQUEST((short) 1, "request");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQUEST
                    return REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, ReverseOrderRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(reverseAddMoney_args.class, metaDataMap);
        }

        public reverseAddMoney_args() {
        }

        public reverseAddMoney_args(ReverseOrderRequest request) {
            this();
            this.request = request;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reverseAddMoney_args(reverseAddMoney_args other) {
            if (other.isSetRequest()) {
                this.request = new ReverseOrderRequest(other.request);
            }
        }

        public reverseAddMoney_args deepCopy() {
            return new reverseAddMoney_args(this);
        }

        @Override
        public void clear() {
            this.request = null;
        }

        public ReverseOrderRequest getRequest() {
            return this.request;
        }

        public reverseAddMoney_args setRequest(ReverseOrderRequest request) {
            this.request = request;
            return this;
        }

        public void unsetRequest() {
            this.request = null;
        }

        /**
         * Returns true if field request is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetRequest() {
            return this.request != null;
        }

        public void setRequestIsSet(boolean value) {
            if (!value) {
                this.request = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQUEST:
                if (value == null) {
                    unsetRequest();
                } else {
                    setRequest((ReverseOrderRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQUEST:
                return getRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQUEST:
                return isSetRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof reverseAddMoney_args)
                return this.equals((reverseAddMoney_args) that);
            return false;
        }

        public boolean equals(reverseAddMoney_args that) {
            if (that == null)
                return false;

            boolean this_present_request = true && this.isSetRequest();
            boolean that_present_request = true && that.isSetRequest();
            if (this_present_request || that_present_request) {
                if (!(this_present_request && that_present_request))
                    return false;
                if (!this.request.equals(that.request))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(reverseAddMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            reverseAddMoney_args typedOther = (reverseAddMoney_args) other;

            lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRequest()) {
                lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQUEST
                    if (field.type == TType.STRUCT) {
                        this.request = new ReverseOrderRequest();
                        this.request.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.request != null) {
                oprot.writeFieldBegin(REQUEST_FIELD_DESC);
                this.request.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("reverseAddMoney_args(");
            boolean first = true;

            sb.append("request:");
            if (this.request == null) {
                sb.append("null");
            } else {
                sb.append(this.request);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class reverseAddMoney_result implements
            TBase<reverseAddMoney_result, reverseAddMoney_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("reverseAddMoney_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField SE_FIELD_DESC = new TField("se", TType.STRUCT, (short) 1);

        public PaymentResult success;
        public ServiceException se;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"), SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // SE
                    return SE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            tmpMap.put(_Fields.SE, new FieldMetaData("se", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(reverseAddMoney_result.class, metaDataMap);
        }

        public reverseAddMoney_result() {
        }

        public reverseAddMoney_result(PaymentResult success, ServiceException se) {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reverseAddMoney_result(reverseAddMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
            if (other.isSetSe()) {
                this.se = new ServiceException(other.se);
            }
        }

        public reverseAddMoney_result deepCopy() {
            return new reverseAddMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.se = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public reverseAddMoney_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceException getSe() {
            return this.se;
        }

        public reverseAddMoney_result setSe(ServiceException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /**
         * Returns true if field se is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            case SE:
                if (value == null) {
                    unsetSe();
                } else {
                    setSe((ServiceException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case SE:
                return getSe();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case SE:
                return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof reverseAddMoney_result)
                return this.equals((reverseAddMoney_result) that);
            return false;
        }

        public boolean equals(reverseAddMoney_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(reverseAddMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            reverseAddMoney_result typedOther = (reverseAddMoney_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 1: // SE
                    if (field.type == TType.STRUCT) {
                        this.se = new ServiceException();
                        this.se.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            } else if (this.isSetSe()) {
                oprot.writeFieldBegin(SE_FIELD_DESC);
                this.se.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("reverseAddMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getPaymentSettings_args implements
            TBase<getPaymentSettings_args, getPaymentSettings_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getPaymentSettings_args");

        private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short) 1);
        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 2);
        private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 3);

        public String username;
        public String product;
        public String sign;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            USERNAME((short) 1, "username"), PRODUCT((short) 2, "product"), SIGN((short) 3, "sign");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // USERNAME
                    return USERNAME;
                case 2: // PRODUCT
                    return PRODUCT;
                case 3: // SIGN
                    return SIGN;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getPaymentSettings_args.class, metaDataMap);
        }

        public getPaymentSettings_args() {
        }

        public getPaymentSettings_args(String username, String product, String sign) {
            this();
            this.username = username;
            this.product = product;
            this.sign = sign;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPaymentSettings_args(getPaymentSettings_args other) {
            if (other.isSetUsername()) {
                this.username = other.username;
            }
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            if (other.isSetSign()) {
                this.sign = other.sign;
            }
        }

        public getPaymentSettings_args deepCopy() {
            return new getPaymentSettings_args(this);
        }

        @Override
        public void clear() {
            this.username = null;
            this.product = null;
            this.sign = null;
        }

        public String getUsername() {
            return this.username;
        }

        public getPaymentSettings_args setUsername(String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        /**
         * Returns true if field username is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        public String getProduct() {
            return this.product;
        }

        public getPaymentSettings_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public String getSign() {
            return this.sign;
        }

        public getPaymentSettings_args setSign(String sign) {
            this.sign = sign;
            return this;
        }

        public void unsetSign() {
            this.sign = null;
        }

        /**
         * Returns true if field sign is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSign() {
            return this.sign != null;
        }

        public void setSignIsSet(boolean value) {
            if (!value) {
                this.sign = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case USERNAME:
                if (value == null) {
                    unsetUsername();
                } else {
                    setUsername((String) value);
                }
                break;

            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case SIGN:
                if (value == null) {
                    unsetSign();
                } else {
                    setSign((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case USERNAME:
                return getUsername();

            case PRODUCT:
                return getProduct();

            case SIGN:
                return getSign();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case USERNAME:
                return isSetUsername();
            case PRODUCT:
                return isSetProduct();
            case SIGN:
                return isSetSign();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPaymentSettings_args)
                return this.equals((getPaymentSettings_args) that);
            return false;
        }

        public boolean equals(getPaymentSettings_args that) {
            if (that == null)
                return false;

            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_sign = true && this.isSetSign();
            boolean that_present_sign = true && that.isSetSign();
            if (this_present_sign || that_present_sign) {
                if (!(this_present_sign && that_present_sign))
                    return false;
                if (!this.sign.equals(that.sign))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getPaymentSettings_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getPaymentSettings_args typedOther = (getPaymentSettings_args) other;

            lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSign()) {
                lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // USERNAME
                    if (field.type == TType.STRING) {
                        this.username = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // SIGN
                    if (field.type == TType.STRING) {
                        this.sign = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.username != null) {
                oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                oprot.writeString(this.username);
                oprot.writeFieldEnd();
            }
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            if (this.sign != null) {
                oprot.writeFieldBegin(SIGN_FIELD_DESC);
                oprot.writeString(this.sign);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPaymentSettings_args(");
            boolean first = true;

            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sign:");
            if (this.sign == null) {
                sb.append("null");
            } else {
                sb.append(this.sign);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getPaymentSettings_result implements
            TBase<getPaymentSettings_result, getPaymentSettings_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getPaymentSettings_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getPaymentSettings_result.class, metaDataMap);
        }

        public getPaymentSettings_result() {
        }

        public getPaymentSettings_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPaymentSettings_result(getPaymentSettings_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public getPaymentSettings_result deepCopy() {
            return new getPaymentSettings_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public getPaymentSettings_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPaymentSettings_result)
                return this.equals((getPaymentSettings_result) that);
            return false;
        }

        public boolean equals(getPaymentSettings_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getPaymentSettings_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getPaymentSettings_result typedOther = (getPaymentSettings_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPaymentSettings_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class queryTradeDetails_args implements
            TBase<queryTradeDetails_args, queryTradeDetails_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("queryTradeDetails_args");

        private static final TField CRITERIA_FIELD_DESC = new TField("criteria", TType.STRUCT, (short) 1);

        public QueryCriteria criteria;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            CRITERIA((short) 1, "criteria");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CRITERIA
                    return CRITERIA;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CRITERIA, new FieldMetaData("criteria", TFieldRequirementType.DEFAULT,
                    new StructMetaData(TType.STRUCT, QueryCriteria.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(queryTradeDetails_args.class, metaDataMap);
        }

        public queryTradeDetails_args() {
        }

        public queryTradeDetails_args(QueryCriteria criteria) {
            this();
            this.criteria = criteria;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryTradeDetails_args(queryTradeDetails_args other) {
            if (other.isSetCriteria()) {
                this.criteria = new QueryCriteria(other.criteria);
            }
        }

        public queryTradeDetails_args deepCopy() {
            return new queryTradeDetails_args(this);
        }

        @Override
        public void clear() {
            this.criteria = null;
        }

        public QueryCriteria getCriteria() {
            return this.criteria;
        }

        public queryTradeDetails_args setCriteria(QueryCriteria criteria) {
            this.criteria = criteria;
            return this;
        }

        public void unsetCriteria() {
            this.criteria = null;
        }

        /**
         * Returns true if field criteria is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetCriteria() {
            return this.criteria != null;
        }

        public void setCriteriaIsSet(boolean value) {
            if (!value) {
                this.criteria = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case CRITERIA:
                if (value == null) {
                    unsetCriteria();
                } else {
                    setCriteria((QueryCriteria) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CRITERIA:
                return getCriteria();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CRITERIA:
                return isSetCriteria();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryTradeDetails_args)
                return this.equals((queryTradeDetails_args) that);
            return false;
        }

        public boolean equals(queryTradeDetails_args that) {
            if (that == null)
                return false;

            boolean this_present_criteria = true && this.isSetCriteria();
            boolean that_present_criteria = true && that.isSetCriteria();
            if (this_present_criteria || that_present_criteria) {
                if (!(this_present_criteria && that_present_criteria))
                    return false;
                if (!this.criteria.equals(that.criteria))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(queryTradeDetails_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            queryTradeDetails_args typedOther = (queryTradeDetails_args) other;

            lastComparison = Boolean.valueOf(isSetCriteria()).compareTo(typedOther.isSetCriteria());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCriteria()) {
                lastComparison = TBaseHelper.compareTo(this.criteria, typedOther.criteria);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // CRITERIA
                    if (field.type == TType.STRUCT) {
                        this.criteria = new QueryCriteria();
                        this.criteria.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.criteria != null) {
                oprot.writeFieldBegin(CRITERIA_FIELD_DESC);
                this.criteria.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryTradeDetails_args(");
            boolean first = true;

            sb.append("criteria:");
            if (this.criteria == null) {
                sb.append("null");
            } else {
                sb.append(this.criteria);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class queryTradeDetails_result implements
            TBase<queryTradeDetails_result, queryTradeDetails_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("queryTradeDetails_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField SE_FIELD_DESC = new TField("se", TType.STRUCT, (short) 1);

        public QueryResult success;
        public ServiceException se;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"), SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // SE
                    return SE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, QueryResult.class)));
            tmpMap.put(_Fields.SE, new FieldMetaData("se", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(queryTradeDetails_result.class, metaDataMap);
        }

        public queryTradeDetails_result() {
        }

        public queryTradeDetails_result(QueryResult success, ServiceException se) {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryTradeDetails_result(queryTradeDetails_result other) {
            if (other.isSetSuccess()) {
                this.success = new QueryResult(other.success);
            }
            if (other.isSetSe()) {
                this.se = new ServiceException(other.se);
            }
        }

        public queryTradeDetails_result deepCopy() {
            return new queryTradeDetails_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.se = null;
        }

        public QueryResult getSuccess() {
            return this.success;
        }

        public queryTradeDetails_result setSuccess(QueryResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceException getSe() {
            return this.se;
        }

        public queryTradeDetails_result setSe(ServiceException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /**
         * Returns true if field se is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((QueryResult) value);
                }
                break;

            case SE:
                if (value == null) {
                    unsetSe();
                } else {
                    setSe((ServiceException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case SE:
                return getSe();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case SE:
                return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryTradeDetails_result)
                return this.equals((queryTradeDetails_result) that);
            return false;
        }

        public boolean equals(queryTradeDetails_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(queryTradeDetails_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            queryTradeDetails_result typedOther = (queryTradeDetails_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new QueryResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 1: // SE
                    if (field.type == TType.STRUCT) {
                        this.se = new ServiceException();
                        this.se.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            } else if (this.isSetSe()) {
                oprot.writeFieldBegin(SE_FIELD_DESC);
                this.se.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryTradeDetails_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class queryLockDetails_args implements TBase<queryLockDetails_args, queryLockDetails_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("queryLockDetails_args");

        private static final TField CRITERIA_FIELD_DESC = new TField("criteria", TType.STRUCT, (short) 1);

        public QueryCriteria criteria;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            CRITERIA((short) 1, "criteria");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CRITERIA
                    return CRITERIA;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CRITERIA, new FieldMetaData("criteria", TFieldRequirementType.DEFAULT,
                    new StructMetaData(TType.STRUCT, QueryCriteria.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(queryLockDetails_args.class, metaDataMap);
        }

        public queryLockDetails_args() {
        }

        public queryLockDetails_args(QueryCriteria criteria) {
            this();
            this.criteria = criteria;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryLockDetails_args(queryLockDetails_args other) {
            if (other.isSetCriteria()) {
                this.criteria = new QueryCriteria(other.criteria);
            }
        }

        public queryLockDetails_args deepCopy() {
            return new queryLockDetails_args(this);
        }

        @Override
        public void clear() {
            this.criteria = null;
        }

        public QueryCriteria getCriteria() {
            return this.criteria;
        }

        public queryLockDetails_args setCriteria(QueryCriteria criteria) {
            this.criteria = criteria;
            return this;
        }

        public void unsetCriteria() {
            this.criteria = null;
        }

        /**
         * Returns true if field criteria is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetCriteria() {
            return this.criteria != null;
        }

        public void setCriteriaIsSet(boolean value) {
            if (!value) {
                this.criteria = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case CRITERIA:
                if (value == null) {
                    unsetCriteria();
                } else {
                    setCriteria((QueryCriteria) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CRITERIA:
                return getCriteria();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CRITERIA:
                return isSetCriteria();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryLockDetails_args)
                return this.equals((queryLockDetails_args) that);
            return false;
        }

        public boolean equals(queryLockDetails_args that) {
            if (that == null)
                return false;

            boolean this_present_criteria = true && this.isSetCriteria();
            boolean that_present_criteria = true && that.isSetCriteria();
            if (this_present_criteria || that_present_criteria) {
                if (!(this_present_criteria && that_present_criteria))
                    return false;
                if (!this.criteria.equals(that.criteria))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(queryLockDetails_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            queryLockDetails_args typedOther = (queryLockDetails_args) other;

            lastComparison = Boolean.valueOf(isSetCriteria()).compareTo(typedOther.isSetCriteria());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCriteria()) {
                lastComparison = TBaseHelper.compareTo(this.criteria, typedOther.criteria);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // CRITERIA
                    if (field.type == TType.STRUCT) {
                        this.criteria = new QueryCriteria();
                        this.criteria.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.criteria != null) {
                oprot.writeFieldBegin(CRITERIA_FIELD_DESC);
                this.criteria.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryLockDetails_args(");
            boolean first = true;

            sb.append("criteria:");
            if (this.criteria == null) {
                sb.append("null");
            } else {
                sb.append(this.criteria);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class queryLockDetails_result implements
            TBase<queryLockDetails_result, queryLockDetails_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("queryLockDetails_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField SE_FIELD_DESC = new TField("se", TType.STRUCT, (short) 1);

        public QueryResult success;
        public ServiceException se;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"), SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // SE
                    return SE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, QueryResult.class)));
            tmpMap.put(_Fields.SE, new FieldMetaData("se", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(queryLockDetails_result.class, metaDataMap);
        }

        public queryLockDetails_result() {
        }

        public queryLockDetails_result(QueryResult success, ServiceException se) {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryLockDetails_result(queryLockDetails_result other) {
            if (other.isSetSuccess()) {
                this.success = new QueryResult(other.success);
            }
            if (other.isSetSe()) {
                this.se = new ServiceException(other.se);
            }
        }

        public queryLockDetails_result deepCopy() {
            return new queryLockDetails_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.se = null;
        }

        public QueryResult getSuccess() {
            return this.success;
        }

        public queryLockDetails_result setSuccess(QueryResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceException getSe() {
            return this.se;
        }

        public queryLockDetails_result setSe(ServiceException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /**
         * Returns true if field se is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((QueryResult) value);
                }
                break;

            case SE:
                if (value == null) {
                    unsetSe();
                } else {
                    setSe((ServiceException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case SE:
                return getSe();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case SE:
                return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryLockDetails_result)
                return this.equals((queryLockDetails_result) that);
            return false;
        }

        public boolean equals(queryLockDetails_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(queryLockDetails_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            queryLockDetails_result typedOther = (queryLockDetails_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new QueryResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 1: // SE
                    if (field.type == TType.STRUCT) {
                        this.se = new ServiceException();
                        this.se.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            } else if (this.isSetSe()) {
                oprot.writeFieldBegin(SE_FIELD_DESC);
                this.se.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryLockDetails_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class addMoney_args implements TBase<addMoney_args, addMoney_args._Fields>, java.io.Serializable,
            Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("addMoney_args");

        private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short) 1);

        public AddMoneyRequest request;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQUEST((short) 1, "request");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQUEST
                    return REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, AddMoneyRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(addMoney_args.class, metaDataMap);
        }

        public addMoney_args() {
        }

        public addMoney_args(AddMoneyRequest request) {
            this();
            this.request = request;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addMoney_args(addMoney_args other) {
            if (other.isSetRequest()) {
                this.request = new AddMoneyRequest(other.request);
            }
        }

        public addMoney_args deepCopy() {
            return new addMoney_args(this);
        }

        @Override
        public void clear() {
            this.request = null;
        }

        public AddMoneyRequest getRequest() {
            return this.request;
        }

        public addMoney_args setRequest(AddMoneyRequest request) {
            this.request = request;
            return this;
        }

        public void unsetRequest() {
            this.request = null;
        }

        /**
         * Returns true if field request is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetRequest() {
            return this.request != null;
        }

        public void setRequestIsSet(boolean value) {
            if (!value) {
                this.request = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQUEST:
                if (value == null) {
                    unsetRequest();
                } else {
                    setRequest((AddMoneyRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQUEST:
                return getRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQUEST:
                return isSetRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addMoney_args)
                return this.equals((addMoney_args) that);
            return false;
        }

        public boolean equals(addMoney_args that) {
            if (that == null)
                return false;

            boolean this_present_request = true && this.isSetRequest();
            boolean that_present_request = true && that.isSetRequest();
            if (this_present_request || that_present_request) {
                if (!(this_present_request && that_present_request))
                    return false;
                if (!this.request.equals(that.request))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(addMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            addMoney_args typedOther = (addMoney_args) other;

            lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRequest()) {
                lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQUEST
                    if (field.type == TType.STRUCT) {
                        this.request = new AddMoneyRequest();
                        this.request.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.request != null) {
                oprot.writeFieldBegin(REQUEST_FIELD_DESC);
                this.request.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addMoney_args(");
            boolean first = true;

            sb.append("request:");
            if (this.request == null) {
                sb.append("null");
            } else {
                sb.append(this.request);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class addMoney_result implements TBase<addMoney_result, addMoney_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("addMoney_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField SE_FIELD_DESC = new TField("se", TType.STRUCT, (short) 1);

        public PaymentResult success;
        public ServiceException se;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"), SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // SE
                    return SE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            tmpMap.put(_Fields.SE, new FieldMetaData("se", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(addMoney_result.class, metaDataMap);
        }

        public addMoney_result() {
        }

        public addMoney_result(PaymentResult success, ServiceException se) {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addMoney_result(addMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
            if (other.isSetSe()) {
                this.se = new ServiceException(other.se);
            }
        }

        public addMoney_result deepCopy() {
            return new addMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.se = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public addMoney_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceException getSe() {
            return this.se;
        }

        public addMoney_result setSe(ServiceException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /**
         * Returns true if field se is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            case SE:
                if (value == null) {
                    unsetSe();
                } else {
                    setSe((ServiceException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case SE:
                return getSe();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case SE:
                return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addMoney_result)
                return this.equals((addMoney_result) that);
            return false;
        }

        public boolean equals(addMoney_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(addMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            addMoney_result typedOther = (addMoney_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 1: // SE
                    if (field.type == TType.STRUCT) {
                        this.se = new ServiceException();
                        this.se.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            } else if (this.isSetSe()) {
                oprot.writeFieldBegin(SE_FIELD_DESC);
                this.se.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getAddMoneyResult_args implements
            TBase<getAddMoneyResult_args, getAddMoneyResult_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getAddMoneyResult_args");

        private static final TField gbUID_FIELD_DESC = new TField("gbuid", TType.I64, (short) 1);
        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 2);
        private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short) 3);
        private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 4);

        public long gbuid;
        public String product;
        public String orderId;
        public String sign;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            gbUID((short) 1, "gbuid"), PRODUCT((short) 2, "product"), ORDER_ID((short) 3, "orderId"), SIGN((short) 4,
                    "sign");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // gbUID
                    return gbUID;
                case 2: // PRODUCT
                    return PRODUCT;
                case 3: // ORDER_ID
                    return ORDER_ID;
                case 4: // SIGN
                    return SIGN;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __gbUID_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.gbUID, new FieldMetaData("gbuid", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.I64)));
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getAddMoneyResult_args.class, metaDataMap);
        }

        public getAddMoneyResult_args() {
        }

        public getAddMoneyResult_args(long gbuid, String product, String orderId, String sign) {
            this();
            this.gbuid = gbuid;
            setgbuidIsSet(true);
            this.product = product;
            this.orderId = orderId;
            this.sign = sign;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAddMoneyResult_args(getAddMoneyResult_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.gbuid = other.gbuid;
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            if (other.isSetOrderId()) {
                this.orderId = other.orderId;
            }
            if (other.isSetSign()) {
                this.sign = other.sign;
            }
        }

        public getAddMoneyResult_args deepCopy() {
            return new getAddMoneyResult_args(this);
        }

        @Override
        public void clear() {
            setgbuidIsSet(false);
            this.gbuid = 0;
            this.product = null;
            this.orderId = null;
            this.sign = null;
        }

        public long getgbuid() {
            return this.gbuid;
        }

        public getAddMoneyResult_args setgbuid(long gbuid) {
            this.gbuid = gbuid;
            setgbuidIsSet(true);
            return this;
        }

        public void unsetgbuid() {
            __isset_bit_vector.clear(__gbUID_ISSET_ID);
        }

        /**
         * Returns true if field gbuid is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetgbuid() {
            return __isset_bit_vector.get(__gbUID_ISSET_ID);
        }

        public void setgbuidIsSet(boolean value) {
            __isset_bit_vector.set(__gbUID_ISSET_ID, value);
        }

        public String getProduct() {
            return this.product;
        }

        public getAddMoneyResult_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public String getOrderId() {
            return this.orderId;
        }

        public getAddMoneyResult_args setOrderId(String orderId) {
            this.orderId = orderId;
            return this;
        }

        public void unsetOrderId() {
            this.orderId = null;
        }

        /**
         * Returns true if field orderId is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetOrderId() {
            return this.orderId != null;
        }

        public void setOrderIdIsSet(boolean value) {
            if (!value) {
                this.orderId = null;
            }
        }

        public String getSign() {
            return this.sign;
        }

        public getAddMoneyResult_args setSign(String sign) {
            this.sign = sign;
            return this;
        }

        public void unsetSign() {
            this.sign = null;
        }

        /**
         * Returns true if field sign is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSign() {
            return this.sign != null;
        }

        public void setSignIsSet(boolean value) {
            if (!value) {
                this.sign = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case gbUID:
                if (value == null) {
                    unsetgbuid();
                } else {
                    setgbuid((Long) value);
                }
                break;

            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case ORDER_ID:
                if (value == null) {
                    unsetOrderId();
                } else {
                    setOrderId((String) value);
                }
                break;

            case SIGN:
                if (value == null) {
                    unsetSign();
                } else {
                    setSign((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case gbUID:
                return new Long(getgbuid());

            case PRODUCT:
                return getProduct();

            case ORDER_ID:
                return getOrderId();

            case SIGN:
                return getSign();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case gbUID:
                return isSetgbuid();
            case PRODUCT:
                return isSetProduct();
            case ORDER_ID:
                return isSetOrderId();
            case SIGN:
                return isSetSign();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAddMoneyResult_args)
                return this.equals((getAddMoneyResult_args) that);
            return false;
        }

        public boolean equals(getAddMoneyResult_args that) {
            if (that == null)
                return false;

            boolean this_present_gbuid = true;
            boolean that_present_gbuid = true;
            if (this_present_gbuid || that_present_gbuid) {
                if (!(this_present_gbuid && that_present_gbuid))
                    return false;
                if (this.gbuid != that.gbuid)
                    return false;
            }

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_orderId = true && this.isSetOrderId();
            boolean that_present_orderId = true && that.isSetOrderId();
            if (this_present_orderId || that_present_orderId) {
                if (!(this_present_orderId && that_present_orderId))
                    return false;
                if (!this.orderId.equals(that.orderId))
                    return false;
            }

            boolean this_present_sign = true && this.isSetSign();
            boolean that_present_sign = true && that.isSetSign();
            if (this_present_sign || that_present_sign) {
                if (!(this_present_sign && that_present_sign))
                    return false;
                if (!this.sign.equals(that.sign))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getAddMoneyResult_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getAddMoneyResult_args typedOther = (getAddMoneyResult_args) other;

            lastComparison = Boolean.valueOf(isSetgbuid()).compareTo(typedOther.isSetgbuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetgbuid()) {
                lastComparison = TBaseHelper.compareTo(this.gbuid, typedOther.gbuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOrderId()) {
                lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSign()) {
                lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // gbUID
                    if (field.type == TType.I64) {
                        this.gbuid = iprot.readI64();
                        setgbuidIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // ORDER_ID
                    if (field.type == TType.STRING) {
                        this.orderId = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // SIGN
                    if (field.type == TType.STRING) {
                        this.sign = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(gbUID_FIELD_DESC);
            oprot.writeI64(this.gbuid);
            oprot.writeFieldEnd();
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            if (this.orderId != null) {
                oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
                oprot.writeString(this.orderId);
                oprot.writeFieldEnd();
            }
            if (this.sign != null) {
                oprot.writeFieldBegin(SIGN_FIELD_DESC);
                oprot.writeString(this.sign);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAddMoneyResult_args(");
            boolean first = true;

            sb.append("gbuid:");
            sb.append(this.gbuid);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("orderId:");
            if (this.orderId == null) {
                sb.append("null");
            } else {
                sb.append(this.orderId);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sign:");
            if (this.sign == null) {
                sb.append("null");
            } else {
                sb.append(this.sign);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getAddMoneyResult_result implements
            TBase<getAddMoneyResult_result, getAddMoneyResult_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getAddMoneyResult_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getAddMoneyResult_result.class, metaDataMap);
        }

        public getAddMoneyResult_result() {
        }

        public getAddMoneyResult_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAddMoneyResult_result(getAddMoneyResult_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public getAddMoneyResult_result deepCopy() {
            return new getAddMoneyResult_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public getAddMoneyResult_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAddMoneyResult_result)
                return this.equals((getAddMoneyResult_result) that);
            return false;
        }

        public boolean equals(getAddMoneyResult_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getAddMoneyResult_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getAddMoneyResult_result typedOther = (getAddMoneyResult_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAddMoneyResult_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class queryAvailableCoupons_args implements
            TBase<queryAvailableCoupons_args, queryAvailableCoupons_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("queryAvailableCoupons_args");

        private static final TField CRITERIA_FIELD_DESC = new TField("criteria", TType.STRUCT, (short) 1);

        public QueryCriteria criteria;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            CRITERIA((short) 1, "criteria");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CRITERIA
                    return CRITERIA;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CRITERIA, new FieldMetaData("criteria", TFieldRequirementType.DEFAULT,
                    new StructMetaData(TType.STRUCT, QueryCriteria.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(queryAvailableCoupons_args.class, metaDataMap);
        }

        public queryAvailableCoupons_args() {
        }

        public queryAvailableCoupons_args(QueryCriteria criteria) {
            this();
            this.criteria = criteria;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAvailableCoupons_args(queryAvailableCoupons_args other) {
            if (other.isSetCriteria()) {
                this.criteria = new QueryCriteria(other.criteria);
            }
        }

        public queryAvailableCoupons_args deepCopy() {
            return new queryAvailableCoupons_args(this);
        }

        @Override
        public void clear() {
            this.criteria = null;
        }

        public QueryCriteria getCriteria() {
            return this.criteria;
        }

        public queryAvailableCoupons_args setCriteria(QueryCriteria criteria) {
            this.criteria = criteria;
            return this;
        }

        public void unsetCriteria() {
            this.criteria = null;
        }

        /**
         * Returns true if field criteria is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetCriteria() {
            return this.criteria != null;
        }

        public void setCriteriaIsSet(boolean value) {
            if (!value) {
                this.criteria = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case CRITERIA:
                if (value == null) {
                    unsetCriteria();
                } else {
                    setCriteria((QueryCriteria) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CRITERIA:
                return getCriteria();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CRITERIA:
                return isSetCriteria();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAvailableCoupons_args)
                return this.equals((queryAvailableCoupons_args) that);
            return false;
        }

        public boolean equals(queryAvailableCoupons_args that) {
            if (that == null)
                return false;

            boolean this_present_criteria = true && this.isSetCriteria();
            boolean that_present_criteria = true && that.isSetCriteria();
            if (this_present_criteria || that_present_criteria) {
                if (!(this_present_criteria && that_present_criteria))
                    return false;
                if (!this.criteria.equals(that.criteria))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(queryAvailableCoupons_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            queryAvailableCoupons_args typedOther = (queryAvailableCoupons_args) other;

            lastComparison = Boolean.valueOf(isSetCriteria()).compareTo(typedOther.isSetCriteria());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCriteria()) {
                lastComparison = TBaseHelper.compareTo(this.criteria, typedOther.criteria);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // CRITERIA
                    if (field.type == TType.STRUCT) {
                        this.criteria = new QueryCriteria();
                        this.criteria.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.criteria != null) {
                oprot.writeFieldBegin(CRITERIA_FIELD_DESC);
                this.criteria.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAvailableCoupons_args(");
            boolean first = true;

            sb.append("criteria:");
            if (this.criteria == null) {
                sb.append("null");
            } else {
                sb.append(this.criteria);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class queryAvailableCoupons_result implements
            TBase<queryAvailableCoupons_result, queryAvailableCoupons_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("queryAvailableCoupons_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public QueryResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, QueryResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(queryAvailableCoupons_result.class, metaDataMap);
        }

        public queryAvailableCoupons_result() {
        }

        public queryAvailableCoupons_result(QueryResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAvailableCoupons_result(queryAvailableCoupons_result other) {
            if (other.isSetSuccess()) {
                this.success = new QueryResult(other.success);
            }
        }

        public queryAvailableCoupons_result deepCopy() {
            return new queryAvailableCoupons_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public QueryResult getSuccess() {
            return this.success;
        }

        public queryAvailableCoupons_result setSuccess(QueryResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((QueryResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAvailableCoupons_result)
                return this.equals((queryAvailableCoupons_result) that);
            return false;
        }

        public boolean equals(queryAvailableCoupons_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(queryAvailableCoupons_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            queryAvailableCoupons_result typedOther = (queryAvailableCoupons_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new QueryResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAvailableCoupons_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class generateCoupon_args implements TBase<generateCoupon_args, generateCoupon_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("generateCoupon_args");

        private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short) 1);

        public GenerateCouponRequest request;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQUEST((short) 1, "request");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQUEST
                    return REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, GenerateCouponRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(generateCoupon_args.class, metaDataMap);
        }

        public generateCoupon_args() {
        }

        public generateCoupon_args(GenerateCouponRequest request) {
            this();
            this.request = request;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public generateCoupon_args(generateCoupon_args other) {
            if (other.isSetRequest()) {
                this.request = new GenerateCouponRequest(other.request);
            }
        }

        public generateCoupon_args deepCopy() {
            return new generateCoupon_args(this);
        }

        @Override
        public void clear() {
            this.request = null;
        }

        public GenerateCouponRequest getRequest() {
            return this.request;
        }

        public generateCoupon_args setRequest(GenerateCouponRequest request) {
            this.request = request;
            return this;
        }

        public void unsetRequest() {
            this.request = null;
        }

        /**
         * Returns true if field request is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetRequest() {
            return this.request != null;
        }

        public void setRequestIsSet(boolean value) {
            if (!value) {
                this.request = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQUEST:
                if (value == null) {
                    unsetRequest();
                } else {
                    setRequest((GenerateCouponRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQUEST:
                return getRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQUEST:
                return isSetRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof generateCoupon_args)
                return this.equals((generateCoupon_args) that);
            return false;
        }

        public boolean equals(generateCoupon_args that) {
            if (that == null)
                return false;

            boolean this_present_request = true && this.isSetRequest();
            boolean that_present_request = true && that.isSetRequest();
            if (this_present_request || that_present_request) {
                if (!(this_present_request && that_present_request))
                    return false;
                if (!this.request.equals(that.request))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(generateCoupon_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            generateCoupon_args typedOther = (generateCoupon_args) other;

            lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRequest()) {
                lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQUEST
                    if (field.type == TType.STRUCT) {
                        this.request = new GenerateCouponRequest();
                        this.request.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.request != null) {
                oprot.writeFieldBegin(REQUEST_FIELD_DESC);
                this.request.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("generateCoupon_args(");
            boolean first = true;

            sb.append("request:");
            if (this.request == null) {
                sb.append("null");
            } else {
                sb.append(this.request);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class generateCoupon_result implements TBase<generateCoupon_result, generateCoupon_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("generateCoupon_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(generateCoupon_result.class, metaDataMap);
        }

        public generateCoupon_result() {
        }

        public generateCoupon_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public generateCoupon_result(generateCoupon_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public generateCoupon_result deepCopy() {
            return new generateCoupon_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public generateCoupon_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof generateCoupon_result)
                return this.equals((generateCoupon_result) that);
            return false;
        }

        public boolean equals(generateCoupon_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(generateCoupon_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            generateCoupon_result typedOther = (generateCoupon_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("generateCoupon_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class activeCoupon_args implements TBase<activeCoupon_args, activeCoupon_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("activeCoupon_args");

        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 1);
        private static final TField gbUID_FIELD_DESC = new TField("gbuid", TType.I64, (short) 2);
        private static final TField COUPON_CODE_FIELD_DESC = new TField("couponCode", TType.STRING, (short) 3);
        private static final TField USE_END_TIME_FIELD_DESC = new TField("useEndTime", TType.STRING, (short) 4);
        private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 5);

        public String product;
        public long gbuid;
        public String couponCode;
        public String useEndTime;
        public String sign;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            PRODUCT((short) 1, "product"), gbUID((short) 2, "gbuid"), COUPON_CODE((short) 3, "couponCode"), USE_END_TIME(
                    (short) 4, "useEndTime"), SIGN((short) 5, "sign");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // PRODUCT
                    return PRODUCT;
                case 2: // gbUID
                    return gbUID;
                case 3: // COUPON_CODE
                    return COUPON_CODE;
                case 4: // USE_END_TIME
                    return USE_END_TIME;
                case 5: // SIGN
                    return SIGN;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __gbUID_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.gbUID, new FieldMetaData("gbuid", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.I64)));
            tmpMap.put(_Fields.COUPON_CODE, new FieldMetaData("couponCode", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.USE_END_TIME, new FieldMetaData("useEndTime", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(activeCoupon_args.class, metaDataMap);
        }

        public activeCoupon_args() {
        }

        public activeCoupon_args(String product, long gbuid, String couponCode, String useEndTime, String sign) {
            this();
            this.product = product;
            this.gbuid = gbuid;
            setgbuidIsSet(true);
            this.couponCode = couponCode;
            this.useEndTime = useEndTime;
            this.sign = sign;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public activeCoupon_args(activeCoupon_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            this.gbuid = other.gbuid;
            if (other.isSetCouponCode()) {
                this.couponCode = other.couponCode;
            }
            if (other.isSetUseEndTime()) {
                this.useEndTime = other.useEndTime;
            }
            if (other.isSetSign()) {
                this.sign = other.sign;
            }
        }

        public activeCoupon_args deepCopy() {
            return new activeCoupon_args(this);
        }

        @Override
        public void clear() {
            this.product = null;
            setgbuidIsSet(false);
            this.gbuid = 0;
            this.couponCode = null;
            this.useEndTime = null;
            this.sign = null;
        }

        public String getProduct() {
            return this.product;
        }

        public activeCoupon_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public long getgbuid() {
            return this.gbuid;
        }

        public activeCoupon_args setgbuid(long gbuid) {
            this.gbuid = gbuid;
            setgbuidIsSet(true);
            return this;
        }

        public void unsetgbuid() {
            __isset_bit_vector.clear(__gbUID_ISSET_ID);
        }

        /**
         * Returns true if field gbuid is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetgbuid() {
            return __isset_bit_vector.get(__gbUID_ISSET_ID);
        }

        public void setgbuidIsSet(boolean value) {
            __isset_bit_vector.set(__gbUID_ISSET_ID, value);
        }

        public String getCouponCode() {
            return this.couponCode;
        }

        public activeCoupon_args setCouponCode(String couponCode) {
            this.couponCode = couponCode;
            return this;
        }

        public void unsetCouponCode() {
            this.couponCode = null;
        }

        /**
         * Returns true if field couponCode is set (has been asigned a value)
         * and false otherwise
         */
        public boolean isSetCouponCode() {
            return this.couponCode != null;
        }

        public void setCouponCodeIsSet(boolean value) {
            if (!value) {
                this.couponCode = null;
            }
        }

        public String getUseEndTime() {
            return this.useEndTime;
        }

        public activeCoupon_args setUseEndTime(String useEndTime) {
            this.useEndTime = useEndTime;
            return this;
        }

        public void unsetUseEndTime() {
            this.useEndTime = null;
        }

        /**
         * Returns true if field useEndTime is set (has been asigned a value)
         * and false otherwise
         */
        public boolean isSetUseEndTime() {
            return this.useEndTime != null;
        }

        public void setUseEndTimeIsSet(boolean value) {
            if (!value) {
                this.useEndTime = null;
            }
        }

        public String getSign() {
            return this.sign;
        }

        public activeCoupon_args setSign(String sign) {
            this.sign = sign;
            return this;
        }

        public void unsetSign() {
            this.sign = null;
        }

        /**
         * Returns true if field sign is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSign() {
            return this.sign != null;
        }

        public void setSignIsSet(boolean value) {
            if (!value) {
                this.sign = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case gbUID:
                if (value == null) {
                    unsetgbuid();
                } else {
                    setgbuid((Long) value);
                }
                break;

            case COUPON_CODE:
                if (value == null) {
                    unsetCouponCode();
                } else {
                    setCouponCode((String) value);
                }
                break;

            case USE_END_TIME:
                if (value == null) {
                    unsetUseEndTime();
                } else {
                    setUseEndTime((String) value);
                }
                break;

            case SIGN:
                if (value == null) {
                    unsetSign();
                } else {
                    setSign((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case PRODUCT:
                return getProduct();

            case gbUID:
                return new Long(getgbuid());

            case COUPON_CODE:
                return getCouponCode();

            case USE_END_TIME:
                return getUseEndTime();

            case SIGN:
                return getSign();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case PRODUCT:
                return isSetProduct();
            case gbUID:
                return isSetgbuid();
            case COUPON_CODE:
                return isSetCouponCode();
            case USE_END_TIME:
                return isSetUseEndTime();
            case SIGN:
                return isSetSign();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof activeCoupon_args)
                return this.equals((activeCoupon_args) that);
            return false;
        }

        public boolean equals(activeCoupon_args that) {
            if (that == null)
                return false;

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_gbuid = true;
            boolean that_present_gbuid = true;
            if (this_present_gbuid || that_present_gbuid) {
                if (!(this_present_gbuid && that_present_gbuid))
                    return false;
                if (this.gbuid != that.gbuid)
                    return false;
            }

            boolean this_present_couponCode = true && this.isSetCouponCode();
            boolean that_present_couponCode = true && that.isSetCouponCode();
            if (this_present_couponCode || that_present_couponCode) {
                if (!(this_present_couponCode && that_present_couponCode))
                    return false;
                if (!this.couponCode.equals(that.couponCode))
                    return false;
            }

            boolean this_present_useEndTime = true && this.isSetUseEndTime();
            boolean that_present_useEndTime = true && that.isSetUseEndTime();
            if (this_present_useEndTime || that_present_useEndTime) {
                if (!(this_present_useEndTime && that_present_useEndTime))
                    return false;
                if (!this.useEndTime.equals(that.useEndTime))
                    return false;
            }

            boolean this_present_sign = true && this.isSetSign();
            boolean that_present_sign = true && that.isSetSign();
            if (this_present_sign || that_present_sign) {
                if (!(this_present_sign && that_present_sign))
                    return false;
                if (!this.sign.equals(that.sign))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(activeCoupon_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            activeCoupon_args typedOther = (activeCoupon_args) other;

            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetgbuid()).compareTo(typedOther.isSetgbuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetgbuid()) {
                lastComparison = TBaseHelper.compareTo(this.gbuid, typedOther.gbuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetCouponCode()).compareTo(typedOther.isSetCouponCode());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCouponCode()) {
                lastComparison = TBaseHelper.compareTo(this.couponCode, typedOther.couponCode);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetUseEndTime()).compareTo(typedOther.isSetUseEndTime());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUseEndTime()) {
                lastComparison = TBaseHelper.compareTo(this.useEndTime, typedOther.useEndTime);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSign()) {
                lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // gbUID
                    if (field.type == TType.I64) {
                        this.gbuid = iprot.readI64();
                        setgbuidIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // COUPON_CODE
                    if (field.type == TType.STRING) {
                        this.couponCode = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // USE_END_TIME
                    if (field.type == TType.STRING) {
                        this.useEndTime = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 5: // SIGN
                    if (field.type == TType.STRING) {
                        this.sign = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(gbUID_FIELD_DESC);
            oprot.writeI64(this.gbuid);
            oprot.writeFieldEnd();
            if (this.couponCode != null) {
                oprot.writeFieldBegin(COUPON_CODE_FIELD_DESC);
                oprot.writeString(this.couponCode);
                oprot.writeFieldEnd();
            }
            if (this.useEndTime != null) {
                oprot.writeFieldBegin(USE_END_TIME_FIELD_DESC);
                oprot.writeString(this.useEndTime);
                oprot.writeFieldEnd();
            }
            if (this.sign != null) {
                oprot.writeFieldBegin(SIGN_FIELD_DESC);
                oprot.writeString(this.sign);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("activeCoupon_args(");
            boolean first = true;

            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("gbuid:");
            sb.append(this.gbuid);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("couponCode:");
            if (this.couponCode == null) {
                sb.append("null");
            } else {
                sb.append(this.couponCode);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("useEndTime:");
            if (this.useEndTime == null) {
                sb.append("null");
            } else {
                sb.append(this.useEndTime);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sign:");
            if (this.sign == null) {
                sb.append("null");
            } else {
                sb.append(this.sign);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class activeCoupon_result implements TBase<activeCoupon_result, activeCoupon_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("activeCoupon_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(activeCoupon_result.class, metaDataMap);
        }

        public activeCoupon_result() {
        }

        public activeCoupon_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public activeCoupon_result(activeCoupon_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public activeCoupon_result deepCopy() {
            return new activeCoupon_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public activeCoupon_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof activeCoupon_result)
                return this.equals((activeCoupon_result) that);
            return false;
        }

        public boolean equals(activeCoupon_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(activeCoupon_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            activeCoupon_result typedOther = (activeCoupon_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("activeCoupon_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class useCoupon_args implements TBase<useCoupon_args, useCoupon_args._Fields>, java.io.Serializable,
            Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("useCoupon_args");

        private static final TField USAGE_FIELD_DESC = new TField("usage", TType.STRUCT, (short) 1);

        public CouponUsage usage;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            USAGE((short) 1, "usage");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // USAGE
                    return USAGE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USAGE, new FieldMetaData("usage", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, CouponUsage.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(useCoupon_args.class, metaDataMap);
        }

        public useCoupon_args() {
        }

        public useCoupon_args(CouponUsage usage) {
            this();
            this.usage = usage;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public useCoupon_args(useCoupon_args other) {
            if (other.isSetUsage()) {
                this.usage = new CouponUsage(other.usage);
            }
        }

        public useCoupon_args deepCopy() {
            return new useCoupon_args(this);
        }

        @Override
        public void clear() {
            this.usage = null;
        }

        public CouponUsage getUsage() {
            return this.usage;
        }

        public useCoupon_args setUsage(CouponUsage usage) {
            this.usage = usage;
            return this;
        }

        public void unsetUsage() {
            this.usage = null;
        }

        /**
         * Returns true if field usage is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetUsage() {
            return this.usage != null;
        }

        public void setUsageIsSet(boolean value) {
            if (!value) {
                this.usage = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case USAGE:
                if (value == null) {
                    unsetUsage();
                } else {
                    setUsage((CouponUsage) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case USAGE:
                return getUsage();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case USAGE:
                return isSetUsage();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof useCoupon_args)
                return this.equals((useCoupon_args) that);
            return false;
        }

        public boolean equals(useCoupon_args that) {
            if (that == null)
                return false;

            boolean this_present_usage = true && this.isSetUsage();
            boolean that_present_usage = true && that.isSetUsage();
            if (this_present_usage || that_present_usage) {
                if (!(this_present_usage && that_present_usage))
                    return false;
                if (!this.usage.equals(that.usage))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(useCoupon_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            useCoupon_args typedOther = (useCoupon_args) other;

            lastComparison = Boolean.valueOf(isSetUsage()).compareTo(typedOther.isSetUsage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsage()) {
                lastComparison = TBaseHelper.compareTo(this.usage, typedOther.usage);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // USAGE
                    if (field.type == TType.STRUCT) {
                        this.usage = new CouponUsage();
                        this.usage.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.usage != null) {
                oprot.writeFieldBegin(USAGE_FIELD_DESC);
                this.usage.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("useCoupon_args(");
            boolean first = true;

            sb.append("usage:");
            if (this.usage == null) {
                sb.append("null");
            } else {
                sb.append(this.usage);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class useCoupon_result implements TBase<useCoupon_result, useCoupon_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("useCoupon_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(useCoupon_result.class, metaDataMap);
        }

        public useCoupon_result() {
        }

        public useCoupon_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public useCoupon_result(useCoupon_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public useCoupon_result deepCopy() {
            return new useCoupon_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public useCoupon_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof useCoupon_result)
                return this.equals((useCoupon_result) that);
            return false;
        }

        public boolean equals(useCoupon_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(useCoupon_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            useCoupon_result typedOther = (useCoupon_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("useCoupon_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class lockCoupon_args implements TBase<lockCoupon_args, lockCoupon_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("lockCoupon_args");

        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 1);
        private static final TField gbUID_FIELD_DESC = new TField("gbuid", TType.I64, (short) 2);
        private static final TField COUPON_CODE_FIELD_DESC = new TField("couponCode", TType.STRING, (short) 3);
        private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 4);

        public String product;
        public long gbuid;
        public String couponCode;
        public String sign;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            PRODUCT((short) 1, "product"), gbUID((short) 2, "gbuid"), COUPON_CODE((short) 3, "couponCode"), SIGN(
                    (short) 4, "sign");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // PRODUCT
                    return PRODUCT;
                case 2: // gbUID
                    return gbUID;
                case 3: // COUPON_CODE
                    return COUPON_CODE;
                case 4: // SIGN
                    return SIGN;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __gbUID_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.gbUID, new FieldMetaData("gbuid", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.I64)));
            tmpMap.put(_Fields.COUPON_CODE, new FieldMetaData("couponCode", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(lockCoupon_args.class, metaDataMap);
        }

        public lockCoupon_args() {
        }

        public lockCoupon_args(String product, long gbuid, String couponCode, String sign) {
            this();
            this.product = product;
            this.gbuid = gbuid;
            setgbuidIsSet(true);
            this.couponCode = couponCode;
            this.sign = sign;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public lockCoupon_args(lockCoupon_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            this.gbuid = other.gbuid;
            if (other.isSetCouponCode()) {
                this.couponCode = other.couponCode;
            }
            if (other.isSetSign()) {
                this.sign = other.sign;
            }
        }

        public lockCoupon_args deepCopy() {
            return new lockCoupon_args(this);
        }

        @Override
        public void clear() {
            this.product = null;
            setgbuidIsSet(false);
            this.gbuid = 0;
            this.couponCode = null;
            this.sign = null;
        }

        public String getProduct() {
            return this.product;
        }

        public lockCoupon_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public long getgbuid() {
            return this.gbuid;
        }

        public lockCoupon_args setgbuid(long gbuid) {
            this.gbuid = gbuid;
            setgbuidIsSet(true);
            return this;
        }

        public void unsetgbuid() {
            __isset_bit_vector.clear(__gbUID_ISSET_ID);
        }

        /**
         * Returns true if field gbuid is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetgbuid() {
            return __isset_bit_vector.get(__gbUID_ISSET_ID);
        }

        public void setgbuidIsSet(boolean value) {
            __isset_bit_vector.set(__gbUID_ISSET_ID, value);
        }

        public String getCouponCode() {
            return this.couponCode;
        }

        public lockCoupon_args setCouponCode(String couponCode) {
            this.couponCode = couponCode;
            return this;
        }

        public void unsetCouponCode() {
            this.couponCode = null;
        }

        /**
         * Returns true if field couponCode is set (has been asigned a value)
         * and false otherwise
         */
        public boolean isSetCouponCode() {
            return this.couponCode != null;
        }

        public void setCouponCodeIsSet(boolean value) {
            if (!value) {
                this.couponCode = null;
            }
        }

        public String getSign() {
            return this.sign;
        }

        public lockCoupon_args setSign(String sign) {
            this.sign = sign;
            return this;
        }

        public void unsetSign() {
            this.sign = null;
        }

        /**
         * Returns true if field sign is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSign() {
            return this.sign != null;
        }

        public void setSignIsSet(boolean value) {
            if (!value) {
                this.sign = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case gbUID:
                if (value == null) {
                    unsetgbuid();
                } else {
                    setgbuid((Long) value);
                }
                break;

            case COUPON_CODE:
                if (value == null) {
                    unsetCouponCode();
                } else {
                    setCouponCode((String) value);
                }
                break;

            case SIGN:
                if (value == null) {
                    unsetSign();
                } else {
                    setSign((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case PRODUCT:
                return getProduct();

            case gbUID:
                return new Long(getgbuid());

            case COUPON_CODE:
                return getCouponCode();

            case SIGN:
                return getSign();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case PRODUCT:
                return isSetProduct();
            case gbUID:
                return isSetgbuid();
            case COUPON_CODE:
                return isSetCouponCode();
            case SIGN:
                return isSetSign();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof lockCoupon_args)
                return this.equals((lockCoupon_args) that);
            return false;
        }

        public boolean equals(lockCoupon_args that) {
            if (that == null)
                return false;

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_gbuid = true;
            boolean that_present_gbuid = true;
            if (this_present_gbuid || that_present_gbuid) {
                if (!(this_present_gbuid && that_present_gbuid))
                    return false;
                if (this.gbuid != that.gbuid)
                    return false;
            }

            boolean this_present_couponCode = true && this.isSetCouponCode();
            boolean that_present_couponCode = true && that.isSetCouponCode();
            if (this_present_couponCode || that_present_couponCode) {
                if (!(this_present_couponCode && that_present_couponCode))
                    return false;
                if (!this.couponCode.equals(that.couponCode))
                    return false;
            }

            boolean this_present_sign = true && this.isSetSign();
            boolean that_present_sign = true && that.isSetSign();
            if (this_present_sign || that_present_sign) {
                if (!(this_present_sign && that_present_sign))
                    return false;
                if (!this.sign.equals(that.sign))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(lockCoupon_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            lockCoupon_args typedOther = (lockCoupon_args) other;

            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetgbuid()).compareTo(typedOther.isSetgbuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetgbuid()) {
                lastComparison = TBaseHelper.compareTo(this.gbuid, typedOther.gbuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetCouponCode()).compareTo(typedOther.isSetCouponCode());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCouponCode()) {
                lastComparison = TBaseHelper.compareTo(this.couponCode, typedOther.couponCode);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSign()) {
                lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // gbUID
                    if (field.type == TType.I64) {
                        this.gbuid = iprot.readI64();
                        setgbuidIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // COUPON_CODE
                    if (field.type == TType.STRING) {
                        this.couponCode = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // SIGN
                    if (field.type == TType.STRING) {
                        this.sign = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(gbUID_FIELD_DESC);
            oprot.writeI64(this.gbuid);
            oprot.writeFieldEnd();
            if (this.couponCode != null) {
                oprot.writeFieldBegin(COUPON_CODE_FIELD_DESC);
                oprot.writeString(this.couponCode);
                oprot.writeFieldEnd();
            }
            if (this.sign != null) {
                oprot.writeFieldBegin(SIGN_FIELD_DESC);
                oprot.writeString(this.sign);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("lockCoupon_args(");
            boolean first = true;

            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("gbuid:");
            sb.append(this.gbuid);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("couponCode:");
            if (this.couponCode == null) {
                sb.append("null");
            } else {
                sb.append(this.couponCode);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sign:");
            if (this.sign == null) {
                sb.append("null");
            } else {
                sb.append(this.sign);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class lockCoupon_result implements TBase<lockCoupon_result, lockCoupon_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("lockCoupon_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(lockCoupon_result.class, metaDataMap);
        }

        public lockCoupon_result() {
        }

        public lockCoupon_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public lockCoupon_result(lockCoupon_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public lockCoupon_result deepCopy() {
            return new lockCoupon_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public lockCoupon_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof lockCoupon_result)
                return this.equals((lockCoupon_result) that);
            return false;
        }

        public boolean equals(lockCoupon_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(lockCoupon_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            lockCoupon_result typedOther = (lockCoupon_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("lockCoupon_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class unlockOrUseCoupon_args implements
            TBase<unlockOrUseCoupon_args, unlockOrUseCoupon_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("unlockOrUseCoupon_args");

        private static final TField USAGE_FIELD_DESC = new TField("usage", TType.STRUCT, (short) 1);
        private static final TField BE_USED_FIELD_DESC = new TField("beUsed", TType.BOOL, (short) 2);

        public CouponUsage usage;
        public boolean beUsed;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            USAGE((short) 1, "usage"), BE_USED((short) 2, "beUsed");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // USAGE
                    return USAGE;
                case 2: // BE_USED
                    return BE_USED;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __BEUSED_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USAGE, new FieldMetaData("usage", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, CouponUsage.class)));
            tmpMap.put(_Fields.BE_USED, new FieldMetaData("beUsed", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(unlockOrUseCoupon_args.class, metaDataMap);
        }

        public unlockOrUseCoupon_args() {
        }

        public unlockOrUseCoupon_args(CouponUsage usage, boolean beUsed) {
            this();
            this.usage = usage;
            this.beUsed = beUsed;
            setBeUsedIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public unlockOrUseCoupon_args(unlockOrUseCoupon_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetUsage()) {
                this.usage = new CouponUsage(other.usage);
            }
            this.beUsed = other.beUsed;
        }

        public unlockOrUseCoupon_args deepCopy() {
            return new unlockOrUseCoupon_args(this);
        }

        @Override
        public void clear() {
            this.usage = null;
            setBeUsedIsSet(false);
            this.beUsed = false;
        }

        public CouponUsage getUsage() {
            return this.usage;
        }

        public unlockOrUseCoupon_args setUsage(CouponUsage usage) {
            this.usage = usage;
            return this;
        }

        public void unsetUsage() {
            this.usage = null;
        }

        /**
         * Returns true if field usage is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetUsage() {
            return this.usage != null;
        }

        public void setUsageIsSet(boolean value) {
            if (!value) {
                this.usage = null;
            }
        }

        public boolean isBeUsed() {
            return this.beUsed;
        }

        public unlockOrUseCoupon_args setBeUsed(boolean beUsed) {
            this.beUsed = beUsed;
            setBeUsedIsSet(true);
            return this;
        }

        public void unsetBeUsed() {
            __isset_bit_vector.clear(__BEUSED_ISSET_ID);
        }

        /**
         * Returns true if field beUsed is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetBeUsed() {
            return __isset_bit_vector.get(__BEUSED_ISSET_ID);
        }

        public void setBeUsedIsSet(boolean value) {
            __isset_bit_vector.set(__BEUSED_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case USAGE:
                if (value == null) {
                    unsetUsage();
                } else {
                    setUsage((CouponUsage) value);
                }
                break;

            case BE_USED:
                if (value == null) {
                    unsetBeUsed();
                } else {
                    setBeUsed((Boolean) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case USAGE:
                return getUsage();

            case BE_USED:
                return new Boolean(isBeUsed());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case USAGE:
                return isSetUsage();
            case BE_USED:
                return isSetBeUsed();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof unlockOrUseCoupon_args)
                return this.equals((unlockOrUseCoupon_args) that);
            return false;
        }

        public boolean equals(unlockOrUseCoupon_args that) {
            if (that == null)
                return false;

            boolean this_present_usage = true && this.isSetUsage();
            boolean that_present_usage = true && that.isSetUsage();
            if (this_present_usage || that_present_usage) {
                if (!(this_present_usage && that_present_usage))
                    return false;
                if (!this.usage.equals(that.usage))
                    return false;
            }

            boolean this_present_beUsed = true;
            boolean that_present_beUsed = true;
            if (this_present_beUsed || that_present_beUsed) {
                if (!(this_present_beUsed && that_present_beUsed))
                    return false;
                if (this.beUsed != that.beUsed)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(unlockOrUseCoupon_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            unlockOrUseCoupon_args typedOther = (unlockOrUseCoupon_args) other;

            lastComparison = Boolean.valueOf(isSetUsage()).compareTo(typedOther.isSetUsage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsage()) {
                lastComparison = TBaseHelper.compareTo(this.usage, typedOther.usage);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBeUsed()).compareTo(typedOther.isSetBeUsed());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBeUsed()) {
                lastComparison = TBaseHelper.compareTo(this.beUsed, typedOther.beUsed);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // USAGE
                    if (field.type == TType.STRUCT) {
                        this.usage = new CouponUsage();
                        this.usage.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // BE_USED
                    if (field.type == TType.BOOL) {
                        this.beUsed = iprot.readBool();
                        setBeUsedIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.usage != null) {
                oprot.writeFieldBegin(USAGE_FIELD_DESC);
                this.usage.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(BE_USED_FIELD_DESC);
            oprot.writeBool(this.beUsed);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("unlockOrUseCoupon_args(");
            boolean first = true;

            sb.append("usage:");
            if (this.usage == null) {
                sb.append("null");
            } else {
                sb.append(this.usage);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("beUsed:");
            sb.append(this.beUsed);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class unlockOrUseCoupon_result implements
            TBase<unlockOrUseCoupon_result, unlockOrUseCoupon_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("unlockOrUseCoupon_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(unlockOrUseCoupon_result.class, metaDataMap);
        }

        public unlockOrUseCoupon_result() {
        }

        public unlockOrUseCoupon_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public unlockOrUseCoupon_result(unlockOrUseCoupon_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public unlockOrUseCoupon_result deepCopy() {
            return new unlockOrUseCoupon_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public unlockOrUseCoupon_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof unlockOrUseCoupon_result)
                return this.equals((unlockOrUseCoupon_result) that);
            return false;
        }

        public boolean equals(unlockOrUseCoupon_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(unlockOrUseCoupon_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            unlockOrUseCoupon_result typedOther = (unlockOrUseCoupon_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("unlockOrUseCoupon_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getCouponInfo_args implements TBase<getCouponInfo_args, getCouponInfo_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getCouponInfo_args");

        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 1);
        private static final TField gbUID_FIELD_DESC = new TField("gbuid", TType.I64, (short) 2);
        private static final TField COUPON_CODE_FIELD_DESC = new TField("couponCode", TType.STRING, (short) 3);

        public String product;
        public long gbuid;
        public String couponCode;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            PRODUCT((short) 1, "product"), gbUID((short) 2, "gbuid"), COUPON_CODE((short) 3, "couponCode");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // PRODUCT
                    return PRODUCT;
                case 2: // gbUID
                    return gbUID;
                case 3: // COUPON_CODE
                    return COUPON_CODE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __gbUID_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.gbUID, new FieldMetaData("gbuid", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.I64)));
            tmpMap.put(_Fields.COUPON_CODE, new FieldMetaData("couponCode", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getCouponInfo_args.class, metaDataMap);
        }

        public getCouponInfo_args() {
        }

        public getCouponInfo_args(String product, long gbuid, String couponCode) {
            this();
            this.product = product;
            this.gbuid = gbuid;
            setgbuidIsSet(true);
            this.couponCode = couponCode;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCouponInfo_args(getCouponInfo_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            this.gbuid = other.gbuid;
            if (other.isSetCouponCode()) {
                this.couponCode = other.couponCode;
            }
        }

        public getCouponInfo_args deepCopy() {
            return new getCouponInfo_args(this);
        }

        @Override
        public void clear() {
            this.product = null;
            setgbuidIsSet(false);
            this.gbuid = 0;
            this.couponCode = null;
        }

        public String getProduct() {
            return this.product;
        }

        public getCouponInfo_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public long getgbuid() {
            return this.gbuid;
        }

        public getCouponInfo_args setgbuid(long gbuid) {
            this.gbuid = gbuid;
            setgbuidIsSet(true);
            return this;
        }

        public void unsetgbuid() {
            __isset_bit_vector.clear(__gbUID_ISSET_ID);
        }

        /**
         * Returns true if field gbuid is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetgbuid() {
            return __isset_bit_vector.get(__gbUID_ISSET_ID);
        }

        public void setgbuidIsSet(boolean value) {
            __isset_bit_vector.set(__gbUID_ISSET_ID, value);
        }

        public String getCouponCode() {
            return this.couponCode;
        }

        public getCouponInfo_args setCouponCode(String couponCode) {
            this.couponCode = couponCode;
            return this;
        }

        public void unsetCouponCode() {
            this.couponCode = null;
        }

        /**
         * Returns true if field couponCode is set (has been asigned a value)
         * and false otherwise
         */
        public boolean isSetCouponCode() {
            return this.couponCode != null;
        }

        public void setCouponCodeIsSet(boolean value) {
            if (!value) {
                this.couponCode = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case gbUID:
                if (value == null) {
                    unsetgbuid();
                } else {
                    setgbuid((Long) value);
                }
                break;

            case COUPON_CODE:
                if (value == null) {
                    unsetCouponCode();
                } else {
                    setCouponCode((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case PRODUCT:
                return getProduct();

            case gbUID:
                return new Long(getgbuid());

            case COUPON_CODE:
                return getCouponCode();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case PRODUCT:
                return isSetProduct();
            case gbUID:
                return isSetgbuid();
            case COUPON_CODE:
                return isSetCouponCode();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getCouponInfo_args)
                return this.equals((getCouponInfo_args) that);
            return false;
        }

        public boolean equals(getCouponInfo_args that) {
            if (that == null)
                return false;

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_gbuid = true;
            boolean that_present_gbuid = true;
            if (this_present_gbuid || that_present_gbuid) {
                if (!(this_present_gbuid && that_present_gbuid))
                    return false;
                if (this.gbuid != that.gbuid)
                    return false;
            }

            boolean this_present_couponCode = true && this.isSetCouponCode();
            boolean that_present_couponCode = true && that.isSetCouponCode();
            if (this_present_couponCode || that_present_couponCode) {
                if (!(this_present_couponCode && that_present_couponCode))
                    return false;
                if (!this.couponCode.equals(that.couponCode))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getCouponInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getCouponInfo_args typedOther = (getCouponInfo_args) other;

            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetgbuid()).compareTo(typedOther.isSetgbuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetgbuid()) {
                lastComparison = TBaseHelper.compareTo(this.gbuid, typedOther.gbuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetCouponCode()).compareTo(typedOther.isSetCouponCode());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCouponCode()) {
                lastComparison = TBaseHelper.compareTo(this.couponCode, typedOther.couponCode);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // gbUID
                    if (field.type == TType.I64) {
                        this.gbuid = iprot.readI64();
                        setgbuidIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // COUPON_CODE
                    if (field.type == TType.STRING) {
                        this.couponCode = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(gbUID_FIELD_DESC);
            oprot.writeI64(this.gbuid);
            oprot.writeFieldEnd();
            if (this.couponCode != null) {
                oprot.writeFieldBegin(COUPON_CODE_FIELD_DESC);
                oprot.writeString(this.couponCode);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getCouponInfo_args(");
            boolean first = true;

            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("gbuid:");
            sb.append(this.gbuid);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("couponCode:");
            if (this.couponCode == null) {
                sb.append("null");
            } else {
                sb.append(this.couponCode);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getCouponInfo_result implements TBase<getCouponInfo_result, getCouponInfo_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getCouponInfo_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getCouponInfo_result.class, metaDataMap);
        }

        public getCouponInfo_result() {
        }

        public getCouponInfo_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCouponInfo_result(getCouponInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public getCouponInfo_result deepCopy() {
            return new getCouponInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public getCouponInfo_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getCouponInfo_result)
                return this.equals((getCouponInfo_result) that);
            return false;
        }

        public boolean equals(getCouponInfo_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getCouponInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getCouponInfo_result typedOther = (getCouponInfo_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getCouponInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class freezeCoupon_args implements TBase<freezeCoupon_args, freezeCoupon_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("freezeCoupon_args");

        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 1);
        private static final TField BATCH_ID_FIELD_DESC = new TField("batchId", TType.STRING, (short) 2);
        private static final TField COUPON_ID_LIST_FIELD_DESC = new TField("couponIdList", TType.LIST, (short) 3);
        private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 4);

        public String product;
        public String batchId;
        public List<String> couponIdList;
        public String sign;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            PRODUCT((short) 1, "product"), BATCH_ID((short) 2, "batchId"), COUPON_ID_LIST((short) 3, "couponIdList"), SIGN(
                    (short) 4, "sign");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // PRODUCT
                    return PRODUCT;
                case 2: // BATCH_ID
                    return BATCH_ID;
                case 3: // COUPON_ID_LIST
                    return COUPON_ID_LIST;
                case 4: // SIGN
                    return SIGN;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.BATCH_ID, new FieldMetaData("batchId", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.COUPON_ID_LIST, new FieldMetaData("couponIdList", TFieldRequirementType.DEFAULT,
                    new ListMetaData(TType.LIST, new FieldValueMetaData(TType.STRING))));
            tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(freezeCoupon_args.class, metaDataMap);
        }

        public freezeCoupon_args() {
        }

        public freezeCoupon_args(String product, String batchId, List<String> couponIdList, String sign) {
            this();
            this.product = product;
            this.batchId = batchId;
            this.couponIdList = couponIdList;
            this.sign = sign;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public freezeCoupon_args(freezeCoupon_args other) {
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            if (other.isSetBatchId()) {
                this.batchId = other.batchId;
            }
            if (other.isSetCouponIdList()) {
                List<String> __this__couponIdList = new ArrayList<String>();
                for (String other_element : other.couponIdList) {
                    __this__couponIdList.add(other_element);
                }
                this.couponIdList = __this__couponIdList;
            }
            if (other.isSetSign()) {
                this.sign = other.sign;
            }
        }

        public freezeCoupon_args deepCopy() {
            return new freezeCoupon_args(this);
        }

        @Override
        public void clear() {
            this.product = null;
            this.batchId = null;
            this.couponIdList = null;
            this.sign = null;
        }

        public String getProduct() {
            return this.product;
        }

        public freezeCoupon_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public String getBatchId() {
            return this.batchId;
        }

        public freezeCoupon_args setBatchId(String batchId) {
            this.batchId = batchId;
            return this;
        }

        public void unsetBatchId() {
            this.batchId = null;
        }

        /**
         * Returns true if field batchId is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetBatchId() {
            return this.batchId != null;
        }

        public void setBatchIdIsSet(boolean value) {
            if (!value) {
                this.batchId = null;
            }
        }

        public int getCouponIdListSize() {
            return (this.couponIdList == null) ? 0 : this.couponIdList.size();
        }

        public java.util.Iterator<String> getCouponIdListIterator() {
            return (this.couponIdList == null) ? null : this.couponIdList.iterator();
        }

        public void addToCouponIdList(String elem) {
            if (this.couponIdList == null) {
                this.couponIdList = new ArrayList<String>();
            }
            this.couponIdList.add(elem);
        }

        public List<String> getCouponIdList() {
            return this.couponIdList;
        }

        public freezeCoupon_args setCouponIdList(List<String> couponIdList) {
            this.couponIdList = couponIdList;
            return this;
        }

        public void unsetCouponIdList() {
            this.couponIdList = null;
        }

        /**
         * Returns true if field couponIdList is set (has been asigned a value)
         * and false otherwise
         */
        public boolean isSetCouponIdList() {
            return this.couponIdList != null;
        }

        public void setCouponIdListIsSet(boolean value) {
            if (!value) {
                this.couponIdList = null;
            }
        }

        public String getSign() {
            return this.sign;
        }

        public freezeCoupon_args setSign(String sign) {
            this.sign = sign;
            return this;
        }

        public void unsetSign() {
            this.sign = null;
        }

        /**
         * Returns true if field sign is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSign() {
            return this.sign != null;
        }

        public void setSignIsSet(boolean value) {
            if (!value) {
                this.sign = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case BATCH_ID:
                if (value == null) {
                    unsetBatchId();
                } else {
                    setBatchId((String) value);
                }
                break;

            case COUPON_ID_LIST:
                if (value == null) {
                    unsetCouponIdList();
                } else {
                    setCouponIdList((List<String>) value);
                }
                break;

            case SIGN:
                if (value == null) {
                    unsetSign();
                } else {
                    setSign((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case PRODUCT:
                return getProduct();

            case BATCH_ID:
                return getBatchId();

            case COUPON_ID_LIST:
                return getCouponIdList();

            case SIGN:
                return getSign();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case PRODUCT:
                return isSetProduct();
            case BATCH_ID:
                return isSetBatchId();
            case COUPON_ID_LIST:
                return isSetCouponIdList();
            case SIGN:
                return isSetSign();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof freezeCoupon_args)
                return this.equals((freezeCoupon_args) that);
            return false;
        }

        public boolean equals(freezeCoupon_args that) {
            if (that == null)
                return false;

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_batchId = true && this.isSetBatchId();
            boolean that_present_batchId = true && that.isSetBatchId();
            if (this_present_batchId || that_present_batchId) {
                if (!(this_present_batchId && that_present_batchId))
                    return false;
                if (!this.batchId.equals(that.batchId))
                    return false;
            }

            boolean this_present_couponIdList = true && this.isSetCouponIdList();
            boolean that_present_couponIdList = true && that.isSetCouponIdList();
            if (this_present_couponIdList || that_present_couponIdList) {
                if (!(this_present_couponIdList && that_present_couponIdList))
                    return false;
                if (!this.couponIdList.equals(that.couponIdList))
                    return false;
            }

            boolean this_present_sign = true && this.isSetSign();
            boolean that_present_sign = true && that.isSetSign();
            if (this_present_sign || that_present_sign) {
                if (!(this_present_sign && that_present_sign))
                    return false;
                if (!this.sign.equals(that.sign))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(freezeCoupon_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            freezeCoupon_args typedOther = (freezeCoupon_args) other;

            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBatchId()).compareTo(typedOther.isSetBatchId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBatchId()) {
                lastComparison = TBaseHelper.compareTo(this.batchId, typedOther.batchId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetCouponIdList()).compareTo(typedOther.isSetCouponIdList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCouponIdList()) {
                lastComparison = TBaseHelper.compareTo(this.couponIdList, typedOther.couponIdList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSign()) {
                lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // BATCH_ID
                    if (field.type == TType.STRING) {
                        this.batchId = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // COUPON_ID_LIST
                    if (field.type == TType.LIST) {
                        {
                            TList _list8 = iprot.readListBegin();
                            this.couponIdList = new ArrayList<String>(_list8.size);
                            for (int _i9 = 0; _i9 < _list8.size; ++_i9) {
                                String _elem10;
                                _elem10 = iprot.readString();
                                this.couponIdList.add(_elem10);
                            }
                            iprot.readListEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // SIGN
                    if (field.type == TType.STRING) {
                        this.sign = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            if (this.batchId != null) {
                oprot.writeFieldBegin(BATCH_ID_FIELD_DESC);
                oprot.writeString(this.batchId);
                oprot.writeFieldEnd();
            }
            if (this.couponIdList != null) {
                oprot.writeFieldBegin(COUPON_ID_LIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new TList(TType.STRING, this.couponIdList.size()));
                    for (String _iter11 : this.couponIdList) {
                        oprot.writeString(_iter11);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (this.sign != null) {
                oprot.writeFieldBegin(SIGN_FIELD_DESC);
                oprot.writeString(this.sign);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("freezeCoupon_args(");
            boolean first = true;

            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("batchId:");
            if (this.batchId == null) {
                sb.append("null");
            } else {
                sb.append(this.batchId);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("couponIdList:");
            if (this.couponIdList == null) {
                sb.append("null");
            } else {
                sb.append(this.couponIdList);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sign:");
            if (this.sign == null) {
                sb.append("null");
            } else {
                sb.append(this.sign);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class freezeCoupon_result implements TBase<freezeCoupon_result, freezeCoupon_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("freezeCoupon_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(freezeCoupon_result.class, metaDataMap);
        }

        public freezeCoupon_result() {
        }

        public freezeCoupon_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public freezeCoupon_result(freezeCoupon_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public freezeCoupon_result deepCopy() {
            return new freezeCoupon_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public freezeCoupon_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof freezeCoupon_result)
                return this.equals((freezeCoupon_result) that);
            return false;
        }

        public boolean equals(freezeCoupon_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(freezeCoupon_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            freezeCoupon_result typedOther = (freezeCoupon_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("freezeCoupon_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getPayPasswordSettings_args implements
            TBase<getPayPasswordSettings_args, getPayPasswordSettings_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getPayPasswordSettings_args");

        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 1);
        private static final TField gbUID_FIELD_DESC = new TField("gbuid", TType.I64, (short) 2);

        public String product;
        public long gbuid;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            PRODUCT((short) 1, "product"), gbUID((short) 2, "gbuid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // PRODUCT
                    return PRODUCT;
                case 2: // gbUID
                    return gbUID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __gbUID_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.gbUID, new FieldMetaData("gbuid", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getPayPasswordSettings_args.class, metaDataMap);
        }

        public getPayPasswordSettings_args() {
        }

        public getPayPasswordSettings_args(String product, long gbuid) {
            this();
            this.product = product;
            this.gbuid = gbuid;
            setgbuidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPayPasswordSettings_args(getPayPasswordSettings_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            this.gbuid = other.gbuid;
        }

        public getPayPasswordSettings_args deepCopy() {
            return new getPayPasswordSettings_args(this);
        }

        @Override
        public void clear() {
            this.product = null;
            setgbuidIsSet(false);
            this.gbuid = 0;
        }

        public String getProduct() {
            return this.product;
        }

        public getPayPasswordSettings_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public long getgbuid() {
            return this.gbuid;
        }

        public getPayPasswordSettings_args setgbuid(long gbuid) {
            this.gbuid = gbuid;
            setgbuidIsSet(true);
            return this;
        }

        public void unsetgbuid() {
            __isset_bit_vector.clear(__gbUID_ISSET_ID);
        }

        /**
         * Returns true if field gbuid is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetgbuid() {
            return __isset_bit_vector.get(__gbUID_ISSET_ID);
        }

        public void setgbuidIsSet(boolean value) {
            __isset_bit_vector.set(__gbUID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case gbUID:
                if (value == null) {
                    unsetgbuid();
                } else {
                    setgbuid((Long) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case PRODUCT:
                return getProduct();

            case gbUID:
                return new Long(getgbuid());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case PRODUCT:
                return isSetProduct();
            case gbUID:
                return isSetgbuid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPayPasswordSettings_args)
                return this.equals((getPayPasswordSettings_args) that);
            return false;
        }

        public boolean equals(getPayPasswordSettings_args that) {
            if (that == null)
                return false;

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_gbuid = true;
            boolean that_present_gbuid = true;
            if (this_present_gbuid || that_present_gbuid) {
                if (!(this_present_gbuid && that_present_gbuid))
                    return false;
                if (this.gbuid != that.gbuid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getPayPasswordSettings_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getPayPasswordSettings_args typedOther = (getPayPasswordSettings_args) other;

            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetgbuid()).compareTo(typedOther.isSetgbuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetgbuid()) {
                lastComparison = TBaseHelper.compareTo(this.gbuid, typedOther.gbuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // gbUID
                    if (field.type == TType.I64) {
                        this.gbuid = iprot.readI64();
                        setgbuidIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(gbUID_FIELD_DESC);
            oprot.writeI64(this.gbuid);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPayPasswordSettings_args(");
            boolean first = true;

            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("gbuid:");
            sb.append(this.gbuid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getPayPasswordSettings_result implements
            TBase<getPayPasswordSettings_result, getPayPasswordSettings_result._Fields>, java.io.Serializable,
            Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getPayPasswordSettings_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getPayPasswordSettings_result.class, metaDataMap);
        }

        public getPayPasswordSettings_result() {
        }

        public getPayPasswordSettings_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPayPasswordSettings_result(getPayPasswordSettings_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public getPayPasswordSettings_result deepCopy() {
            return new getPayPasswordSettings_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public getPayPasswordSettings_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPayPasswordSettings_result)
                return this.equals((getPayPasswordSettings_result) that);
            return false;
        }

        public boolean equals(getPayPasswordSettings_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getPayPasswordSettings_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getPayPasswordSettings_result typedOther = (getPayPasswordSettings_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPayPasswordSettings_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class verifyPassword_args implements TBase<verifyPassword_args, verifyPassword_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("verifyPassword_args");

        private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 1);
        private static final TField gbUID_FIELD_DESC = new TField("gbuid", TType.I64, (short) 2);
        private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short) 3);
        private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 4);

        public String product;
        public long gbuid;
        public String password;
        public String sign;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            PRODUCT((short) 1, "product"), gbUID((short) 2, "gbuid"), PASSWORD((short) 3, "password"), SIGN((short) 4,
                    "sign");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // PRODUCT
                    return PRODUCT;
                case 2: // gbUID
                    return gbUID;
                case 3: // PASSWORD
                    return PASSWORD;
                case 4: // SIGN
                    return SIGN;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __gbUID_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.gbUID, new FieldMetaData("gbuid", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.I64)));
            tmpMap.put(_Fields.PASSWORD, new FieldMetaData("password", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                    TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(verifyPassword_args.class, metaDataMap);
        }

        public verifyPassword_args() {
        }

        public verifyPassword_args(String product, long gbuid, String password, String sign) {
            this();
            this.product = product;
            this.gbuid = gbuid;
            setgbuidIsSet(true);
            this.password = password;
            this.sign = sign;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public verifyPassword_args(verifyPassword_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetProduct()) {
                this.product = other.product;
            }
            this.gbuid = other.gbuid;
            if (other.isSetPassword()) {
                this.password = other.password;
            }
            if (other.isSetSign()) {
                this.sign = other.sign;
            }
        }

        public verifyPassword_args deepCopy() {
            return new verifyPassword_args(this);
        }

        @Override
        public void clear() {
            this.product = null;
            setgbuidIsSet(false);
            this.gbuid = 0;
            this.password = null;
            this.sign = null;
        }

        public String getProduct() {
            return this.product;
        }

        public verifyPassword_args setProduct(String product) {
            this.product = product;
            return this;
        }

        public void unsetProduct() {
            this.product = null;
        }

        /**
         * Returns true if field product is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetProduct() {
            return this.product != null;
        }

        public void setProductIsSet(boolean value) {
            if (!value) {
                this.product = null;
            }
        }

        public long getgbuid() {
            return this.gbuid;
        }

        public verifyPassword_args setgbuid(long gbuid) {
            this.gbuid = gbuid;
            setgbuidIsSet(true);
            return this;
        }

        public void unsetgbuid() {
            __isset_bit_vector.clear(__gbUID_ISSET_ID);
        }

        /**
         * Returns true if field gbuid is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetgbuid() {
            return __isset_bit_vector.get(__gbUID_ISSET_ID);
        }

        public void setgbuidIsSet(boolean value) {
            __isset_bit_vector.set(__gbUID_ISSET_ID, value);
        }

        public String getPassword() {
            return this.password;
        }

        public verifyPassword_args setPassword(String password) {
            this.password = password;
            return this;
        }

        public void unsetPassword() {
            this.password = null;
        }

        /**
         * Returns true if field password is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetPassword() {
            return this.password != null;
        }

        public void setPasswordIsSet(boolean value) {
            if (!value) {
                this.password = null;
            }
        }

        public String getSign() {
            return this.sign;
        }

        public verifyPassword_args setSign(String sign) {
            this.sign = sign;
            return this;
        }

        public void unsetSign() {
            this.sign = null;
        }

        /**
         * Returns true if field sign is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSign() {
            return this.sign != null;
        }

        public void setSignIsSet(boolean value) {
            if (!value) {
                this.sign = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case PRODUCT:
                if (value == null) {
                    unsetProduct();
                } else {
                    setProduct((String) value);
                }
                break;

            case gbUID:
                if (value == null) {
                    unsetgbuid();
                } else {
                    setgbuid((Long) value);
                }
                break;

            case PASSWORD:
                if (value == null) {
                    unsetPassword();
                } else {
                    setPassword((String) value);
                }
                break;

            case SIGN:
                if (value == null) {
                    unsetSign();
                } else {
                    setSign((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case PRODUCT:
                return getProduct();

            case gbUID:
                return new Long(getgbuid());

            case PASSWORD:
                return getPassword();

            case SIGN:
                return getSign();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case PRODUCT:
                return isSetProduct();
            case gbUID:
                return isSetgbuid();
            case PASSWORD:
                return isSetPassword();
            case SIGN:
                return isSetSign();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof verifyPassword_args)
                return this.equals((verifyPassword_args) that);
            return false;
        }

        public boolean equals(verifyPassword_args that) {
            if (that == null)
                return false;

            boolean this_present_product = true && this.isSetProduct();
            boolean that_present_product = true && that.isSetProduct();
            if (this_present_product || that_present_product) {
                if (!(this_present_product && that_present_product))
                    return false;
                if (!this.product.equals(that.product))
                    return false;
            }

            boolean this_present_gbuid = true;
            boolean that_present_gbuid = true;
            if (this_present_gbuid || that_present_gbuid) {
                if (!(this_present_gbuid && that_present_gbuid))
                    return false;
                if (this.gbuid != that.gbuid)
                    return false;
            }

            boolean this_present_password = true && this.isSetPassword();
            boolean that_present_password = true && that.isSetPassword();
            if (this_present_password || that_present_password) {
                if (!(this_present_password && that_present_password))
                    return false;
                if (!this.password.equals(that.password))
                    return false;
            }

            boolean this_present_sign = true && this.isSetSign();
            boolean that_present_sign = true && that.isSetSign();
            if (this_present_sign || that_present_sign) {
                if (!(this_present_sign && that_present_sign))
                    return false;
                if (!this.sign.equals(that.sign))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(verifyPassword_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            verifyPassword_args typedOther = (verifyPassword_args) other;

            lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProduct()) {
                lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetgbuid()).compareTo(typedOther.isSetgbuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetgbuid()) {
                lastComparison = TBaseHelper.compareTo(this.gbuid, typedOther.gbuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPassword()) {
                lastComparison = TBaseHelper.compareTo(this.password, typedOther.password);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSign()) {
                lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // PRODUCT
                    if (field.type == TType.STRING) {
                        this.product = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // gbUID
                    if (field.type == TType.I64) {
                        this.gbuid = iprot.readI64();
                        setgbuidIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // PASSWORD
                    if (field.type == TType.STRING) {
                        this.password = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // SIGN
                    if (field.type == TType.STRING) {
                        this.sign = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.product != null) {
                oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
                oprot.writeString(this.product);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(gbUID_FIELD_DESC);
            oprot.writeI64(this.gbuid);
            oprot.writeFieldEnd();
            if (this.password != null) {
                oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
                oprot.writeString(this.password);
                oprot.writeFieldEnd();
            }
            if (this.sign != null) {
                oprot.writeFieldBegin(SIGN_FIELD_DESC);
                oprot.writeString(this.sign);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("verifyPassword_args(");
            boolean first = true;

            sb.append("product:");
            if (this.product == null) {
                sb.append("null");
            } else {
                sb.append(this.product);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("gbuid:");
            sb.append(this.gbuid);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("password:");
            if (this.password == null) {
                sb.append("null");
            } else {
                sb.append(this.password);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sign:");
            if (this.sign == null) {
                sb.append("null");
            } else {
                sb.append(this.sign);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class verifyPassword_result implements TBase<verifyPassword_result, verifyPassword_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("verifyPassword_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(verifyPassword_result.class, metaDataMap);
        }

        public verifyPassword_result() {
        }

        public verifyPassword_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public verifyPassword_result(verifyPassword_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public verifyPassword_result deepCopy() {
            return new verifyPassword_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public verifyPassword_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof verifyPassword_result)
                return this.equals((verifyPassword_result) that);
            return false;
        }

        public boolean equals(verifyPassword_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(verifyPassword_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            verifyPassword_result typedOther = (verifyPassword_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("verifyPassword_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class ping_args implements TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("ping_args");

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
        }

        public ping_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ping_args(ping_args other) {
        }

        public ping_args deepCopy() {
            return new ping_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof ping_args)
                return this.equals((ping_args) that);
            return false;
        }

        public boolean equals(ping_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(ping_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            ping_args typedOther = (ping_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("ping_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class ping_result implements TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("ping_result");

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
        }

        public ping_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ping_result(ping_result other) {
        }

        public ping_result deepCopy() {
            return new ping_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof ping_result)
                return this.equals((ping_result) that);
            return false;
        }

        public boolean equals(ping_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(ping_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            ping_result typedOther = (ping_result) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("ping_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getgbChannelBalance_args implements
            TBase<getgbChannelBalance_args, getgbChannelBalance_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getgbChannelBalance_args");

        private static final TField REQ_FIELD_DESC = new TField("req", TType.STRUCT, (short) 1);

        public GetgbChannelBalanceRequest req;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQ((short) 1, "req");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQ
                    return REQ;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQ, new FieldMetaData("req", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, GetgbChannelBalanceRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getgbChannelBalance_args.class, metaDataMap);
        }

        public getgbChannelBalance_args() {
        }

        public getgbChannelBalance_args(GetgbChannelBalanceRequest req) {
            this();
            this.req = req;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getgbChannelBalance_args(getgbChannelBalance_args other) {
            if (other.isSetReq()) {
                this.req = new GetgbChannelBalanceRequest(other.req);
            }
        }

        public getgbChannelBalance_args deepCopy() {
            return new getgbChannelBalance_args(this);
        }

        @Override
        public void clear() {
            this.req = null;
        }

        public GetgbChannelBalanceRequest getReq() {
            return this.req;
        }

        public getgbChannelBalance_args setReq(GetgbChannelBalanceRequest req) {
            this.req = req;
            return this;
        }

        public void unsetReq() {
            this.req = null;
        }

        /**
         * Returns true if field req is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetReq() {
            return this.req != null;
        }

        public void setReqIsSet(boolean value) {
            if (!value) {
                this.req = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQ:
                if (value == null) {
                    unsetReq();
                } else {
                    setReq((GetgbChannelBalanceRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQ:
                return getReq();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQ:
                return isSetReq();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getgbChannelBalance_args)
                return this.equals((getgbChannelBalance_args) that);
            return false;
        }

        public boolean equals(getgbChannelBalance_args that) {
            if (that == null)
                return false;

            boolean this_present_req = true && this.isSetReq();
            boolean that_present_req = true && that.isSetReq();
            if (this_present_req || that_present_req) {
                if (!(this_present_req && that_present_req))
                    return false;
                if (!this.req.equals(that.req))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getgbChannelBalance_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getgbChannelBalance_args typedOther = (getgbChannelBalance_args) other;

            lastComparison = Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReq()) {
                lastComparison = TBaseHelper.compareTo(this.req, typedOther.req);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQ
                    if (field.type == TType.STRUCT) {
                        this.req = new GetgbChannelBalanceRequest();
                        this.req.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.req != null) {
                oprot.writeFieldBegin(REQ_FIELD_DESC);
                this.req.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getgbChannelBalance_args(");
            boolean first = true;

            sb.append("req:");
            if (this.req == null) {
                sb.append("null");
            } else {
                sb.append(this.req);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getgbChannelBalance_result implements
            TBase<getgbChannelBalance_result, getgbChannelBalance_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getgbChannelBalance_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getgbChannelBalance_result.class, metaDataMap);
        }

        public getgbChannelBalance_result() {
        }

        public getgbChannelBalance_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getgbChannelBalance_result(getgbChannelBalance_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public getgbChannelBalance_result deepCopy() {
            return new getgbChannelBalance_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public getgbChannelBalance_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getgbChannelBalance_result)
                return this.equals((getgbChannelBalance_result) that);
            return false;
        }

        public boolean equals(getgbChannelBalance_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getgbChannelBalance_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getgbChannelBalance_result typedOther = (getgbChannelBalance_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getgbChannelBalance_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class addgbChannelMoney_args implements
            TBase<addgbChannelMoney_args, addgbChannelMoney_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("addgbChannelMoney_args");

        private static final TField REQ_FIELD_DESC = new TField("req", TType.STRUCT, (short) 1);

        public AddgbChannelMoneyRequest req;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQ((short) 1, "req");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQ
                    return REQ;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQ, new FieldMetaData("req", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, AddgbChannelMoneyRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(addgbChannelMoney_args.class, metaDataMap);
        }

        public addgbChannelMoney_args() {
        }

        public addgbChannelMoney_args(AddgbChannelMoneyRequest req) {
            this();
            this.req = req;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addgbChannelMoney_args(addgbChannelMoney_args other) {
            if (other.isSetReq()) {
                this.req = new AddgbChannelMoneyRequest(other.req);
            }
        }

        public addgbChannelMoney_args deepCopy() {
            return new addgbChannelMoney_args(this);
        }

        @Override
        public void clear() {
            this.req = null;
        }

        public AddgbChannelMoneyRequest getReq() {
            return this.req;
        }

        public addgbChannelMoney_args setReq(AddgbChannelMoneyRequest req) {
            this.req = req;
            return this;
        }

        public void unsetReq() {
            this.req = null;
        }

        /**
         * Returns true if field req is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetReq() {
            return this.req != null;
        }

        public void setReqIsSet(boolean value) {
            if (!value) {
                this.req = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQ:
                if (value == null) {
                    unsetReq();
                } else {
                    setReq((AddgbChannelMoneyRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQ:
                return getReq();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQ:
                return isSetReq();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addgbChannelMoney_args)
                return this.equals((addgbChannelMoney_args) that);
            return false;
        }

        public boolean equals(addgbChannelMoney_args that) {
            if (that == null)
                return false;

            boolean this_present_req = true && this.isSetReq();
            boolean that_present_req = true && that.isSetReq();
            if (this_present_req || that_present_req) {
                if (!(this_present_req && that_present_req))
                    return false;
                if (!this.req.equals(that.req))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(addgbChannelMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            addgbChannelMoney_args typedOther = (addgbChannelMoney_args) other;

            lastComparison = Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReq()) {
                lastComparison = TBaseHelper.compareTo(this.req, typedOther.req);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQ
                    if (field.type == TType.STRUCT) {
                        this.req = new AddgbChannelMoneyRequest();
                        this.req.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.req != null) {
                oprot.writeFieldBegin(REQ_FIELD_DESC);
                this.req.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addgbChannelMoney_args(");
            boolean first = true;

            sb.append("req:");
            if (this.req == null) {
                sb.append("null");
            } else {
                sb.append(this.req);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class addgbChannelMoney_result implements
            TBase<addgbChannelMoney_result, addgbChannelMoney_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("addgbChannelMoney_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(addgbChannelMoney_result.class, metaDataMap);
        }

        public addgbChannelMoney_result() {
        }

        public addgbChannelMoney_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addgbChannelMoney_result(addgbChannelMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public addgbChannelMoney_result deepCopy() {
            return new addgbChannelMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public addgbChannelMoney_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addgbChannelMoney_result)
                return this.equals((addgbChannelMoney_result) that);
            return false;
        }

        public boolean equals(addgbChannelMoney_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(addgbChannelMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            addgbChannelMoney_result typedOther = (addgbChannelMoney_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addgbChannelMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class pagbyChannelMoney_args implements
            TBase<pagbyChannelMoney_args, pagbyChannelMoney_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("pagbyChannelMoney_args");

        private static final TField REQ_FIELD_DESC = new TField("req", TType.STRUCT, (short) 1);
        private static final TField ORIGINAL_ORDER_FIELD_DESC = new TField("originalOrder", TType.STRUCT, (short) 2);

        public PagbyChannelMoneyRequest req;
        public OriginalOrder originalOrder;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQ((short) 1, "req"), ORIGINAL_ORDER((short) 2, "originalOrder");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQ
                    return REQ;
                case 2: // ORIGINAL_ORDER
                    return ORIGINAL_ORDER;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQ, new FieldMetaData("req", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PagbyChannelMoneyRequest.class)));
            tmpMap.put(_Fields.ORIGINAL_ORDER, new FieldMetaData("originalOrder", TFieldRequirementType.DEFAULT,
                    new StructMetaData(TType.STRUCT, OriginalOrder.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(pagbyChannelMoney_args.class, metaDataMap);
        }

        public pagbyChannelMoney_args() {
        }

        public pagbyChannelMoney_args(PagbyChannelMoneyRequest req, OriginalOrder originalOrder) {
            this();
            this.req = req;
            this.originalOrder = originalOrder;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public pagbyChannelMoney_args(pagbyChannelMoney_args other) {
            if (other.isSetReq()) {
                this.req = new PagbyChannelMoneyRequest(other.req);
            }
            if (other.isSetOriginalOrder()) {
                this.originalOrder = new OriginalOrder(other.originalOrder);
            }
        }

        public pagbyChannelMoney_args deepCopy() {
            return new pagbyChannelMoney_args(this);
        }

        @Override
        public void clear() {
            this.req = null;
            this.originalOrder = null;
        }

        public PagbyChannelMoneyRequest getReq() {
            return this.req;
        }

        public pagbyChannelMoney_args setReq(PagbyChannelMoneyRequest req) {
            this.req = req;
            return this;
        }

        public void unsetReq() {
            this.req = null;
        }

        /**
         * Returns true if field req is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetReq() {
            return this.req != null;
        }

        public void setReqIsSet(boolean value) {
            if (!value) {
                this.req = null;
            }
        }

        public OriginalOrder getOriginalOrder() {
            return this.originalOrder;
        }

        public pagbyChannelMoney_args setOriginalOrder(OriginalOrder originalOrder) {
            this.originalOrder = originalOrder;
            return this;
        }

        public void unsetOriginalOrder() {
            this.originalOrder = null;
        }

        /**
         * Returns true if field originalOrder is set (has been asigned a value)
         * and false otherwise
         */
        public boolean isSetOriginalOrder() {
            return this.originalOrder != null;
        }

        public void setOriginalOrderIsSet(boolean value) {
            if (!value) {
                this.originalOrder = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQ:
                if (value == null) {
                    unsetReq();
                } else {
                    setReq((PagbyChannelMoneyRequest) value);
                }
                break;

            case ORIGINAL_ORDER:
                if (value == null) {
                    unsetOriginalOrder();
                } else {
                    setOriginalOrder((OriginalOrder) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQ:
                return getReq();

            case ORIGINAL_ORDER:
                return getOriginalOrder();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQ:
                return isSetReq();
            case ORIGINAL_ORDER:
                return isSetOriginalOrder();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof pagbyChannelMoney_args)
                return this.equals((pagbyChannelMoney_args) that);
            return false;
        }

        public boolean equals(pagbyChannelMoney_args that) {
            if (that == null)
                return false;

            boolean this_present_req = true && this.isSetReq();
            boolean that_present_req = true && that.isSetReq();
            if (this_present_req || that_present_req) {
                if (!(this_present_req && that_present_req))
                    return false;
                if (!this.req.equals(that.req))
                    return false;
            }

            boolean this_present_originalOrder = true && this.isSetOriginalOrder();
            boolean that_present_originalOrder = true && that.isSetOriginalOrder();
            if (this_present_originalOrder || that_present_originalOrder) {
                if (!(this_present_originalOrder && that_present_originalOrder))
                    return false;
                if (!this.originalOrder.equals(that.originalOrder))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(pagbyChannelMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            pagbyChannelMoney_args typedOther = (pagbyChannelMoney_args) other;

            lastComparison = Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReq()) {
                lastComparison = TBaseHelper.compareTo(this.req, typedOther.req);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOriginalOrder()).compareTo(typedOther.isSetOriginalOrder());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOriginalOrder()) {
                lastComparison = TBaseHelper.compareTo(this.originalOrder, typedOther.originalOrder);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQ
                    if (field.type == TType.STRUCT) {
                        this.req = new PagbyChannelMoneyRequest();
                        this.req.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // ORIGINAL_ORDER
                    if (field.type == TType.STRUCT) {
                        this.originalOrder = new OriginalOrder();
                        this.originalOrder.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.req != null) {
                oprot.writeFieldBegin(REQ_FIELD_DESC);
                this.req.write(oprot);
                oprot.writeFieldEnd();
            }
            if (this.originalOrder != null) {
                oprot.writeFieldBegin(ORIGINAL_ORDER_FIELD_DESC);
                this.originalOrder.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("pagbyChannelMoney_args(");
            boolean first = true;

            sb.append("req:");
            if (this.req == null) {
                sb.append("null");
            } else {
                sb.append(this.req);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("originalOrder:");
            if (this.originalOrder == null) {
                sb.append("null");
            } else {
                sb.append(this.originalOrder);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class pagbyChannelMoney_result implements
            TBase<pagbyChannelMoney_result, pagbyChannelMoney_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("pagbyChannelMoney_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(pagbyChannelMoney_result.class, metaDataMap);
        }

        public pagbyChannelMoney_result() {
        }

        public pagbyChannelMoney_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public pagbyChannelMoney_result(pagbyChannelMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public pagbyChannelMoney_result deepCopy() {
            return new pagbyChannelMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public pagbyChannelMoney_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof pagbyChannelMoney_result)
                return this.equals((pagbyChannelMoney_result) that);
            return false;
        }

        public boolean equals(pagbyChannelMoney_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(pagbyChannelMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            pagbyChannelMoney_result typedOther = (pagbyChannelMoney_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("pagbyChannelMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class reverseAddgbChannelMoney_args implements
            TBase<reverseAddgbChannelMoney_args, reverseAddgbChannelMoney_args._Fields>, java.io.Serializable,
            Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("reverseAddgbChannelMoney_args");

        private static final TField REQ_FIELD_DESC = new TField("req", TType.STRUCT, (short) 1);

        public ReversegbChannelOrderRequest req;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQ((short) 1, "req");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQ
                    return REQ;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQ, new FieldMetaData("req", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, ReversegbChannelOrderRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(reverseAddgbChannelMoney_args.class, metaDataMap);
        }

        public reverseAddgbChannelMoney_args() {
        }

        public reverseAddgbChannelMoney_args(ReversegbChannelOrderRequest req) {
            this();
            this.req = req;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reverseAddgbChannelMoney_args(reverseAddgbChannelMoney_args other) {
            if (other.isSetReq()) {
                this.req = new ReversegbChannelOrderRequest(other.req);
            }
        }

        public reverseAddgbChannelMoney_args deepCopy() {
            return new reverseAddgbChannelMoney_args(this);
        }

        @Override
        public void clear() {
            this.req = null;
        }

        public ReversegbChannelOrderRequest getReq() {
            return this.req;
        }

        public reverseAddgbChannelMoney_args setReq(ReversegbChannelOrderRequest req) {
            this.req = req;
            return this;
        }

        public void unsetReq() {
            this.req = null;
        }

        /**
         * Returns true if field req is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetReq() {
            return this.req != null;
        }

        public void setReqIsSet(boolean value) {
            if (!value) {
                this.req = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQ:
                if (value == null) {
                    unsetReq();
                } else {
                    setReq((ReversegbChannelOrderRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQ:
                return getReq();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQ:
                return isSetReq();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof reverseAddgbChannelMoney_args)
                return this.equals((reverseAddgbChannelMoney_args) that);
            return false;
        }

        public boolean equals(reverseAddgbChannelMoney_args that) {
            if (that == null)
                return false;

            boolean this_present_req = true && this.isSetReq();
            boolean that_present_req = true && that.isSetReq();
            if (this_present_req || that_present_req) {
                if (!(this_present_req && that_present_req))
                    return false;
                if (!this.req.equals(that.req))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(reverseAddgbChannelMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            reverseAddgbChannelMoney_args typedOther = (reverseAddgbChannelMoney_args) other;

            lastComparison = Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReq()) {
                lastComparison = TBaseHelper.compareTo(this.req, typedOther.req);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQ
                    if (field.type == TType.STRUCT) {
                        this.req = new ReversegbChannelOrderRequest();
                        this.req.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.req != null) {
                oprot.writeFieldBegin(REQ_FIELD_DESC);
                this.req.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("reverseAddgbChannelMoney_args(");
            boolean first = true;

            sb.append("req:");
            if (this.req == null) {
                sb.append("null");
            } else {
                sb.append(this.req);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class reverseAddgbChannelMoney_result implements
            TBase<reverseAddgbChannelMoney_result, reverseAddgbChannelMoney_result._Fields>, java.io.Serializable,
            Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("reverseAddgbChannelMoney_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(reverseAddgbChannelMoney_result.class, metaDataMap);
        }

        public reverseAddgbChannelMoney_result() {
        }

        public reverseAddgbChannelMoney_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reverseAddgbChannelMoney_result(reverseAddgbChannelMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public reverseAddgbChannelMoney_result deepCopy() {
            return new reverseAddgbChannelMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public reverseAddgbChannelMoney_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof reverseAddgbChannelMoney_result)
                return this.equals((reverseAddgbChannelMoney_result) that);
            return false;
        }

        public boolean equals(reverseAddgbChannelMoney_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(reverseAddgbChannelMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            reverseAddgbChannelMoney_result typedOther = (reverseAddgbChannelMoney_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("reverseAddgbChannelMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class reversePagbyChannelMoney_args implements
            TBase<reversePagbyChannelMoney_args, reversePagbyChannelMoney_args._Fields>, java.io.Serializable,
            Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("reversePagbyChannelMoney_args");

        private static final TField REQ_FIELD_DESC = new TField("req", TType.STRUCT, (short) 1);

        public ReversegbChannelOrderRequest req;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            REQ((short) 1, "req");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REQ
                    return REQ;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQ, new FieldMetaData("req", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, ReversegbChannelOrderRequest.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(reversePagbyChannelMoney_args.class, metaDataMap);
        }

        public reversePagbyChannelMoney_args() {
        }

        public reversePagbyChannelMoney_args(ReversegbChannelOrderRequest req) {
            this();
            this.req = req;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reversePagbyChannelMoney_args(reversePagbyChannelMoney_args other) {
            if (other.isSetReq()) {
                this.req = new ReversegbChannelOrderRequest(other.req);
            }
        }

        public reversePagbyChannelMoney_args deepCopy() {
            return new reversePagbyChannelMoney_args(this);
        }

        @Override
        public void clear() {
            this.req = null;
        }

        public ReversegbChannelOrderRequest getReq() {
            return this.req;
        }

        public reversePagbyChannelMoney_args setReq(ReversegbChannelOrderRequest req) {
            this.req = req;
            return this;
        }

        public void unsetReq() {
            this.req = null;
        }

        /**
         * Returns true if field req is set (has been asigned a value) and false
         * otherwise
         */
        public boolean isSetReq() {
            return this.req != null;
        }

        public void setReqIsSet(boolean value) {
            if (!value) {
                this.req = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REQ:
                if (value == null) {
                    unsetReq();
                } else {
                    setReq((ReversegbChannelOrderRequest) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REQ:
                return getReq();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REQ:
                return isSetReq();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof reversePagbyChannelMoney_args)
                return this.equals((reversePagbyChannelMoney_args) that);
            return false;
        }

        public boolean equals(reversePagbyChannelMoney_args that) {
            if (that == null)
                return false;

            boolean this_present_req = true && this.isSetReq();
            boolean that_present_req = true && that.isSetReq();
            if (this_present_req || that_present_req) {
                if (!(this_present_req && that_present_req))
                    return false;
                if (!this.req.equals(that.req))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(reversePagbyChannelMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            reversePagbyChannelMoney_args typedOther = (reversePagbyChannelMoney_args) other;

            lastComparison = Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReq()) {
                lastComparison = TBaseHelper.compareTo(this.req, typedOther.req);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 1: // REQ
                    if (field.type == TType.STRUCT) {
                        this.req = new ReversegbChannelOrderRequest();
                        this.req.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.req != null) {
                oprot.writeFieldBegin(REQ_FIELD_DESC);
                this.req.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("reversePagbyChannelMoney_args(");
            boolean first = true;

            sb.append("req:");
            if (this.req == null) {
                sb.append("null");
            } else {
                sb.append(this.req);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class reversePagbyChannelMoney_result implements
            TBase<reversePagbyChannelMoney_result, reversePagbyChannelMoney_result._Fields>, java.io.Serializable,
            Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("reversePagbyChannelMoney_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public PaymentResult success;

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;
        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(
                    TType.STRUCT, PaymentResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(reversePagbyChannelMoney_result.class, metaDataMap);
        }

        public reversePagbyChannelMoney_result() {
        }

        public reversePagbyChannelMoney_result(PaymentResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reversePagbyChannelMoney_result(reversePagbyChannelMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = new PaymentResult(other.success);
            }
        }

        public reversePagbyChannelMoney_result deepCopy() {
            return new reversePagbyChannelMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public PaymentResult getSuccess() {
            return this.success;
        }

        public reversePagbyChannelMoney_result setSuccess(PaymentResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((PaymentResult) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof reversePagbyChannelMoney_result)
                return this.equals((reversePagbyChannelMoney_result) that);
            return false;
        }

        public boolean equals(reversePagbyChannelMoney_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(reversePagbyChannelMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            reversePagbyChannelMoney_result typedOther = (reversePagbyChannelMoney_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                case 0: // SUCCESS
                    if (field.type == TType.STRUCT) {
                        this.success = new PaymentResult();
                        this.success.read(iprot);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("reversePagbyChannelMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

}

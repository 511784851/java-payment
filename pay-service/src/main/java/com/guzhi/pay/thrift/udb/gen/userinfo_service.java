/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.udb.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class userinfo_service {

  public interface Iface {

    public String lg_userinfo_getUidsFromPps(String passports) throws TException;

    public String lg_userinfo_getEmailsFromPps(String passports) throws TException;

    public String lg_userinfo_getPpsFromUids(String uids) throws TException;

    public String lg_userinfo_getMobilesFromPps(String passports) throws TException;

    public String lg_userinfo_getMobilesFromUids(String uids) throws TException;

    public String lg_userinfo_getAuthStatusByUid(String uid) throws TException;

    public String lg_userinfo_sendMsgByPps(String passports, String content) throws TException;

    public String lg_userinfo_sendMsgByUids(String uids, String content) throws TException;

    public String lg_userinfo_sendEmailByPp(EMailInfoReq emailInfo) throws TException;

    public String lg_userinfo_sendEmailByUid(EMailInfoReq emailInfo) throws TException;

    public String lg_userinfo_getMobileMaskByPp(MaskCodeInfo maskInfo) throws TException;

    public String lg_userinfo_getMobileMaskByUid(MaskCodeInfo maskInfo) throws TException;

    public String lg_userinfo_getEmailMaskByPp(MaskCodeInfo maskInfo) throws TException;

    public String lg_userinfo_getEmailMaskByUid(MaskCodeInfo maskInfo) throws TException;

    public String lg_userinfo_transPassportByUid(String uid) throws TException;

    public String lg_userinfo_transPassport(String passport) throws TException;

    public String lg_userinfo_transgbNo(String gbid) throws TException;

    public String lg_userinfo_transUid(String uid) throws TException;

    public String lg_userinfo_transAccount(String email) throws TException;

    public String lg_userinfo_transAccountByUid(String uid) throws TException;

    public String lg_userinfo_transPassportByAccount(String email) throws TException;

    public String lg_userinfo_transUdbseqByUid(String uid) throws TException;

    public String lg_userinfo_transRegipByUid(String uid) throws TException;

    public String lg_userinfo_gainsPassport(int type, String request) throws TException;

    public String lg_userinfo_gainsgbuid(int type, String request) throws TException;

    public int lg_userinfo_checkPassportPhoneBind(String passport, String phone) throws TException;

    public int lg_userinfo_checkUidPhoneBind(String uid, String phone) throws TException;

    public int lg_userinfo_checkUidAccountBind(String uid, String account) throws TException;

    public int lg_userinfo_checkPassportAccountBind(String passport, String account) throws TException;

    public int lg_userinfo_checkAccountBindByUid(String uid) throws TException;

    public int lg_userinfo_checkgbNoUsable(String gbid) throws TException;

    public int lg_userinfo_checkAccountUsable(String account) throws TException;

    public int lg_userinfo_checkVerifiedEmailByUid(String uid) throws TException;

    public int lg_userinfo_checkUidIdnumberBind(String uid, String idnumber) throws TException;

    public int lg_userinfo_checkRegtimeByUid(String uid, String regtime) throws TException;

    public int lg_userinfo_getUserBindCountByMobile(String mobile) throws TException;

    public int lg_userinfo_getMibaoInfoBindByUid(String uid) throws TException;

    public int lg_userinfo_getMibaoInfoBindByPp(String passport) throws TException;

    public int lg_userinfo_getgbidLoginInfoByUid(String uid) throws TException;

    public int lg_userinfo_ping(int seq) throws TException;

    public PassportUdbseqImidRet lg_userinfo_transPpSeqgbNoByUid(String uid) throws TException;

    public gbuidUdbseqImidRet lg_userinfo_transUidSeqgbNoByPp(String passports) throws TException;

    public PassportEmailRet lg_userinfo_batchTransPpsActsByUids(List<String> uids) throws TException;

    public PassportEmailRet lg_userinfo_batchTransPpsActsByUidsEx(List<String> uids) throws TException;

    public Map<String,String> lg_userinfo_batchTransgbNos(List<String> gbids) throws TException;

    public Map<String,String> lg_userinfo_batchTransUids(List<String> uids) throws TException;

    public MibaoQuesRes lg_userinfo_getMibaoQuestionByUid(String uid) throws TException;

    public MibaoQARes lg_userinfo_checkMibaoQAByPpAct(MibaoQAReq mibaoReq) throws TException;

    public MibaoQARes lg_userinfo_checkMibaoQAByUid(MibaoQAReq mibaoReq) throws TException;

    public IDRegipMobileRes lg_userinfo_getIDRegipMobileByUid(String uid) throws TException;

    public ImidInfoRet lg_userinfo_getImidInfoByImidList(List<Integer> imids) throws TException;

    public ImidInfoRet lg_userinfo_getImidInfoByUidList(List<Integer> uids) throws TException;

    public IDInfoRes lg_userinfo_getIDInfoByUid(IDInfoReq idInfo) throws TException;

    public IDInfoRes lg_userinfo_getIDInfoByUidEx(IDInfoExReq idInfo) throws TException;

  }

  public interface AsyncIface {

    public void lg_userinfo_getUidsFromPps(String passports, AsyncMethodCallback<AsyncClient.lg_userinfo_getUidsFromPps_call> resultHandler) throws TException;

    public void lg_userinfo_getEmailsFromPps(String passports, AsyncMethodCallback<AsyncClient.lg_userinfo_getEmailsFromPps_call> resultHandler) throws TException;

    public void lg_userinfo_getPpsFromUids(String uids, AsyncMethodCallback<AsyncClient.lg_userinfo_getPpsFromUids_call> resultHandler) throws TException;

    public void lg_userinfo_getMobilesFromPps(String passports, AsyncMethodCallback<AsyncClient.lg_userinfo_getMobilesFromPps_call> resultHandler) throws TException;

    public void lg_userinfo_getMobilesFromUids(String uids, AsyncMethodCallback<AsyncClient.lg_userinfo_getMobilesFromUids_call> resultHandler) throws TException;

    public void lg_userinfo_getAuthStatusByUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_getAuthStatusByUid_call> resultHandler) throws TException;

    public void lg_userinfo_sendMsgByPps(String passports, String content, AsyncMethodCallback<AsyncClient.lg_userinfo_sendMsgByPps_call> resultHandler) throws TException;

    public void lg_userinfo_sendMsgByUids(String uids, String content, AsyncMethodCallback<AsyncClient.lg_userinfo_sendMsgByUids_call> resultHandler) throws TException;

    public void lg_userinfo_sendEmailByPp(EMailInfoReq emailInfo, AsyncMethodCallback<AsyncClient.lg_userinfo_sendEmailByPp_call> resultHandler) throws TException;

    public void lg_userinfo_sendEmailByUid(EMailInfoReq emailInfo, AsyncMethodCallback<AsyncClient.lg_userinfo_sendEmailByUid_call> resultHandler) throws TException;

    public void lg_userinfo_getMobileMaskByPp(MaskCodeInfo maskInfo, AsyncMethodCallback<AsyncClient.lg_userinfo_getMobileMaskByPp_call> resultHandler) throws TException;

    public void lg_userinfo_getMobileMaskByUid(MaskCodeInfo maskInfo, AsyncMethodCallback<AsyncClient.lg_userinfo_getMobileMaskByUid_call> resultHandler) throws TException;

    public void lg_userinfo_getEmailMaskByPp(MaskCodeInfo maskInfo, AsyncMethodCallback<AsyncClient.lg_userinfo_getEmailMaskByPp_call> resultHandler) throws TException;

    public void lg_userinfo_getEmailMaskByUid(MaskCodeInfo maskInfo, AsyncMethodCallback<AsyncClient.lg_userinfo_getEmailMaskByUid_call> resultHandler) throws TException;

    public void lg_userinfo_transPassportByUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_transPassportByUid_call> resultHandler) throws TException;

    public void lg_userinfo_transPassport(String passport, AsyncMethodCallback<AsyncClient.lg_userinfo_transPassport_call> resultHandler) throws TException;

    public void lg_userinfo_transgbNo(String gbid, AsyncMethodCallback<AsyncClient.lg_userinfo_transgbNo_call> resultHandler) throws TException;

    public void lg_userinfo_transUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_transUid_call> resultHandler) throws TException;

    public void lg_userinfo_transAccount(String email, AsyncMethodCallback<AsyncClient.lg_userinfo_transAccount_call> resultHandler) throws TException;

    public void lg_userinfo_transAccountByUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_transAccountByUid_call> resultHandler) throws TException;

    public void lg_userinfo_transPassportByAccount(String email, AsyncMethodCallback<AsyncClient.lg_userinfo_transPassportByAccount_call> resultHandler) throws TException;

    public void lg_userinfo_transUdbseqByUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_transUdbseqByUid_call> resultHandler) throws TException;

    public void lg_userinfo_transRegipByUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_transRegipByUid_call> resultHandler) throws TException;

    public void lg_userinfo_gainsPassport(int type, String request, AsyncMethodCallback<AsyncClient.lg_userinfo_gainsPassport_call> resultHandler) throws TException;

    public void lg_userinfo_gainsgbuid(int type, String request, AsyncMethodCallback<AsyncClient.lg_userinfo_gainsgbuid_call> resultHandler) throws TException;

    public void lg_userinfo_checkPassportPhoneBind(String passport, String phone, AsyncMethodCallback<AsyncClient.lg_userinfo_checkPassportPhoneBind_call> resultHandler) throws TException;

    public void lg_userinfo_checkUidPhoneBind(String uid, String phone, AsyncMethodCallback<AsyncClient.lg_userinfo_checkUidPhoneBind_call> resultHandler) throws TException;

    public void lg_userinfo_checkUidAccountBind(String uid, String account, AsyncMethodCallback<AsyncClient.lg_userinfo_checkUidAccountBind_call> resultHandler) throws TException;

    public void lg_userinfo_checkPassportAccountBind(String passport, String account, AsyncMethodCallback<AsyncClient.lg_userinfo_checkPassportAccountBind_call> resultHandler) throws TException;

    public void lg_userinfo_checkAccountBindByUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_checkAccountBindByUid_call> resultHandler) throws TException;

    public void lg_userinfo_checkgbNoUsable(String gbid, AsyncMethodCallback<AsyncClient.lg_userinfo_checkgbNoUsable_call> resultHandler) throws TException;

    public void lg_userinfo_checkAccountUsable(String account, AsyncMethodCallback<AsyncClient.lg_userinfo_checkAccountUsable_call> resultHandler) throws TException;

    public void lg_userinfo_checkVerifiedEmailByUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_checkVerifiedEmailByUid_call> resultHandler) throws TException;

    public void lg_userinfo_checkUidIdnumberBind(String uid, String idnumber, AsyncMethodCallback<AsyncClient.lg_userinfo_checkUidIdnumberBind_call> resultHandler) throws TException;

    public void lg_userinfo_checkRegtimeByUid(String uid, String regtime, AsyncMethodCallback<AsyncClient.lg_userinfo_checkRegtimeByUid_call> resultHandler) throws TException;

    public void lg_userinfo_getUserBindCountByMobile(String mobile, AsyncMethodCallback<AsyncClient.lg_userinfo_getUserBindCountByMobile_call> resultHandler) throws TException;

    public void lg_userinfo_getMibaoInfoBindByUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_getMibaoInfoBindByUid_call> resultHandler) throws TException;

    public void lg_userinfo_getMibaoInfoBindByPp(String passport, AsyncMethodCallback<AsyncClient.lg_userinfo_getMibaoInfoBindByPp_call> resultHandler) throws TException;

    public void lg_userinfo_getgbidLoginInfoByUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_getgbidLoginInfoByUid_call> resultHandler) throws TException;

    public void lg_userinfo_ping(int seq, AsyncMethodCallback<AsyncClient.lg_userinfo_ping_call> resultHandler) throws TException;

    public void lg_userinfo_transPpSeqgbNoByUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_transPpSeqgbNoByUid_call> resultHandler) throws TException;

    public void lg_userinfo_transUidSeqgbNoByPp(String passports, AsyncMethodCallback<AsyncClient.lg_userinfo_transUidSeqgbNoByPp_call> resultHandler) throws TException;

    public void lg_userinfo_batchTransPpsActsByUids(List<String> uids, AsyncMethodCallback<AsyncClient.lg_userinfo_batchTransPpsActsByUids_call> resultHandler) throws TException;

    public void lg_userinfo_batchTransPpsActsByUidsEx(List<String> uids, AsyncMethodCallback<AsyncClient.lg_userinfo_batchTransPpsActsByUidsEx_call> resultHandler) throws TException;

    public void lg_userinfo_batchTransgbNos(List<String> gbids, AsyncMethodCallback<AsyncClient.lg_userinfo_batchTransgbNos_call> resultHandler) throws TException;

    public void lg_userinfo_batchTransUids(List<String> uids, AsyncMethodCallback<AsyncClient.lg_userinfo_batchTransUids_call> resultHandler) throws TException;

    public void lg_userinfo_getMibaoQuestionByUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_getMibaoQuestionByUid_call> resultHandler) throws TException;

    public void lg_userinfo_checkMibaoQAByPpAct(MibaoQAReq mibaoReq, AsyncMethodCallback<AsyncClient.lg_userinfo_checkMibaoQAByPpAct_call> resultHandler) throws TException;

    public void lg_userinfo_checkMibaoQAByUid(MibaoQAReq mibaoReq, AsyncMethodCallback<AsyncClient.lg_userinfo_checkMibaoQAByUid_call> resultHandler) throws TException;

    public void lg_userinfo_getIDRegipMobileByUid(String uid, AsyncMethodCallback<AsyncClient.lg_userinfo_getIDRegipMobileByUid_call> resultHandler) throws TException;

    public void lg_userinfo_getImidInfoByImidList(List<Integer> imids, AsyncMethodCallback<AsyncClient.lg_userinfo_getImidInfoByImidList_call> resultHandler) throws TException;

    public void lg_userinfo_getImidInfoByUidList(List<Integer> uids, AsyncMethodCallback<AsyncClient.lg_userinfo_getImidInfoByUidList_call> resultHandler) throws TException;

    public void lg_userinfo_getIDInfoByUid(IDInfoReq idInfo, AsyncMethodCallback<AsyncClient.lg_userinfo_getIDInfoByUid_call> resultHandler) throws TException;

    public void lg_userinfo_getIDInfoByUidEx(IDInfoExReq idInfo, AsyncMethodCallback<AsyncClient.lg_userinfo_getIDInfoByUidEx_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public String lg_userinfo_getUidsFromPps(String passports) throws TException
    {
      send_lg_userinfo_getUidsFromPps(passports);
      return recv_lg_userinfo_getUidsFromPps();
    }

    public void send_lg_userinfo_getUidsFromPps(String passports) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getUidsFromPps", TMessageType.CALL, ++seqid_));
      lg_userinfo_getUidsFromPps_args args = new lg_userinfo_getUidsFromPps_args();
      args.setPassports(passports);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_getUidsFromPps() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getUidsFromPps failed: out of sequence response");
      }
      lg_userinfo_getUidsFromPps_result result = new lg_userinfo_getUidsFromPps_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getUidsFromPps failed: unknown result");
    }

    public String lg_userinfo_getEmailsFromPps(String passports) throws TException
    {
      send_lg_userinfo_getEmailsFromPps(passports);
      return recv_lg_userinfo_getEmailsFromPps();
    }

    public void send_lg_userinfo_getEmailsFromPps(String passports) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getEmailsFromPps", TMessageType.CALL, ++seqid_));
      lg_userinfo_getEmailsFromPps_args args = new lg_userinfo_getEmailsFromPps_args();
      args.setPassports(passports);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_getEmailsFromPps() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getEmailsFromPps failed: out of sequence response");
      }
      lg_userinfo_getEmailsFromPps_result result = new lg_userinfo_getEmailsFromPps_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getEmailsFromPps failed: unknown result");
    }

    public String lg_userinfo_getPpsFromUids(String uids) throws TException
    {
      send_lg_userinfo_getPpsFromUids(uids);
      return recv_lg_userinfo_getPpsFromUids();
    }

    public void send_lg_userinfo_getPpsFromUids(String uids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getPpsFromUids", TMessageType.CALL, ++seqid_));
      lg_userinfo_getPpsFromUids_args args = new lg_userinfo_getPpsFromUids_args();
      args.setUids(uids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_getPpsFromUids() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getPpsFromUids failed: out of sequence response");
      }
      lg_userinfo_getPpsFromUids_result result = new lg_userinfo_getPpsFromUids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getPpsFromUids failed: unknown result");
    }

    public String lg_userinfo_getMobilesFromPps(String passports) throws TException
    {
      send_lg_userinfo_getMobilesFromPps(passports);
      return recv_lg_userinfo_getMobilesFromPps();
    }

    public void send_lg_userinfo_getMobilesFromPps(String passports) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getMobilesFromPps", TMessageType.CALL, ++seqid_));
      lg_userinfo_getMobilesFromPps_args args = new lg_userinfo_getMobilesFromPps_args();
      args.setPassports(passports);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_getMobilesFromPps() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getMobilesFromPps failed: out of sequence response");
      }
      lg_userinfo_getMobilesFromPps_result result = new lg_userinfo_getMobilesFromPps_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getMobilesFromPps failed: unknown result");
    }

    public String lg_userinfo_getMobilesFromUids(String uids) throws TException
    {
      send_lg_userinfo_getMobilesFromUids(uids);
      return recv_lg_userinfo_getMobilesFromUids();
    }

    public void send_lg_userinfo_getMobilesFromUids(String uids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getMobilesFromUids", TMessageType.CALL, ++seqid_));
      lg_userinfo_getMobilesFromUids_args args = new lg_userinfo_getMobilesFromUids_args();
      args.setUids(uids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_getMobilesFromUids() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getMobilesFromUids failed: out of sequence response");
      }
      lg_userinfo_getMobilesFromUids_result result = new lg_userinfo_getMobilesFromUids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getMobilesFromUids failed: unknown result");
    }

    public String lg_userinfo_getAuthStatusByUid(String uid) throws TException
    {
      send_lg_userinfo_getAuthStatusByUid(uid);
      return recv_lg_userinfo_getAuthStatusByUid();
    }

    public void send_lg_userinfo_getAuthStatusByUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getAuthStatusByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_getAuthStatusByUid_args args = new lg_userinfo_getAuthStatusByUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_getAuthStatusByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getAuthStatusByUid failed: out of sequence response");
      }
      lg_userinfo_getAuthStatusByUid_result result = new lg_userinfo_getAuthStatusByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getAuthStatusByUid failed: unknown result");
    }

    public String lg_userinfo_sendMsgByPps(String passports, String content) throws TException
    {
      send_lg_userinfo_sendMsgByPps(passports, content);
      return recv_lg_userinfo_sendMsgByPps();
    }

    public void send_lg_userinfo_sendMsgByPps(String passports, String content) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_sendMsgByPps", TMessageType.CALL, ++seqid_));
      lg_userinfo_sendMsgByPps_args args = new lg_userinfo_sendMsgByPps_args();
      args.setPassports(passports);
      args.setContent(content);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_sendMsgByPps() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_sendMsgByPps failed: out of sequence response");
      }
      lg_userinfo_sendMsgByPps_result result = new lg_userinfo_sendMsgByPps_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_sendMsgByPps failed: unknown result");
    }

    public String lg_userinfo_sendMsgByUids(String uids, String content) throws TException
    {
      send_lg_userinfo_sendMsgByUids(uids, content);
      return recv_lg_userinfo_sendMsgByUids();
    }

    public void send_lg_userinfo_sendMsgByUids(String uids, String content) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_sendMsgByUids", TMessageType.CALL, ++seqid_));
      lg_userinfo_sendMsgByUids_args args = new lg_userinfo_sendMsgByUids_args();
      args.setUids(uids);
      args.setContent(content);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_sendMsgByUids() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_sendMsgByUids failed: out of sequence response");
      }
      lg_userinfo_sendMsgByUids_result result = new lg_userinfo_sendMsgByUids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_sendMsgByUids failed: unknown result");
    }

    public String lg_userinfo_sendEmailByPp(EMailInfoReq emailInfo) throws TException
    {
      send_lg_userinfo_sendEmailByPp(emailInfo);
      return recv_lg_userinfo_sendEmailByPp();
    }

    public void send_lg_userinfo_sendEmailByPp(EMailInfoReq emailInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_sendEmailByPp", TMessageType.CALL, ++seqid_));
      lg_userinfo_sendEmailByPp_args args = new lg_userinfo_sendEmailByPp_args();
      args.setEmailInfo(emailInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_sendEmailByPp() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_sendEmailByPp failed: out of sequence response");
      }
      lg_userinfo_sendEmailByPp_result result = new lg_userinfo_sendEmailByPp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_sendEmailByPp failed: unknown result");
    }

    public String lg_userinfo_sendEmailByUid(EMailInfoReq emailInfo) throws TException
    {
      send_lg_userinfo_sendEmailByUid(emailInfo);
      return recv_lg_userinfo_sendEmailByUid();
    }

    public void send_lg_userinfo_sendEmailByUid(EMailInfoReq emailInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_sendEmailByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_sendEmailByUid_args args = new lg_userinfo_sendEmailByUid_args();
      args.setEmailInfo(emailInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_sendEmailByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_sendEmailByUid failed: out of sequence response");
      }
      lg_userinfo_sendEmailByUid_result result = new lg_userinfo_sendEmailByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_sendEmailByUid failed: unknown result");
    }

    public String lg_userinfo_getMobileMaskByPp(MaskCodeInfo maskInfo) throws TException
    {
      send_lg_userinfo_getMobileMaskByPp(maskInfo);
      return recv_lg_userinfo_getMobileMaskByPp();
    }

    public void send_lg_userinfo_getMobileMaskByPp(MaskCodeInfo maskInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getMobileMaskByPp", TMessageType.CALL, ++seqid_));
      lg_userinfo_getMobileMaskByPp_args args = new lg_userinfo_getMobileMaskByPp_args();
      args.setMaskInfo(maskInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_getMobileMaskByPp() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getMobileMaskByPp failed: out of sequence response");
      }
      lg_userinfo_getMobileMaskByPp_result result = new lg_userinfo_getMobileMaskByPp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getMobileMaskByPp failed: unknown result");
    }

    public String lg_userinfo_getMobileMaskByUid(MaskCodeInfo maskInfo) throws TException
    {
      send_lg_userinfo_getMobileMaskByUid(maskInfo);
      return recv_lg_userinfo_getMobileMaskByUid();
    }

    public void send_lg_userinfo_getMobileMaskByUid(MaskCodeInfo maskInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getMobileMaskByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_getMobileMaskByUid_args args = new lg_userinfo_getMobileMaskByUid_args();
      args.setMaskInfo(maskInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_getMobileMaskByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getMobileMaskByUid failed: out of sequence response");
      }
      lg_userinfo_getMobileMaskByUid_result result = new lg_userinfo_getMobileMaskByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getMobileMaskByUid failed: unknown result");
    }

    public String lg_userinfo_getEmailMaskByPp(MaskCodeInfo maskInfo) throws TException
    {
      send_lg_userinfo_getEmailMaskByPp(maskInfo);
      return recv_lg_userinfo_getEmailMaskByPp();
    }

    public void send_lg_userinfo_getEmailMaskByPp(MaskCodeInfo maskInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getEmailMaskByPp", TMessageType.CALL, ++seqid_));
      lg_userinfo_getEmailMaskByPp_args args = new lg_userinfo_getEmailMaskByPp_args();
      args.setMaskInfo(maskInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_getEmailMaskByPp() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getEmailMaskByPp failed: out of sequence response");
      }
      lg_userinfo_getEmailMaskByPp_result result = new lg_userinfo_getEmailMaskByPp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getEmailMaskByPp failed: unknown result");
    }

    public String lg_userinfo_getEmailMaskByUid(MaskCodeInfo maskInfo) throws TException
    {
      send_lg_userinfo_getEmailMaskByUid(maskInfo);
      return recv_lg_userinfo_getEmailMaskByUid();
    }

    public void send_lg_userinfo_getEmailMaskByUid(MaskCodeInfo maskInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getEmailMaskByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_getEmailMaskByUid_args args = new lg_userinfo_getEmailMaskByUid_args();
      args.setMaskInfo(maskInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_getEmailMaskByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getEmailMaskByUid failed: out of sequence response");
      }
      lg_userinfo_getEmailMaskByUid_result result = new lg_userinfo_getEmailMaskByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getEmailMaskByUid failed: unknown result");
    }

    public String lg_userinfo_transPassportByUid(String uid) throws TException
    {
      send_lg_userinfo_transPassportByUid(uid);
      return recv_lg_userinfo_transPassportByUid();
    }

    public void send_lg_userinfo_transPassportByUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_transPassportByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_transPassportByUid_args args = new lg_userinfo_transPassportByUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_transPassportByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_transPassportByUid failed: out of sequence response");
      }
      lg_userinfo_transPassportByUid_result result = new lg_userinfo_transPassportByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_transPassportByUid failed: unknown result");
    }

    public String lg_userinfo_transPassport(String passport) throws TException
    {
      send_lg_userinfo_transPassport(passport);
      return recv_lg_userinfo_transPassport();
    }

    public void send_lg_userinfo_transPassport(String passport) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_transPassport", TMessageType.CALL, ++seqid_));
      lg_userinfo_transPassport_args args = new lg_userinfo_transPassport_args();
      args.setPassport(passport);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_transPassport() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_transPassport failed: out of sequence response");
      }
      lg_userinfo_transPassport_result result = new lg_userinfo_transPassport_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_transPassport failed: unknown result");
    }

    public String lg_userinfo_transgbNo(String gbid) throws TException
    {
      send_lg_userinfo_transgbNo(gbid);
      return recv_lg_userinfo_transgbNo();
    }

    public void send_lg_userinfo_transgbNo(String gbid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_transgbNo", TMessageType.CALL, ++seqid_));
      lg_userinfo_transgbNo_args args = new lg_userinfo_transgbNo_args();
      args.setgbid(gbid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_transgbNo() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_transgbNo failed: out of sequence response");
      }
      lg_userinfo_transgbNo_result result = new lg_userinfo_transgbNo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_transgbNo failed: unknown result");
    }

    public String lg_userinfo_transUid(String uid) throws TException
    {
      send_lg_userinfo_transUid(uid);
      return recv_lg_userinfo_transUid();
    }

    public void send_lg_userinfo_transUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_transUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_transUid_args args = new lg_userinfo_transUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_transUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_transUid failed: out of sequence response");
      }
      lg_userinfo_transUid_result result = new lg_userinfo_transUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_transUid failed: unknown result");
    }

    public String lg_userinfo_transAccount(String email) throws TException
    {
      send_lg_userinfo_transAccount(email);
      return recv_lg_userinfo_transAccount();
    }

    public void send_lg_userinfo_transAccount(String email) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_transAccount", TMessageType.CALL, ++seqid_));
      lg_userinfo_transAccount_args args = new lg_userinfo_transAccount_args();
      args.setEmail(email);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_transAccount() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_transAccount failed: out of sequence response");
      }
      lg_userinfo_transAccount_result result = new lg_userinfo_transAccount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_transAccount failed: unknown result");
    }

    public String lg_userinfo_transAccountByUid(String uid) throws TException
    {
      send_lg_userinfo_transAccountByUid(uid);
      return recv_lg_userinfo_transAccountByUid();
    }

    public void send_lg_userinfo_transAccountByUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_transAccountByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_transAccountByUid_args args = new lg_userinfo_transAccountByUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_transAccountByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_transAccountByUid failed: out of sequence response");
      }
      lg_userinfo_transAccountByUid_result result = new lg_userinfo_transAccountByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_transAccountByUid failed: unknown result");
    }

    public String lg_userinfo_transPassportByAccount(String email) throws TException
    {
      send_lg_userinfo_transPassportByAccount(email);
      return recv_lg_userinfo_transPassportByAccount();
    }

    public void send_lg_userinfo_transPassportByAccount(String email) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_transPassportByAccount", TMessageType.CALL, ++seqid_));
      lg_userinfo_transPassportByAccount_args args = new lg_userinfo_transPassportByAccount_args();
      args.setEmail(email);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_transPassportByAccount() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_transPassportByAccount failed: out of sequence response");
      }
      lg_userinfo_transPassportByAccount_result result = new lg_userinfo_transPassportByAccount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_transPassportByAccount failed: unknown result");
    }

    public String lg_userinfo_transUdbseqByUid(String uid) throws TException
    {
      send_lg_userinfo_transUdbseqByUid(uid);
      return recv_lg_userinfo_transUdbseqByUid();
    }

    public void send_lg_userinfo_transUdbseqByUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_transUdbseqByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_transUdbseqByUid_args args = new lg_userinfo_transUdbseqByUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_transUdbseqByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_transUdbseqByUid failed: out of sequence response");
      }
      lg_userinfo_transUdbseqByUid_result result = new lg_userinfo_transUdbseqByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_transUdbseqByUid failed: unknown result");
    }

    public String lg_userinfo_transRegipByUid(String uid) throws TException
    {
      send_lg_userinfo_transRegipByUid(uid);
      return recv_lg_userinfo_transRegipByUid();
    }

    public void send_lg_userinfo_transRegipByUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_transRegipByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_transRegipByUid_args args = new lg_userinfo_transRegipByUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_transRegipByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_transRegipByUid failed: out of sequence response");
      }
      lg_userinfo_transRegipByUid_result result = new lg_userinfo_transRegipByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_transRegipByUid failed: unknown result");
    }

    public String lg_userinfo_gainsPassport(int type, String request) throws TException
    {
      send_lg_userinfo_gainsPassport(type, request);
      return recv_lg_userinfo_gainsPassport();
    }

    public void send_lg_userinfo_gainsPassport(int type, String request) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_gainsPassport", TMessageType.CALL, ++seqid_));
      lg_userinfo_gainsPassport_args args = new lg_userinfo_gainsPassport_args();
      args.setType(type);
      args.setRequest(request);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_gainsPassport() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_gainsPassport failed: out of sequence response");
      }
      lg_userinfo_gainsPassport_result result = new lg_userinfo_gainsPassport_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_gainsPassport failed: unknown result");
    }

    public String lg_userinfo_gainsgbuid(int type, String request) throws TException
    {
      send_lg_userinfo_gainsgbuid(type, request);
      return recv_lg_userinfo_gainsgbuid();
    }

    public void send_lg_userinfo_gainsgbuid(int type, String request) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_gainsgbuid", TMessageType.CALL, ++seqid_));
      lg_userinfo_gainsgbuid_args args = new lg_userinfo_gainsgbuid_args();
      args.setType(type);
      args.setRequest(request);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_lg_userinfo_gainsgbuid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_gainsgbuid failed: out of sequence response");
      }
      lg_userinfo_gainsgbuid_result result = new lg_userinfo_gainsgbuid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_gainsgbuid failed: unknown result");
    }

    public int lg_userinfo_checkPassportPhoneBind(String passport, String phone) throws TException
    {
      send_lg_userinfo_checkPassportPhoneBind(passport, phone);
      return recv_lg_userinfo_checkPassportPhoneBind();
    }

    public void send_lg_userinfo_checkPassportPhoneBind(String passport, String phone) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_checkPassportPhoneBind", TMessageType.CALL, ++seqid_));
      lg_userinfo_checkPassportPhoneBind_args args = new lg_userinfo_checkPassportPhoneBind_args();
      args.setPassport(passport);
      args.setPhone(phone);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_checkPassportPhoneBind() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_checkPassportPhoneBind failed: out of sequence response");
      }
      lg_userinfo_checkPassportPhoneBind_result result = new lg_userinfo_checkPassportPhoneBind_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_checkPassportPhoneBind failed: unknown result");
    }

    public int lg_userinfo_checkUidPhoneBind(String uid, String phone) throws TException
    {
      send_lg_userinfo_checkUidPhoneBind(uid, phone);
      return recv_lg_userinfo_checkUidPhoneBind();
    }

    public void send_lg_userinfo_checkUidPhoneBind(String uid, String phone) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_checkUidPhoneBind", TMessageType.CALL, ++seqid_));
      lg_userinfo_checkUidPhoneBind_args args = new lg_userinfo_checkUidPhoneBind_args();
      args.setUid(uid);
      args.setPhone(phone);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_checkUidPhoneBind() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_checkUidPhoneBind failed: out of sequence response");
      }
      lg_userinfo_checkUidPhoneBind_result result = new lg_userinfo_checkUidPhoneBind_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_checkUidPhoneBind failed: unknown result");
    }

    public int lg_userinfo_checkUidAccountBind(String uid, String account) throws TException
    {
      send_lg_userinfo_checkUidAccountBind(uid, account);
      return recv_lg_userinfo_checkUidAccountBind();
    }

    public void send_lg_userinfo_checkUidAccountBind(String uid, String account) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_checkUidAccountBind", TMessageType.CALL, ++seqid_));
      lg_userinfo_checkUidAccountBind_args args = new lg_userinfo_checkUidAccountBind_args();
      args.setUid(uid);
      args.setAccount(account);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_checkUidAccountBind() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_checkUidAccountBind failed: out of sequence response");
      }
      lg_userinfo_checkUidAccountBind_result result = new lg_userinfo_checkUidAccountBind_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_checkUidAccountBind failed: unknown result");
    }

    public int lg_userinfo_checkPassportAccountBind(String passport, String account) throws TException
    {
      send_lg_userinfo_checkPassportAccountBind(passport, account);
      return recv_lg_userinfo_checkPassportAccountBind();
    }

    public void send_lg_userinfo_checkPassportAccountBind(String passport, String account) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_checkPassportAccountBind", TMessageType.CALL, ++seqid_));
      lg_userinfo_checkPassportAccountBind_args args = new lg_userinfo_checkPassportAccountBind_args();
      args.setPassport(passport);
      args.setAccount(account);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_checkPassportAccountBind() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_checkPassportAccountBind failed: out of sequence response");
      }
      lg_userinfo_checkPassportAccountBind_result result = new lg_userinfo_checkPassportAccountBind_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_checkPassportAccountBind failed: unknown result");
    }

    public int lg_userinfo_checkAccountBindByUid(String uid) throws TException
    {
      send_lg_userinfo_checkAccountBindByUid(uid);
      return recv_lg_userinfo_checkAccountBindByUid();
    }

    public void send_lg_userinfo_checkAccountBindByUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_checkAccountBindByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_checkAccountBindByUid_args args = new lg_userinfo_checkAccountBindByUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_checkAccountBindByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_checkAccountBindByUid failed: out of sequence response");
      }
      lg_userinfo_checkAccountBindByUid_result result = new lg_userinfo_checkAccountBindByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_checkAccountBindByUid failed: unknown result");
    }

    public int lg_userinfo_checkgbNoUsable(String gbid) throws TException
    {
      send_lg_userinfo_checkgbNoUsable(gbid);
      return recv_lg_userinfo_checkgbNoUsable();
    }

    public void send_lg_userinfo_checkgbNoUsable(String gbid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_checkgbNoUsable", TMessageType.CALL, ++seqid_));
      lg_userinfo_checkgbNoUsable_args args = new lg_userinfo_checkgbNoUsable_args();
      args.setgbid(gbid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_checkgbNoUsable() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_checkgbNoUsable failed: out of sequence response");
      }
      lg_userinfo_checkgbNoUsable_result result = new lg_userinfo_checkgbNoUsable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_checkgbNoUsable failed: unknown result");
    }

    public int lg_userinfo_checkAccountUsable(String account) throws TException
    {
      send_lg_userinfo_checkAccountUsable(account);
      return recv_lg_userinfo_checkAccountUsable();
    }

    public void send_lg_userinfo_checkAccountUsable(String account) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_checkAccountUsable", TMessageType.CALL, ++seqid_));
      lg_userinfo_checkAccountUsable_args args = new lg_userinfo_checkAccountUsable_args();
      args.setAccount(account);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_checkAccountUsable() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_checkAccountUsable failed: out of sequence response");
      }
      lg_userinfo_checkAccountUsable_result result = new lg_userinfo_checkAccountUsable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_checkAccountUsable failed: unknown result");
    }

    public int lg_userinfo_checkVerifiedEmailByUid(String uid) throws TException
    {
      send_lg_userinfo_checkVerifiedEmailByUid(uid);
      return recv_lg_userinfo_checkVerifiedEmailByUid();
    }

    public void send_lg_userinfo_checkVerifiedEmailByUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_checkVerifiedEmailByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_checkVerifiedEmailByUid_args args = new lg_userinfo_checkVerifiedEmailByUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_checkVerifiedEmailByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_checkVerifiedEmailByUid failed: out of sequence response");
      }
      lg_userinfo_checkVerifiedEmailByUid_result result = new lg_userinfo_checkVerifiedEmailByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_checkVerifiedEmailByUid failed: unknown result");
    }

    public int lg_userinfo_checkUidIdnumberBind(String uid, String idnumber) throws TException
    {
      send_lg_userinfo_checkUidIdnumberBind(uid, idnumber);
      return recv_lg_userinfo_checkUidIdnumberBind();
    }

    public void send_lg_userinfo_checkUidIdnumberBind(String uid, String idnumber) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_checkUidIdnumberBind", TMessageType.CALL, ++seqid_));
      lg_userinfo_checkUidIdnumberBind_args args = new lg_userinfo_checkUidIdnumberBind_args();
      args.setUid(uid);
      args.setIdnumber(idnumber);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_checkUidIdnumberBind() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_checkUidIdnumberBind failed: out of sequence response");
      }
      lg_userinfo_checkUidIdnumberBind_result result = new lg_userinfo_checkUidIdnumberBind_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_checkUidIdnumberBind failed: unknown result");
    }

    public int lg_userinfo_checkRegtimeByUid(String uid, String regtime) throws TException
    {
      send_lg_userinfo_checkRegtimeByUid(uid, regtime);
      return recv_lg_userinfo_checkRegtimeByUid();
    }

    public void send_lg_userinfo_checkRegtimeByUid(String uid, String regtime) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_checkRegtimeByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_checkRegtimeByUid_args args = new lg_userinfo_checkRegtimeByUid_args();
      args.setUid(uid);
      args.setRegtime(regtime);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_checkRegtimeByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_checkRegtimeByUid failed: out of sequence response");
      }
      lg_userinfo_checkRegtimeByUid_result result = new lg_userinfo_checkRegtimeByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_checkRegtimeByUid failed: unknown result");
    }

    public int lg_userinfo_getUserBindCountByMobile(String mobile) throws TException
    {
      send_lg_userinfo_getUserBindCountByMobile(mobile);
      return recv_lg_userinfo_getUserBindCountByMobile();
    }

    public void send_lg_userinfo_getUserBindCountByMobile(String mobile) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getUserBindCountByMobile", TMessageType.CALL, ++seqid_));
      lg_userinfo_getUserBindCountByMobile_args args = new lg_userinfo_getUserBindCountByMobile_args();
      args.setMobile(mobile);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_getUserBindCountByMobile() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getUserBindCountByMobile failed: out of sequence response");
      }
      lg_userinfo_getUserBindCountByMobile_result result = new lg_userinfo_getUserBindCountByMobile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getUserBindCountByMobile failed: unknown result");
    }

    public int lg_userinfo_getMibaoInfoBindByUid(String uid) throws TException
    {
      send_lg_userinfo_getMibaoInfoBindByUid(uid);
      return recv_lg_userinfo_getMibaoInfoBindByUid();
    }

    public void send_lg_userinfo_getMibaoInfoBindByUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getMibaoInfoBindByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_getMibaoInfoBindByUid_args args = new lg_userinfo_getMibaoInfoBindByUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_getMibaoInfoBindByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getMibaoInfoBindByUid failed: out of sequence response");
      }
      lg_userinfo_getMibaoInfoBindByUid_result result = new lg_userinfo_getMibaoInfoBindByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getMibaoInfoBindByUid failed: unknown result");
    }

    public int lg_userinfo_getMibaoInfoBindByPp(String passport) throws TException
    {
      send_lg_userinfo_getMibaoInfoBindByPp(passport);
      return recv_lg_userinfo_getMibaoInfoBindByPp();
    }

    public void send_lg_userinfo_getMibaoInfoBindByPp(String passport) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getMibaoInfoBindByPp", TMessageType.CALL, ++seqid_));
      lg_userinfo_getMibaoInfoBindByPp_args args = new lg_userinfo_getMibaoInfoBindByPp_args();
      args.setPassport(passport);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_getMibaoInfoBindByPp() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getMibaoInfoBindByPp failed: out of sequence response");
      }
      lg_userinfo_getMibaoInfoBindByPp_result result = new lg_userinfo_getMibaoInfoBindByPp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getMibaoInfoBindByPp failed: unknown result");
    }

    public int lg_userinfo_getgbidLoginInfoByUid(String uid) throws TException
    {
      send_lg_userinfo_getgbidLoginInfoByUid(uid);
      return recv_lg_userinfo_getgbidLoginInfoByUid();
    }

    public void send_lg_userinfo_getgbidLoginInfoByUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getgbidLoginInfoByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_getgbidLoginInfoByUid_args args = new lg_userinfo_getgbidLoginInfoByUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_getgbidLoginInfoByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getgbidLoginInfoByUid failed: out of sequence response");
      }
      lg_userinfo_getgbidLoginInfoByUid_result result = new lg_userinfo_getgbidLoginInfoByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getgbidLoginInfoByUid failed: unknown result");
    }

    public int lg_userinfo_ping(int seq) throws TException
    {
      send_lg_userinfo_ping(seq);
      return recv_lg_userinfo_ping();
    }

    public void send_lg_userinfo_ping(int seq) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_ping", TMessageType.CALL, ++seqid_));
      lg_userinfo_ping_args args = new lg_userinfo_ping_args();
      args.setSeq(seq);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_lg_userinfo_ping() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_ping failed: out of sequence response");
      }
      lg_userinfo_ping_result result = new lg_userinfo_ping_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_ping failed: unknown result");
    }

    public PassportUdbseqImidRet lg_userinfo_transPpSeqgbNoByUid(String uid) throws TException
    {
      send_lg_userinfo_transPpSeqgbNoByUid(uid);
      return recv_lg_userinfo_transPpSeqgbNoByUid();
    }

    public void send_lg_userinfo_transPpSeqgbNoByUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_transPpSeqgbNoByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_transPpSeqgbNoByUid_args args = new lg_userinfo_transPpSeqgbNoByUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PassportUdbseqImidRet recv_lg_userinfo_transPpSeqgbNoByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_transPpSeqgbNoByUid failed: out of sequence response");
      }
      lg_userinfo_transPpSeqgbNoByUid_result result = new lg_userinfo_transPpSeqgbNoByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_transPpSeqgbNoByUid failed: unknown result");
    }

    public gbuidUdbseqImidRet lg_userinfo_transUidSeqgbNoByPp(String passports) throws TException
    {
      send_lg_userinfo_transUidSeqgbNoByPp(passports);
      return recv_lg_userinfo_transUidSeqgbNoByPp();
    }

    public void send_lg_userinfo_transUidSeqgbNoByPp(String passports) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_transUidSeqgbNoByPp", TMessageType.CALL, ++seqid_));
      lg_userinfo_transUidSeqgbNoByPp_args args = new lg_userinfo_transUidSeqgbNoByPp_args();
      args.setPassports(passports);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public gbuidUdbseqImidRet recv_lg_userinfo_transUidSeqgbNoByPp() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_transUidSeqgbNoByPp failed: out of sequence response");
      }
      lg_userinfo_transUidSeqgbNoByPp_result result = new lg_userinfo_transUidSeqgbNoByPp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_transUidSeqgbNoByPp failed: unknown result");
    }

    public PassportEmailRet lg_userinfo_batchTransPpsActsByUids(List<String> uids) throws TException
    {
      send_lg_userinfo_batchTransPpsActsByUids(uids);
      return recv_lg_userinfo_batchTransPpsActsByUids();
    }

    public void send_lg_userinfo_batchTransPpsActsByUids(List<String> uids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_batchTransPpsActsByUids", TMessageType.CALL, ++seqid_));
      lg_userinfo_batchTransPpsActsByUids_args args = new lg_userinfo_batchTransPpsActsByUids_args();
      args.setUids(uids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PassportEmailRet recv_lg_userinfo_batchTransPpsActsByUids() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_batchTransPpsActsByUids failed: out of sequence response");
      }
      lg_userinfo_batchTransPpsActsByUids_result result = new lg_userinfo_batchTransPpsActsByUids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_batchTransPpsActsByUids failed: unknown result");
    }

    public PassportEmailRet lg_userinfo_batchTransPpsActsByUidsEx(List<String> uids) throws TException
    {
      send_lg_userinfo_batchTransPpsActsByUidsEx(uids);
      return recv_lg_userinfo_batchTransPpsActsByUidsEx();
    }

    public void send_lg_userinfo_batchTransPpsActsByUidsEx(List<String> uids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_batchTransPpsActsByUidsEx", TMessageType.CALL, ++seqid_));
      lg_userinfo_batchTransPpsActsByUidsEx_args args = new lg_userinfo_batchTransPpsActsByUidsEx_args();
      args.setUids(uids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PassportEmailRet recv_lg_userinfo_batchTransPpsActsByUidsEx() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_batchTransPpsActsByUidsEx failed: out of sequence response");
      }
      lg_userinfo_batchTransPpsActsByUidsEx_result result = new lg_userinfo_batchTransPpsActsByUidsEx_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_batchTransPpsActsByUidsEx failed: unknown result");
    }

    public Map<String,String> lg_userinfo_batchTransgbNos(List<String> gbids) throws TException
    {
      send_lg_userinfo_batchTransgbNos(gbids);
      return recv_lg_userinfo_batchTransgbNos();
    }

    public void send_lg_userinfo_batchTransgbNos(List<String> gbids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_batchTransgbNos", TMessageType.CALL, ++seqid_));
      lg_userinfo_batchTransgbNos_args args = new lg_userinfo_batchTransgbNos_args();
      args.setgbids(gbids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Map<String,String> recv_lg_userinfo_batchTransgbNos() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_batchTransgbNos failed: out of sequence response");
      }
      lg_userinfo_batchTransgbNos_result result = new lg_userinfo_batchTransgbNos_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_batchTransgbNos failed: unknown result");
    }

    public Map<String,String> lg_userinfo_batchTransUids(List<String> uids) throws TException
    {
      send_lg_userinfo_batchTransUids(uids);
      return recv_lg_userinfo_batchTransUids();
    }

    public void send_lg_userinfo_batchTransUids(List<String> uids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_batchTransUids", TMessageType.CALL, ++seqid_));
      lg_userinfo_batchTransUids_args args = new lg_userinfo_batchTransUids_args();
      args.setUids(uids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Map<String,String> recv_lg_userinfo_batchTransUids() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_batchTransUids failed: out of sequence response");
      }
      lg_userinfo_batchTransUids_result result = new lg_userinfo_batchTransUids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_batchTransUids failed: unknown result");
    }

    public MibaoQuesRes lg_userinfo_getMibaoQuestionByUid(String uid) throws TException
    {
      send_lg_userinfo_getMibaoQuestionByUid(uid);
      return recv_lg_userinfo_getMibaoQuestionByUid();
    }

    public void send_lg_userinfo_getMibaoQuestionByUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getMibaoQuestionByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_getMibaoQuestionByUid_args args = new lg_userinfo_getMibaoQuestionByUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public MibaoQuesRes recv_lg_userinfo_getMibaoQuestionByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getMibaoQuestionByUid failed: out of sequence response");
      }
      lg_userinfo_getMibaoQuestionByUid_result result = new lg_userinfo_getMibaoQuestionByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getMibaoQuestionByUid failed: unknown result");
    }

    public MibaoQARes lg_userinfo_checkMibaoQAByPpAct(MibaoQAReq mibaoReq) throws TException
    {
      send_lg_userinfo_checkMibaoQAByPpAct(mibaoReq);
      return recv_lg_userinfo_checkMibaoQAByPpAct();
    }

    public void send_lg_userinfo_checkMibaoQAByPpAct(MibaoQAReq mibaoReq) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_checkMibaoQAByPpAct", TMessageType.CALL, ++seqid_));
      lg_userinfo_checkMibaoQAByPpAct_args args = new lg_userinfo_checkMibaoQAByPpAct_args();
      args.setMibaoReq(mibaoReq);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public MibaoQARes recv_lg_userinfo_checkMibaoQAByPpAct() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_checkMibaoQAByPpAct failed: out of sequence response");
      }
      lg_userinfo_checkMibaoQAByPpAct_result result = new lg_userinfo_checkMibaoQAByPpAct_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_checkMibaoQAByPpAct failed: unknown result");
    }

    public MibaoQARes lg_userinfo_checkMibaoQAByUid(MibaoQAReq mibaoReq) throws TException
    {
      send_lg_userinfo_checkMibaoQAByUid(mibaoReq);
      return recv_lg_userinfo_checkMibaoQAByUid();
    }

    public void send_lg_userinfo_checkMibaoQAByUid(MibaoQAReq mibaoReq) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_checkMibaoQAByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_checkMibaoQAByUid_args args = new lg_userinfo_checkMibaoQAByUid_args();
      args.setMibaoReq(mibaoReq);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public MibaoQARes recv_lg_userinfo_checkMibaoQAByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_checkMibaoQAByUid failed: out of sequence response");
      }
      lg_userinfo_checkMibaoQAByUid_result result = new lg_userinfo_checkMibaoQAByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_checkMibaoQAByUid failed: unknown result");
    }

    public IDRegipMobileRes lg_userinfo_getIDRegipMobileByUid(String uid) throws TException
    {
      send_lg_userinfo_getIDRegipMobileByUid(uid);
      return recv_lg_userinfo_getIDRegipMobileByUid();
    }

    public void send_lg_userinfo_getIDRegipMobileByUid(String uid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getIDRegipMobileByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_getIDRegipMobileByUid_args args = new lg_userinfo_getIDRegipMobileByUid_args();
      args.setUid(uid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public IDRegipMobileRes recv_lg_userinfo_getIDRegipMobileByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getIDRegipMobileByUid failed: out of sequence response");
      }
      lg_userinfo_getIDRegipMobileByUid_result result = new lg_userinfo_getIDRegipMobileByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getIDRegipMobileByUid failed: unknown result");
    }

    public ImidInfoRet lg_userinfo_getImidInfoByImidList(List<Integer> imids) throws TException
    {
      send_lg_userinfo_getImidInfoByImidList(imids);
      return recv_lg_userinfo_getImidInfoByImidList();
    }

    public void send_lg_userinfo_getImidInfoByImidList(List<Integer> imids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getImidInfoByImidList", TMessageType.CALL, ++seqid_));
      lg_userinfo_getImidInfoByImidList_args args = new lg_userinfo_getImidInfoByImidList_args();
      args.setImids(imids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ImidInfoRet recv_lg_userinfo_getImidInfoByImidList() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getImidInfoByImidList failed: out of sequence response");
      }
      lg_userinfo_getImidInfoByImidList_result result = new lg_userinfo_getImidInfoByImidList_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getImidInfoByImidList failed: unknown result");
    }

    public ImidInfoRet lg_userinfo_getImidInfoByUidList(List<Integer> uids) throws TException
    {
      send_lg_userinfo_getImidInfoByUidList(uids);
      return recv_lg_userinfo_getImidInfoByUidList();
    }

    public void send_lg_userinfo_getImidInfoByUidList(List<Integer> uids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getImidInfoByUidList", TMessageType.CALL, ++seqid_));
      lg_userinfo_getImidInfoByUidList_args args = new lg_userinfo_getImidInfoByUidList_args();
      args.setUids(uids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ImidInfoRet recv_lg_userinfo_getImidInfoByUidList() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getImidInfoByUidList failed: out of sequence response");
      }
      lg_userinfo_getImidInfoByUidList_result result = new lg_userinfo_getImidInfoByUidList_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getImidInfoByUidList failed: unknown result");
    }

    public IDInfoRes lg_userinfo_getIDInfoByUid(IDInfoReq idInfo) throws TException
    {
      send_lg_userinfo_getIDInfoByUid(idInfo);
      return recv_lg_userinfo_getIDInfoByUid();
    }

    public void send_lg_userinfo_getIDInfoByUid(IDInfoReq idInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getIDInfoByUid", TMessageType.CALL, ++seqid_));
      lg_userinfo_getIDInfoByUid_args args = new lg_userinfo_getIDInfoByUid_args();
      args.setIdInfo(idInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public IDInfoRes recv_lg_userinfo_getIDInfoByUid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getIDInfoByUid failed: out of sequence response");
      }
      lg_userinfo_getIDInfoByUid_result result = new lg_userinfo_getIDInfoByUid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getIDInfoByUid failed: unknown result");
    }

    public IDInfoRes lg_userinfo_getIDInfoByUidEx(IDInfoExReq idInfo) throws TException
    {
      send_lg_userinfo_getIDInfoByUidEx(idInfo);
      return recv_lg_userinfo_getIDInfoByUidEx();
    }

    public void send_lg_userinfo_getIDInfoByUidEx(IDInfoExReq idInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lg_userinfo_getIDInfoByUidEx", TMessageType.CALL, ++seqid_));
      lg_userinfo_getIDInfoByUidEx_args args = new lg_userinfo_getIDInfoByUidEx_args();
      args.setIdInfo(idInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public IDInfoRes recv_lg_userinfo_getIDInfoByUidEx() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lg_userinfo_getIDInfoByUidEx failed: out of sequence response");
      }
      lg_userinfo_getIDInfoByUidEx_result result = new lg_userinfo_getIDInfoByUidEx_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lg_userinfo_getIDInfoByUidEx failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void lg_userinfo_getUidsFromPps(String passports, AsyncMethodCallback<lg_userinfo_getUidsFromPps_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getUidsFromPps_call method_call = new lg_userinfo_getUidsFromPps_call(passports, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getUidsFromPps_call extends TAsyncMethodCall {
      private String passports;
      public lg_userinfo_getUidsFromPps_call(String passports, AsyncMethodCallback<lg_userinfo_getUidsFromPps_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.passports = passports;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getUidsFromPps", TMessageType.CALL, 0));
        lg_userinfo_getUidsFromPps_args args = new lg_userinfo_getUidsFromPps_args();
        args.setPassports(passports);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getUidsFromPps();
      }
    }

    public void lg_userinfo_getEmailsFromPps(String passports, AsyncMethodCallback<lg_userinfo_getEmailsFromPps_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getEmailsFromPps_call method_call = new lg_userinfo_getEmailsFromPps_call(passports, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getEmailsFromPps_call extends TAsyncMethodCall {
      private String passports;
      public lg_userinfo_getEmailsFromPps_call(String passports, AsyncMethodCallback<lg_userinfo_getEmailsFromPps_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.passports = passports;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getEmailsFromPps", TMessageType.CALL, 0));
        lg_userinfo_getEmailsFromPps_args args = new lg_userinfo_getEmailsFromPps_args();
        args.setPassports(passports);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getEmailsFromPps();
      }
    }

    public void lg_userinfo_getPpsFromUids(String uids, AsyncMethodCallback<lg_userinfo_getPpsFromUids_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getPpsFromUids_call method_call = new lg_userinfo_getPpsFromUids_call(uids, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getPpsFromUids_call extends TAsyncMethodCall {
      private String uids;
      public lg_userinfo_getPpsFromUids_call(String uids, AsyncMethodCallback<lg_userinfo_getPpsFromUids_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uids = uids;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getPpsFromUids", TMessageType.CALL, 0));
        lg_userinfo_getPpsFromUids_args args = new lg_userinfo_getPpsFromUids_args();
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getPpsFromUids();
      }
    }

    public void lg_userinfo_getMobilesFromPps(String passports, AsyncMethodCallback<lg_userinfo_getMobilesFromPps_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getMobilesFromPps_call method_call = new lg_userinfo_getMobilesFromPps_call(passports, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getMobilesFromPps_call extends TAsyncMethodCall {
      private String passports;
      public lg_userinfo_getMobilesFromPps_call(String passports, AsyncMethodCallback<lg_userinfo_getMobilesFromPps_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.passports = passports;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getMobilesFromPps", TMessageType.CALL, 0));
        lg_userinfo_getMobilesFromPps_args args = new lg_userinfo_getMobilesFromPps_args();
        args.setPassports(passports);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getMobilesFromPps();
      }
    }

    public void lg_userinfo_getMobilesFromUids(String uids, AsyncMethodCallback<lg_userinfo_getMobilesFromUids_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getMobilesFromUids_call method_call = new lg_userinfo_getMobilesFromUids_call(uids, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getMobilesFromUids_call extends TAsyncMethodCall {
      private String uids;
      public lg_userinfo_getMobilesFromUids_call(String uids, AsyncMethodCallback<lg_userinfo_getMobilesFromUids_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uids = uids;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getMobilesFromUids", TMessageType.CALL, 0));
        lg_userinfo_getMobilesFromUids_args args = new lg_userinfo_getMobilesFromUids_args();
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getMobilesFromUids();
      }
    }

    public void lg_userinfo_getAuthStatusByUid(String uid, AsyncMethodCallback<lg_userinfo_getAuthStatusByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getAuthStatusByUid_call method_call = new lg_userinfo_getAuthStatusByUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getAuthStatusByUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_getAuthStatusByUid_call(String uid, AsyncMethodCallback<lg_userinfo_getAuthStatusByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getAuthStatusByUid", TMessageType.CALL, 0));
        lg_userinfo_getAuthStatusByUid_args args = new lg_userinfo_getAuthStatusByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getAuthStatusByUid();
      }
    }

    public void lg_userinfo_sendMsgByPps(String passports, String content, AsyncMethodCallback<lg_userinfo_sendMsgByPps_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_sendMsgByPps_call method_call = new lg_userinfo_sendMsgByPps_call(passports, content, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_sendMsgByPps_call extends TAsyncMethodCall {
      private String passports;
      private String content;
      public lg_userinfo_sendMsgByPps_call(String passports, String content, AsyncMethodCallback<lg_userinfo_sendMsgByPps_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.passports = passports;
        this.content = content;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_sendMsgByPps", TMessageType.CALL, 0));
        lg_userinfo_sendMsgByPps_args args = new lg_userinfo_sendMsgByPps_args();
        args.setPassports(passports);
        args.setContent(content);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_sendMsgByPps();
      }
    }

    public void lg_userinfo_sendMsgByUids(String uids, String content, AsyncMethodCallback<lg_userinfo_sendMsgByUids_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_sendMsgByUids_call method_call = new lg_userinfo_sendMsgByUids_call(uids, content, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_sendMsgByUids_call extends TAsyncMethodCall {
      private String uids;
      private String content;
      public lg_userinfo_sendMsgByUids_call(String uids, String content, AsyncMethodCallback<lg_userinfo_sendMsgByUids_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uids = uids;
        this.content = content;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_sendMsgByUids", TMessageType.CALL, 0));
        lg_userinfo_sendMsgByUids_args args = new lg_userinfo_sendMsgByUids_args();
        args.setUids(uids);
        args.setContent(content);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_sendMsgByUids();
      }
    }

    public void lg_userinfo_sendEmailByPp(EMailInfoReq emailInfo, AsyncMethodCallback<lg_userinfo_sendEmailByPp_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_sendEmailByPp_call method_call = new lg_userinfo_sendEmailByPp_call(emailInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_sendEmailByPp_call extends TAsyncMethodCall {
      private EMailInfoReq emailInfo;
      public lg_userinfo_sendEmailByPp_call(EMailInfoReq emailInfo, AsyncMethodCallback<lg_userinfo_sendEmailByPp_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.emailInfo = emailInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_sendEmailByPp", TMessageType.CALL, 0));
        lg_userinfo_sendEmailByPp_args args = new lg_userinfo_sendEmailByPp_args();
        args.setEmailInfo(emailInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_sendEmailByPp();
      }
    }

    public void lg_userinfo_sendEmailByUid(EMailInfoReq emailInfo, AsyncMethodCallback<lg_userinfo_sendEmailByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_sendEmailByUid_call method_call = new lg_userinfo_sendEmailByUid_call(emailInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_sendEmailByUid_call extends TAsyncMethodCall {
      private EMailInfoReq emailInfo;
      public lg_userinfo_sendEmailByUid_call(EMailInfoReq emailInfo, AsyncMethodCallback<lg_userinfo_sendEmailByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.emailInfo = emailInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_sendEmailByUid", TMessageType.CALL, 0));
        lg_userinfo_sendEmailByUid_args args = new lg_userinfo_sendEmailByUid_args();
        args.setEmailInfo(emailInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_sendEmailByUid();
      }
    }

    public void lg_userinfo_getMobileMaskByPp(MaskCodeInfo maskInfo, AsyncMethodCallback<lg_userinfo_getMobileMaskByPp_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getMobileMaskByPp_call method_call = new lg_userinfo_getMobileMaskByPp_call(maskInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getMobileMaskByPp_call extends TAsyncMethodCall {
      private MaskCodeInfo maskInfo;
      public lg_userinfo_getMobileMaskByPp_call(MaskCodeInfo maskInfo, AsyncMethodCallback<lg_userinfo_getMobileMaskByPp_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.maskInfo = maskInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getMobileMaskByPp", TMessageType.CALL, 0));
        lg_userinfo_getMobileMaskByPp_args args = new lg_userinfo_getMobileMaskByPp_args();
        args.setMaskInfo(maskInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getMobileMaskByPp();
      }
    }

    public void lg_userinfo_getMobileMaskByUid(MaskCodeInfo maskInfo, AsyncMethodCallback<lg_userinfo_getMobileMaskByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getMobileMaskByUid_call method_call = new lg_userinfo_getMobileMaskByUid_call(maskInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getMobileMaskByUid_call extends TAsyncMethodCall {
      private MaskCodeInfo maskInfo;
      public lg_userinfo_getMobileMaskByUid_call(MaskCodeInfo maskInfo, AsyncMethodCallback<lg_userinfo_getMobileMaskByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.maskInfo = maskInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getMobileMaskByUid", TMessageType.CALL, 0));
        lg_userinfo_getMobileMaskByUid_args args = new lg_userinfo_getMobileMaskByUid_args();
        args.setMaskInfo(maskInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getMobileMaskByUid();
      }
    }

    public void lg_userinfo_getEmailMaskByPp(MaskCodeInfo maskInfo, AsyncMethodCallback<lg_userinfo_getEmailMaskByPp_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getEmailMaskByPp_call method_call = new lg_userinfo_getEmailMaskByPp_call(maskInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getEmailMaskByPp_call extends TAsyncMethodCall {
      private MaskCodeInfo maskInfo;
      public lg_userinfo_getEmailMaskByPp_call(MaskCodeInfo maskInfo, AsyncMethodCallback<lg_userinfo_getEmailMaskByPp_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.maskInfo = maskInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getEmailMaskByPp", TMessageType.CALL, 0));
        lg_userinfo_getEmailMaskByPp_args args = new lg_userinfo_getEmailMaskByPp_args();
        args.setMaskInfo(maskInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getEmailMaskByPp();
      }
    }

    public void lg_userinfo_getEmailMaskByUid(MaskCodeInfo maskInfo, AsyncMethodCallback<lg_userinfo_getEmailMaskByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getEmailMaskByUid_call method_call = new lg_userinfo_getEmailMaskByUid_call(maskInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getEmailMaskByUid_call extends TAsyncMethodCall {
      private MaskCodeInfo maskInfo;
      public lg_userinfo_getEmailMaskByUid_call(MaskCodeInfo maskInfo, AsyncMethodCallback<lg_userinfo_getEmailMaskByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.maskInfo = maskInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getEmailMaskByUid", TMessageType.CALL, 0));
        lg_userinfo_getEmailMaskByUid_args args = new lg_userinfo_getEmailMaskByUid_args();
        args.setMaskInfo(maskInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getEmailMaskByUid();
      }
    }

    public void lg_userinfo_transPassportByUid(String uid, AsyncMethodCallback<lg_userinfo_transPassportByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_transPassportByUid_call method_call = new lg_userinfo_transPassportByUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_transPassportByUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_transPassportByUid_call(String uid, AsyncMethodCallback<lg_userinfo_transPassportByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_transPassportByUid", TMessageType.CALL, 0));
        lg_userinfo_transPassportByUid_args args = new lg_userinfo_transPassportByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_transPassportByUid();
      }
    }

    public void lg_userinfo_transPassport(String passport, AsyncMethodCallback<lg_userinfo_transPassport_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_transPassport_call method_call = new lg_userinfo_transPassport_call(passport, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_transPassport_call extends TAsyncMethodCall {
      private String passport;
      public lg_userinfo_transPassport_call(String passport, AsyncMethodCallback<lg_userinfo_transPassport_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.passport = passport;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_transPassport", TMessageType.CALL, 0));
        lg_userinfo_transPassport_args args = new lg_userinfo_transPassport_args();
        args.setPassport(passport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_transPassport();
      }
    }

    public void lg_userinfo_transgbNo(String gbid, AsyncMethodCallback<lg_userinfo_transgbNo_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_transgbNo_call method_call = new lg_userinfo_transgbNo_call(gbid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_transgbNo_call extends TAsyncMethodCall {
      private String gbid;
      public lg_userinfo_transgbNo_call(String gbid, AsyncMethodCallback<lg_userinfo_transgbNo_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gbid = gbid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_transgbNo", TMessageType.CALL, 0));
        lg_userinfo_transgbNo_args args = new lg_userinfo_transgbNo_args();
        args.setgbid(gbid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_transgbNo();
      }
    }

    public void lg_userinfo_transUid(String uid, AsyncMethodCallback<lg_userinfo_transUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_transUid_call method_call = new lg_userinfo_transUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_transUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_transUid_call(String uid, AsyncMethodCallback<lg_userinfo_transUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_transUid", TMessageType.CALL, 0));
        lg_userinfo_transUid_args args = new lg_userinfo_transUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_transUid();
      }
    }

    public void lg_userinfo_transAccount(String email, AsyncMethodCallback<lg_userinfo_transAccount_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_transAccount_call method_call = new lg_userinfo_transAccount_call(email, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_transAccount_call extends TAsyncMethodCall {
      private String email;
      public lg_userinfo_transAccount_call(String email, AsyncMethodCallback<lg_userinfo_transAccount_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_transAccount", TMessageType.CALL, 0));
        lg_userinfo_transAccount_args args = new lg_userinfo_transAccount_args();
        args.setEmail(email);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_transAccount();
      }
    }

    public void lg_userinfo_transAccountByUid(String uid, AsyncMethodCallback<lg_userinfo_transAccountByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_transAccountByUid_call method_call = new lg_userinfo_transAccountByUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_transAccountByUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_transAccountByUid_call(String uid, AsyncMethodCallback<lg_userinfo_transAccountByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_transAccountByUid", TMessageType.CALL, 0));
        lg_userinfo_transAccountByUid_args args = new lg_userinfo_transAccountByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_transAccountByUid();
      }
    }

    public void lg_userinfo_transPassportByAccount(String email, AsyncMethodCallback<lg_userinfo_transPassportByAccount_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_transPassportByAccount_call method_call = new lg_userinfo_transPassportByAccount_call(email, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_transPassportByAccount_call extends TAsyncMethodCall {
      private String email;
      public lg_userinfo_transPassportByAccount_call(String email, AsyncMethodCallback<lg_userinfo_transPassportByAccount_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_transPassportByAccount", TMessageType.CALL, 0));
        lg_userinfo_transPassportByAccount_args args = new lg_userinfo_transPassportByAccount_args();
        args.setEmail(email);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_transPassportByAccount();
      }
    }

    public void lg_userinfo_transUdbseqByUid(String uid, AsyncMethodCallback<lg_userinfo_transUdbseqByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_transUdbseqByUid_call method_call = new lg_userinfo_transUdbseqByUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_transUdbseqByUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_transUdbseqByUid_call(String uid, AsyncMethodCallback<lg_userinfo_transUdbseqByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_transUdbseqByUid", TMessageType.CALL, 0));
        lg_userinfo_transUdbseqByUid_args args = new lg_userinfo_transUdbseqByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_transUdbseqByUid();
      }
    }

    public void lg_userinfo_transRegipByUid(String uid, AsyncMethodCallback<lg_userinfo_transRegipByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_transRegipByUid_call method_call = new lg_userinfo_transRegipByUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_transRegipByUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_transRegipByUid_call(String uid, AsyncMethodCallback<lg_userinfo_transRegipByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_transRegipByUid", TMessageType.CALL, 0));
        lg_userinfo_transRegipByUid_args args = new lg_userinfo_transRegipByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_transRegipByUid();
      }
    }

    public void lg_userinfo_gainsPassport(int type, String request, AsyncMethodCallback<lg_userinfo_gainsPassport_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_gainsPassport_call method_call = new lg_userinfo_gainsPassport_call(type, request, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_gainsPassport_call extends TAsyncMethodCall {
      private int type;
      private String request;
      public lg_userinfo_gainsPassport_call(int type, String request, AsyncMethodCallback<lg_userinfo_gainsPassport_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.request = request;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_gainsPassport", TMessageType.CALL, 0));
        lg_userinfo_gainsPassport_args args = new lg_userinfo_gainsPassport_args();
        args.setType(type);
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_gainsPassport();
      }
    }

    public void lg_userinfo_gainsgbuid(int type, String request, AsyncMethodCallback<lg_userinfo_gainsgbuid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_gainsgbuid_call method_call = new lg_userinfo_gainsgbuid_call(type, request, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_gainsgbuid_call extends TAsyncMethodCall {
      private int type;
      private String request;
      public lg_userinfo_gainsgbuid_call(int type, String request, AsyncMethodCallback<lg_userinfo_gainsgbuid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.request = request;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_gainsgbuid", TMessageType.CALL, 0));
        lg_userinfo_gainsgbuid_args args = new lg_userinfo_gainsgbuid_args();
        args.setType(type);
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_gainsgbuid();
      }
    }

    public void lg_userinfo_checkPassportPhoneBind(String passport, String phone, AsyncMethodCallback<lg_userinfo_checkPassportPhoneBind_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_checkPassportPhoneBind_call method_call = new lg_userinfo_checkPassportPhoneBind_call(passport, phone, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_checkPassportPhoneBind_call extends TAsyncMethodCall {
      private String passport;
      private String phone;
      public lg_userinfo_checkPassportPhoneBind_call(String passport, String phone, AsyncMethodCallback<lg_userinfo_checkPassportPhoneBind_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.passport = passport;
        this.phone = phone;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_checkPassportPhoneBind", TMessageType.CALL, 0));
        lg_userinfo_checkPassportPhoneBind_args args = new lg_userinfo_checkPassportPhoneBind_args();
        args.setPassport(passport);
        args.setPhone(phone);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_checkPassportPhoneBind();
      }
    }

    public void lg_userinfo_checkUidPhoneBind(String uid, String phone, AsyncMethodCallback<lg_userinfo_checkUidPhoneBind_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_checkUidPhoneBind_call method_call = new lg_userinfo_checkUidPhoneBind_call(uid, phone, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_checkUidPhoneBind_call extends TAsyncMethodCall {
      private String uid;
      private String phone;
      public lg_userinfo_checkUidPhoneBind_call(String uid, String phone, AsyncMethodCallback<lg_userinfo_checkUidPhoneBind_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.phone = phone;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_checkUidPhoneBind", TMessageType.CALL, 0));
        lg_userinfo_checkUidPhoneBind_args args = new lg_userinfo_checkUidPhoneBind_args();
        args.setUid(uid);
        args.setPhone(phone);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_checkUidPhoneBind();
      }
    }

    public void lg_userinfo_checkUidAccountBind(String uid, String account, AsyncMethodCallback<lg_userinfo_checkUidAccountBind_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_checkUidAccountBind_call method_call = new lg_userinfo_checkUidAccountBind_call(uid, account, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_checkUidAccountBind_call extends TAsyncMethodCall {
      private String uid;
      private String account;
      public lg_userinfo_checkUidAccountBind_call(String uid, String account, AsyncMethodCallback<lg_userinfo_checkUidAccountBind_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.account = account;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_checkUidAccountBind", TMessageType.CALL, 0));
        lg_userinfo_checkUidAccountBind_args args = new lg_userinfo_checkUidAccountBind_args();
        args.setUid(uid);
        args.setAccount(account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_checkUidAccountBind();
      }
    }

    public void lg_userinfo_checkPassportAccountBind(String passport, String account, AsyncMethodCallback<lg_userinfo_checkPassportAccountBind_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_checkPassportAccountBind_call method_call = new lg_userinfo_checkPassportAccountBind_call(passport, account, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_checkPassportAccountBind_call extends TAsyncMethodCall {
      private String passport;
      private String account;
      public lg_userinfo_checkPassportAccountBind_call(String passport, String account, AsyncMethodCallback<lg_userinfo_checkPassportAccountBind_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.passport = passport;
        this.account = account;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_checkPassportAccountBind", TMessageType.CALL, 0));
        lg_userinfo_checkPassportAccountBind_args args = new lg_userinfo_checkPassportAccountBind_args();
        args.setPassport(passport);
        args.setAccount(account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_checkPassportAccountBind();
      }
    }

    public void lg_userinfo_checkAccountBindByUid(String uid, AsyncMethodCallback<lg_userinfo_checkAccountBindByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_checkAccountBindByUid_call method_call = new lg_userinfo_checkAccountBindByUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_checkAccountBindByUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_checkAccountBindByUid_call(String uid, AsyncMethodCallback<lg_userinfo_checkAccountBindByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_checkAccountBindByUid", TMessageType.CALL, 0));
        lg_userinfo_checkAccountBindByUid_args args = new lg_userinfo_checkAccountBindByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_checkAccountBindByUid();
      }
    }

    public void lg_userinfo_checkgbNoUsable(String gbid, AsyncMethodCallback<lg_userinfo_checkgbNoUsable_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_checkgbNoUsable_call method_call = new lg_userinfo_checkgbNoUsable_call(gbid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_checkgbNoUsable_call extends TAsyncMethodCall {
      private String gbid;
      public lg_userinfo_checkgbNoUsable_call(String gbid, AsyncMethodCallback<lg_userinfo_checkgbNoUsable_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gbid = gbid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_checkgbNoUsable", TMessageType.CALL, 0));
        lg_userinfo_checkgbNoUsable_args args = new lg_userinfo_checkgbNoUsable_args();
        args.setgbid(gbid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_checkgbNoUsable();
      }
    }

    public void lg_userinfo_checkAccountUsable(String account, AsyncMethodCallback<lg_userinfo_checkAccountUsable_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_checkAccountUsable_call method_call = new lg_userinfo_checkAccountUsable_call(account, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_checkAccountUsable_call extends TAsyncMethodCall {
      private String account;
      public lg_userinfo_checkAccountUsable_call(String account, AsyncMethodCallback<lg_userinfo_checkAccountUsable_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.account = account;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_checkAccountUsable", TMessageType.CALL, 0));
        lg_userinfo_checkAccountUsable_args args = new lg_userinfo_checkAccountUsable_args();
        args.setAccount(account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_checkAccountUsable();
      }
    }

    public void lg_userinfo_checkVerifiedEmailByUid(String uid, AsyncMethodCallback<lg_userinfo_checkVerifiedEmailByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_checkVerifiedEmailByUid_call method_call = new lg_userinfo_checkVerifiedEmailByUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_checkVerifiedEmailByUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_checkVerifiedEmailByUid_call(String uid, AsyncMethodCallback<lg_userinfo_checkVerifiedEmailByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_checkVerifiedEmailByUid", TMessageType.CALL, 0));
        lg_userinfo_checkVerifiedEmailByUid_args args = new lg_userinfo_checkVerifiedEmailByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_checkVerifiedEmailByUid();
      }
    }

    public void lg_userinfo_checkUidIdnumberBind(String uid, String idnumber, AsyncMethodCallback<lg_userinfo_checkUidIdnumberBind_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_checkUidIdnumberBind_call method_call = new lg_userinfo_checkUidIdnumberBind_call(uid, idnumber, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_checkUidIdnumberBind_call extends TAsyncMethodCall {
      private String uid;
      private String idnumber;
      public lg_userinfo_checkUidIdnumberBind_call(String uid, String idnumber, AsyncMethodCallback<lg_userinfo_checkUidIdnumberBind_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.idnumber = idnumber;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_checkUidIdnumberBind", TMessageType.CALL, 0));
        lg_userinfo_checkUidIdnumberBind_args args = new lg_userinfo_checkUidIdnumberBind_args();
        args.setUid(uid);
        args.setIdnumber(idnumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_checkUidIdnumberBind();
      }
    }

    public void lg_userinfo_checkRegtimeByUid(String uid, String regtime, AsyncMethodCallback<lg_userinfo_checkRegtimeByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_checkRegtimeByUid_call method_call = new lg_userinfo_checkRegtimeByUid_call(uid, regtime, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_checkRegtimeByUid_call extends TAsyncMethodCall {
      private String uid;
      private String regtime;
      public lg_userinfo_checkRegtimeByUid_call(String uid, String regtime, AsyncMethodCallback<lg_userinfo_checkRegtimeByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.regtime = regtime;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_checkRegtimeByUid", TMessageType.CALL, 0));
        lg_userinfo_checkRegtimeByUid_args args = new lg_userinfo_checkRegtimeByUid_args();
        args.setUid(uid);
        args.setRegtime(regtime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_checkRegtimeByUid();
      }
    }

    public void lg_userinfo_getUserBindCountByMobile(String mobile, AsyncMethodCallback<lg_userinfo_getUserBindCountByMobile_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getUserBindCountByMobile_call method_call = new lg_userinfo_getUserBindCountByMobile_call(mobile, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getUserBindCountByMobile_call extends TAsyncMethodCall {
      private String mobile;
      public lg_userinfo_getUserBindCountByMobile_call(String mobile, AsyncMethodCallback<lg_userinfo_getUserBindCountByMobile_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mobile = mobile;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getUserBindCountByMobile", TMessageType.CALL, 0));
        lg_userinfo_getUserBindCountByMobile_args args = new lg_userinfo_getUserBindCountByMobile_args();
        args.setMobile(mobile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getUserBindCountByMobile();
      }
    }

    public void lg_userinfo_getMibaoInfoBindByUid(String uid, AsyncMethodCallback<lg_userinfo_getMibaoInfoBindByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getMibaoInfoBindByUid_call method_call = new lg_userinfo_getMibaoInfoBindByUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getMibaoInfoBindByUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_getMibaoInfoBindByUid_call(String uid, AsyncMethodCallback<lg_userinfo_getMibaoInfoBindByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getMibaoInfoBindByUid", TMessageType.CALL, 0));
        lg_userinfo_getMibaoInfoBindByUid_args args = new lg_userinfo_getMibaoInfoBindByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getMibaoInfoBindByUid();
      }
    }

    public void lg_userinfo_getMibaoInfoBindByPp(String passport, AsyncMethodCallback<lg_userinfo_getMibaoInfoBindByPp_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getMibaoInfoBindByPp_call method_call = new lg_userinfo_getMibaoInfoBindByPp_call(passport, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getMibaoInfoBindByPp_call extends TAsyncMethodCall {
      private String passport;
      public lg_userinfo_getMibaoInfoBindByPp_call(String passport, AsyncMethodCallback<lg_userinfo_getMibaoInfoBindByPp_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.passport = passport;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getMibaoInfoBindByPp", TMessageType.CALL, 0));
        lg_userinfo_getMibaoInfoBindByPp_args args = new lg_userinfo_getMibaoInfoBindByPp_args();
        args.setPassport(passport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getMibaoInfoBindByPp();
      }
    }

    public void lg_userinfo_getgbidLoginInfoByUid(String uid, AsyncMethodCallback<lg_userinfo_getgbidLoginInfoByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getgbidLoginInfoByUid_call method_call = new lg_userinfo_getgbidLoginInfoByUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getgbidLoginInfoByUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_getgbidLoginInfoByUid_call(String uid, AsyncMethodCallback<lg_userinfo_getgbidLoginInfoByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getgbidLoginInfoByUid", TMessageType.CALL, 0));
        lg_userinfo_getgbidLoginInfoByUid_args args = new lg_userinfo_getgbidLoginInfoByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getgbidLoginInfoByUid();
      }
    }

    public void lg_userinfo_ping(int seq, AsyncMethodCallback<lg_userinfo_ping_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_ping_call method_call = new lg_userinfo_ping_call(seq, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_ping_call extends TAsyncMethodCall {
      private int seq;
      public lg_userinfo_ping_call(int seq, AsyncMethodCallback<lg_userinfo_ping_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.seq = seq;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_ping", TMessageType.CALL, 0));
        lg_userinfo_ping_args args = new lg_userinfo_ping_args();
        args.setSeq(seq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_ping();
      }
    }

    public void lg_userinfo_transPpSeqgbNoByUid(String uid, AsyncMethodCallback<lg_userinfo_transPpSeqgbNoByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_transPpSeqgbNoByUid_call method_call = new lg_userinfo_transPpSeqgbNoByUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_transPpSeqgbNoByUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_transPpSeqgbNoByUid_call(String uid, AsyncMethodCallback<lg_userinfo_transPpSeqgbNoByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_transPpSeqgbNoByUid", TMessageType.CALL, 0));
        lg_userinfo_transPpSeqgbNoByUid_args args = new lg_userinfo_transPpSeqgbNoByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PassportUdbseqImidRet getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_transPpSeqgbNoByUid();
      }
    }

    public void lg_userinfo_transUidSeqgbNoByPp(String passports, AsyncMethodCallback<lg_userinfo_transUidSeqgbNoByPp_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_transUidSeqgbNoByPp_call method_call = new lg_userinfo_transUidSeqgbNoByPp_call(passports, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_transUidSeqgbNoByPp_call extends TAsyncMethodCall {
      private String passports;
      public lg_userinfo_transUidSeqgbNoByPp_call(String passports, AsyncMethodCallback<lg_userinfo_transUidSeqgbNoByPp_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.passports = passports;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_transUidSeqgbNoByPp", TMessageType.CALL, 0));
        lg_userinfo_transUidSeqgbNoByPp_args args = new lg_userinfo_transUidSeqgbNoByPp_args();
        args.setPassports(passports);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public gbuidUdbseqImidRet getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_transUidSeqgbNoByPp();
      }
    }

    public void lg_userinfo_batchTransPpsActsByUids(List<String> uids, AsyncMethodCallback<lg_userinfo_batchTransPpsActsByUids_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_batchTransPpsActsByUids_call method_call = new lg_userinfo_batchTransPpsActsByUids_call(uids, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_batchTransPpsActsByUids_call extends TAsyncMethodCall {
      private List<String> uids;
      public lg_userinfo_batchTransPpsActsByUids_call(List<String> uids, AsyncMethodCallback<lg_userinfo_batchTransPpsActsByUids_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uids = uids;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_batchTransPpsActsByUids", TMessageType.CALL, 0));
        lg_userinfo_batchTransPpsActsByUids_args args = new lg_userinfo_batchTransPpsActsByUids_args();
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PassportEmailRet getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_batchTransPpsActsByUids();
      }
    }

    public void lg_userinfo_batchTransPpsActsByUidsEx(List<String> uids, AsyncMethodCallback<lg_userinfo_batchTransPpsActsByUidsEx_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_batchTransPpsActsByUidsEx_call method_call = new lg_userinfo_batchTransPpsActsByUidsEx_call(uids, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_batchTransPpsActsByUidsEx_call extends TAsyncMethodCall {
      private List<String> uids;
      public lg_userinfo_batchTransPpsActsByUidsEx_call(List<String> uids, AsyncMethodCallback<lg_userinfo_batchTransPpsActsByUidsEx_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uids = uids;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_batchTransPpsActsByUidsEx", TMessageType.CALL, 0));
        lg_userinfo_batchTransPpsActsByUidsEx_args args = new lg_userinfo_batchTransPpsActsByUidsEx_args();
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PassportEmailRet getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_batchTransPpsActsByUidsEx();
      }
    }

    public void lg_userinfo_batchTransgbNos(List<String> gbids, AsyncMethodCallback<lg_userinfo_batchTransgbNos_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_batchTransgbNos_call method_call = new lg_userinfo_batchTransgbNos_call(gbids, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_batchTransgbNos_call extends TAsyncMethodCall {
      private List<String> gbids;
      public lg_userinfo_batchTransgbNos_call(List<String> gbids, AsyncMethodCallback<lg_userinfo_batchTransgbNos_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gbids = gbids;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_batchTransgbNos", TMessageType.CALL, 0));
        lg_userinfo_batchTransgbNos_args args = new lg_userinfo_batchTransgbNos_args();
        args.setgbids(gbids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_batchTransgbNos();
      }
    }

    public void lg_userinfo_batchTransUids(List<String> uids, AsyncMethodCallback<lg_userinfo_batchTransUids_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_batchTransUids_call method_call = new lg_userinfo_batchTransUids_call(uids, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_batchTransUids_call extends TAsyncMethodCall {
      private List<String> uids;
      public lg_userinfo_batchTransUids_call(List<String> uids, AsyncMethodCallback<lg_userinfo_batchTransUids_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uids = uids;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_batchTransUids", TMessageType.CALL, 0));
        lg_userinfo_batchTransUids_args args = new lg_userinfo_batchTransUids_args();
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_batchTransUids();
      }
    }

    public void lg_userinfo_getMibaoQuestionByUid(String uid, AsyncMethodCallback<lg_userinfo_getMibaoQuestionByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getMibaoQuestionByUid_call method_call = new lg_userinfo_getMibaoQuestionByUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getMibaoQuestionByUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_getMibaoQuestionByUid_call(String uid, AsyncMethodCallback<lg_userinfo_getMibaoQuestionByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getMibaoQuestionByUid", TMessageType.CALL, 0));
        lg_userinfo_getMibaoQuestionByUid_args args = new lg_userinfo_getMibaoQuestionByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MibaoQuesRes getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getMibaoQuestionByUid();
      }
    }

    public void lg_userinfo_checkMibaoQAByPpAct(MibaoQAReq mibaoReq, AsyncMethodCallback<lg_userinfo_checkMibaoQAByPpAct_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_checkMibaoQAByPpAct_call method_call = new lg_userinfo_checkMibaoQAByPpAct_call(mibaoReq, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_checkMibaoQAByPpAct_call extends TAsyncMethodCall {
      private MibaoQAReq mibaoReq;
      public lg_userinfo_checkMibaoQAByPpAct_call(MibaoQAReq mibaoReq, AsyncMethodCallback<lg_userinfo_checkMibaoQAByPpAct_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mibaoReq = mibaoReq;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_checkMibaoQAByPpAct", TMessageType.CALL, 0));
        lg_userinfo_checkMibaoQAByPpAct_args args = new lg_userinfo_checkMibaoQAByPpAct_args();
        args.setMibaoReq(mibaoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MibaoQARes getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_checkMibaoQAByPpAct();
      }
    }

    public void lg_userinfo_checkMibaoQAByUid(MibaoQAReq mibaoReq, AsyncMethodCallback<lg_userinfo_checkMibaoQAByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_checkMibaoQAByUid_call method_call = new lg_userinfo_checkMibaoQAByUid_call(mibaoReq, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_checkMibaoQAByUid_call extends TAsyncMethodCall {
      private MibaoQAReq mibaoReq;
      public lg_userinfo_checkMibaoQAByUid_call(MibaoQAReq mibaoReq, AsyncMethodCallback<lg_userinfo_checkMibaoQAByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mibaoReq = mibaoReq;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_checkMibaoQAByUid", TMessageType.CALL, 0));
        lg_userinfo_checkMibaoQAByUid_args args = new lg_userinfo_checkMibaoQAByUid_args();
        args.setMibaoReq(mibaoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MibaoQARes getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_checkMibaoQAByUid();
      }
    }

    public void lg_userinfo_getIDRegipMobileByUid(String uid, AsyncMethodCallback<lg_userinfo_getIDRegipMobileByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getIDRegipMobileByUid_call method_call = new lg_userinfo_getIDRegipMobileByUid_call(uid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getIDRegipMobileByUid_call extends TAsyncMethodCall {
      private String uid;
      public lg_userinfo_getIDRegipMobileByUid_call(String uid, AsyncMethodCallback<lg_userinfo_getIDRegipMobileByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getIDRegipMobileByUid", TMessageType.CALL, 0));
        lg_userinfo_getIDRegipMobileByUid_args args = new lg_userinfo_getIDRegipMobileByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IDRegipMobileRes getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getIDRegipMobileByUid();
      }
    }

    public void lg_userinfo_getImidInfoByImidList(List<Integer> imids, AsyncMethodCallback<lg_userinfo_getImidInfoByImidList_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getImidInfoByImidList_call method_call = new lg_userinfo_getImidInfoByImidList_call(imids, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getImidInfoByImidList_call extends TAsyncMethodCall {
      private List<Integer> imids;
      public lg_userinfo_getImidInfoByImidList_call(List<Integer> imids, AsyncMethodCallback<lg_userinfo_getImidInfoByImidList_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imids = imids;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getImidInfoByImidList", TMessageType.CALL, 0));
        lg_userinfo_getImidInfoByImidList_args args = new lg_userinfo_getImidInfoByImidList_args();
        args.setImids(imids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ImidInfoRet getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getImidInfoByImidList();
      }
    }

    public void lg_userinfo_getImidInfoByUidList(List<Integer> uids, AsyncMethodCallback<lg_userinfo_getImidInfoByUidList_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getImidInfoByUidList_call method_call = new lg_userinfo_getImidInfoByUidList_call(uids, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getImidInfoByUidList_call extends TAsyncMethodCall {
      private List<Integer> uids;
      public lg_userinfo_getImidInfoByUidList_call(List<Integer> uids, AsyncMethodCallback<lg_userinfo_getImidInfoByUidList_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uids = uids;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getImidInfoByUidList", TMessageType.CALL, 0));
        lg_userinfo_getImidInfoByUidList_args args = new lg_userinfo_getImidInfoByUidList_args();
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ImidInfoRet getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getImidInfoByUidList();
      }
    }

    public void lg_userinfo_getIDInfoByUid(IDInfoReq idInfo, AsyncMethodCallback<lg_userinfo_getIDInfoByUid_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getIDInfoByUid_call method_call = new lg_userinfo_getIDInfoByUid_call(idInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getIDInfoByUid_call extends TAsyncMethodCall {
      private IDInfoReq idInfo;
      public lg_userinfo_getIDInfoByUid_call(IDInfoReq idInfo, AsyncMethodCallback<lg_userinfo_getIDInfoByUid_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idInfo = idInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getIDInfoByUid", TMessageType.CALL, 0));
        lg_userinfo_getIDInfoByUid_args args = new lg_userinfo_getIDInfoByUid_args();
        args.setIdInfo(idInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IDInfoRes getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getIDInfoByUid();
      }
    }

    public void lg_userinfo_getIDInfoByUidEx(IDInfoExReq idInfo, AsyncMethodCallback<lg_userinfo_getIDInfoByUidEx_call> resultHandler) throws TException {
      checkReady();
      lg_userinfo_getIDInfoByUidEx_call method_call = new lg_userinfo_getIDInfoByUidEx_call(idInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lg_userinfo_getIDInfoByUidEx_call extends TAsyncMethodCall {
      private IDInfoExReq idInfo;
      public lg_userinfo_getIDInfoByUidEx_call(IDInfoExReq idInfo, AsyncMethodCallback<lg_userinfo_getIDInfoByUidEx_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idInfo = idInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lg_userinfo_getIDInfoByUidEx", TMessageType.CALL, 0));
        lg_userinfo_getIDInfoByUidEx_args args = new lg_userinfo_getIDInfoByUidEx_args();
        args.setIdInfo(idInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IDInfoRes getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lg_userinfo_getIDInfoByUidEx();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("lg_userinfo_getUidsFromPps", new lg_userinfo_getUidsFromPps());
      processMap_.put("lg_userinfo_getEmailsFromPps", new lg_userinfo_getEmailsFromPps());
      processMap_.put("lg_userinfo_getPpsFromUids", new lg_userinfo_getPpsFromUids());
      processMap_.put("lg_userinfo_getMobilesFromPps", new lg_userinfo_getMobilesFromPps());
      processMap_.put("lg_userinfo_getMobilesFromUids", new lg_userinfo_getMobilesFromUids());
      processMap_.put("lg_userinfo_getAuthStatusByUid", new lg_userinfo_getAuthStatusByUid());
      processMap_.put("lg_userinfo_sendMsgByPps", new lg_userinfo_sendMsgByPps());
      processMap_.put("lg_userinfo_sendMsgByUids", new lg_userinfo_sendMsgByUids());
      processMap_.put("lg_userinfo_sendEmailByPp", new lg_userinfo_sendEmailByPp());
      processMap_.put("lg_userinfo_sendEmailByUid", new lg_userinfo_sendEmailByUid());
      processMap_.put("lg_userinfo_getMobileMaskByPp", new lg_userinfo_getMobileMaskByPp());
      processMap_.put("lg_userinfo_getMobileMaskByUid", new lg_userinfo_getMobileMaskByUid());
      processMap_.put("lg_userinfo_getEmailMaskByPp", new lg_userinfo_getEmailMaskByPp());
      processMap_.put("lg_userinfo_getEmailMaskByUid", new lg_userinfo_getEmailMaskByUid());
      processMap_.put("lg_userinfo_transPassportByUid", new lg_userinfo_transPassportByUid());
      processMap_.put("lg_userinfo_transPassport", new lg_userinfo_transPassport());
      processMap_.put("lg_userinfo_transgbNo", new lg_userinfo_transgbNo());
      processMap_.put("lg_userinfo_transUid", new lg_userinfo_transUid());
      processMap_.put("lg_userinfo_transAccount", new lg_userinfo_transAccount());
      processMap_.put("lg_userinfo_transAccountByUid", new lg_userinfo_transAccountByUid());
      processMap_.put("lg_userinfo_transPassportByAccount", new lg_userinfo_transPassportByAccount());
      processMap_.put("lg_userinfo_transUdbseqByUid", new lg_userinfo_transUdbseqByUid());
      processMap_.put("lg_userinfo_transRegipByUid", new lg_userinfo_transRegipByUid());
      processMap_.put("lg_userinfo_gainsPassport", new lg_userinfo_gainsPassport());
      processMap_.put("lg_userinfo_gainsgbuid", new lg_userinfo_gainsgbuid());
      processMap_.put("lg_userinfo_checkPassportPhoneBind", new lg_userinfo_checkPassportPhoneBind());
      processMap_.put("lg_userinfo_checkUidPhoneBind", new lg_userinfo_checkUidPhoneBind());
      processMap_.put("lg_userinfo_checkUidAccountBind", new lg_userinfo_checkUidAccountBind());
      processMap_.put("lg_userinfo_checkPassportAccountBind", new lg_userinfo_checkPassportAccountBind());
      processMap_.put("lg_userinfo_checkAccountBindByUid", new lg_userinfo_checkAccountBindByUid());
      processMap_.put("lg_userinfo_checkgbNoUsable", new lg_userinfo_checkgbNoUsable());
      processMap_.put("lg_userinfo_checkAccountUsable", new lg_userinfo_checkAccountUsable());
      processMap_.put("lg_userinfo_checkVerifiedEmailByUid", new lg_userinfo_checkVerifiedEmailByUid());
      processMap_.put("lg_userinfo_checkUidIdnumberBind", new lg_userinfo_checkUidIdnumberBind());
      processMap_.put("lg_userinfo_checkRegtimeByUid", new lg_userinfo_checkRegtimeByUid());
      processMap_.put("lg_userinfo_getUserBindCountByMobile", new lg_userinfo_getUserBindCountByMobile());
      processMap_.put("lg_userinfo_getMibaoInfoBindByUid", new lg_userinfo_getMibaoInfoBindByUid());
      processMap_.put("lg_userinfo_getMibaoInfoBindByPp", new lg_userinfo_getMibaoInfoBindByPp());
      processMap_.put("lg_userinfo_getgbidLoginInfoByUid", new lg_userinfo_getgbidLoginInfoByUid());
      processMap_.put("lg_userinfo_ping", new lg_userinfo_ping());
      processMap_.put("lg_userinfo_transPpSeqgbNoByUid", new lg_userinfo_transPpSeqgbNoByUid());
      processMap_.put("lg_userinfo_transUidSeqgbNoByPp", new lg_userinfo_transUidSeqgbNoByPp());
      processMap_.put("lg_userinfo_batchTransPpsActsByUids", new lg_userinfo_batchTransPpsActsByUids());
      processMap_.put("lg_userinfo_batchTransPpsActsByUidsEx", new lg_userinfo_batchTransPpsActsByUidsEx());
      processMap_.put("lg_userinfo_batchTransgbNos", new lg_userinfo_batchTransgbNos());
      processMap_.put("lg_userinfo_batchTransUids", new lg_userinfo_batchTransUids());
      processMap_.put("lg_userinfo_getMibaoQuestionByUid", new lg_userinfo_getMibaoQuestionByUid());
      processMap_.put("lg_userinfo_checkMibaoQAByPpAct", new lg_userinfo_checkMibaoQAByPpAct());
      processMap_.put("lg_userinfo_checkMibaoQAByUid", new lg_userinfo_checkMibaoQAByUid());
      processMap_.put("lg_userinfo_getIDRegipMobileByUid", new lg_userinfo_getIDRegipMobileByUid());
      processMap_.put("lg_userinfo_getImidInfoByImidList", new lg_userinfo_getImidInfoByImidList());
      processMap_.put("lg_userinfo_getImidInfoByUidList", new lg_userinfo_getImidInfoByUidList());
      processMap_.put("lg_userinfo_getIDInfoByUid", new lg_userinfo_getIDInfoByUid());
      processMap_.put("lg_userinfo_getIDInfoByUidEx", new lg_userinfo_getIDInfoByUidEx());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class lg_userinfo_getUidsFromPps implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getUidsFromPps_args args = new lg_userinfo_getUidsFromPps_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getUidsFromPps", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getUidsFromPps_result result = new lg_userinfo_getUidsFromPps_result();
        result.success = iface_.lg_userinfo_getUidsFromPps(args.passports);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getUidsFromPps", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getEmailsFromPps implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getEmailsFromPps_args args = new lg_userinfo_getEmailsFromPps_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getEmailsFromPps", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getEmailsFromPps_result result = new lg_userinfo_getEmailsFromPps_result();
        result.success = iface_.lg_userinfo_getEmailsFromPps(args.passports);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getEmailsFromPps", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getPpsFromUids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getPpsFromUids_args args = new lg_userinfo_getPpsFromUids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getPpsFromUids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getPpsFromUids_result result = new lg_userinfo_getPpsFromUids_result();
        result.success = iface_.lg_userinfo_getPpsFromUids(args.uids);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getPpsFromUids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getMobilesFromPps implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getMobilesFromPps_args args = new lg_userinfo_getMobilesFromPps_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getMobilesFromPps", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getMobilesFromPps_result result = new lg_userinfo_getMobilesFromPps_result();
        result.success = iface_.lg_userinfo_getMobilesFromPps(args.passports);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getMobilesFromPps", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getMobilesFromUids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getMobilesFromUids_args args = new lg_userinfo_getMobilesFromUids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getMobilesFromUids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getMobilesFromUids_result result = new lg_userinfo_getMobilesFromUids_result();
        result.success = iface_.lg_userinfo_getMobilesFromUids(args.uids);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getMobilesFromUids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getAuthStatusByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getAuthStatusByUid_args args = new lg_userinfo_getAuthStatusByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getAuthStatusByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getAuthStatusByUid_result result = new lg_userinfo_getAuthStatusByUid_result();
        result.success = iface_.lg_userinfo_getAuthStatusByUid(args.uid);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getAuthStatusByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_sendMsgByPps implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_sendMsgByPps_args args = new lg_userinfo_sendMsgByPps_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_sendMsgByPps", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_sendMsgByPps_result result = new lg_userinfo_sendMsgByPps_result();
        result.success = iface_.lg_userinfo_sendMsgByPps(args.passports, args.content);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_sendMsgByPps", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_sendMsgByUids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_sendMsgByUids_args args = new lg_userinfo_sendMsgByUids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_sendMsgByUids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_sendMsgByUids_result result = new lg_userinfo_sendMsgByUids_result();
        result.success = iface_.lg_userinfo_sendMsgByUids(args.uids, args.content);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_sendMsgByUids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_sendEmailByPp implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_sendEmailByPp_args args = new lg_userinfo_sendEmailByPp_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_sendEmailByPp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_sendEmailByPp_result result = new lg_userinfo_sendEmailByPp_result();
        result.success = iface_.lg_userinfo_sendEmailByPp(args.emailInfo);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_sendEmailByPp", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_sendEmailByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_sendEmailByUid_args args = new lg_userinfo_sendEmailByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_sendEmailByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_sendEmailByUid_result result = new lg_userinfo_sendEmailByUid_result();
        result.success = iface_.lg_userinfo_sendEmailByUid(args.emailInfo);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_sendEmailByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getMobileMaskByPp implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getMobileMaskByPp_args args = new lg_userinfo_getMobileMaskByPp_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getMobileMaskByPp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getMobileMaskByPp_result result = new lg_userinfo_getMobileMaskByPp_result();
        result.success = iface_.lg_userinfo_getMobileMaskByPp(args.maskInfo);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getMobileMaskByPp", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getMobileMaskByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getMobileMaskByUid_args args = new lg_userinfo_getMobileMaskByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getMobileMaskByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getMobileMaskByUid_result result = new lg_userinfo_getMobileMaskByUid_result();
        result.success = iface_.lg_userinfo_getMobileMaskByUid(args.maskInfo);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getMobileMaskByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getEmailMaskByPp implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getEmailMaskByPp_args args = new lg_userinfo_getEmailMaskByPp_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getEmailMaskByPp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getEmailMaskByPp_result result = new lg_userinfo_getEmailMaskByPp_result();
        result.success = iface_.lg_userinfo_getEmailMaskByPp(args.maskInfo);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getEmailMaskByPp", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getEmailMaskByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getEmailMaskByUid_args args = new lg_userinfo_getEmailMaskByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getEmailMaskByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getEmailMaskByUid_result result = new lg_userinfo_getEmailMaskByUid_result();
        result.success = iface_.lg_userinfo_getEmailMaskByUid(args.maskInfo);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getEmailMaskByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_transPassportByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_transPassportByUid_args args = new lg_userinfo_transPassportByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_transPassportByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_transPassportByUid_result result = new lg_userinfo_transPassportByUid_result();
        result.success = iface_.lg_userinfo_transPassportByUid(args.uid);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_transPassportByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_transPassport implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_transPassport_args args = new lg_userinfo_transPassport_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_transPassport", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_transPassport_result result = new lg_userinfo_transPassport_result();
        result.success = iface_.lg_userinfo_transPassport(args.passport);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_transPassport", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_transgbNo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_transgbNo_args args = new lg_userinfo_transgbNo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_transgbNo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_transgbNo_result result = new lg_userinfo_transgbNo_result();
        result.success = iface_.lg_userinfo_transgbNo(args.gbid);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_transgbNo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_transUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_transUid_args args = new lg_userinfo_transUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_transUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_transUid_result result = new lg_userinfo_transUid_result();
        result.success = iface_.lg_userinfo_transUid(args.uid);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_transUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_transAccount implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_transAccount_args args = new lg_userinfo_transAccount_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_transAccount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_transAccount_result result = new lg_userinfo_transAccount_result();
        result.success = iface_.lg_userinfo_transAccount(args.email);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_transAccount", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_transAccountByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_transAccountByUid_args args = new lg_userinfo_transAccountByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_transAccountByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_transAccountByUid_result result = new lg_userinfo_transAccountByUid_result();
        result.success = iface_.lg_userinfo_transAccountByUid(args.uid);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_transAccountByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_transPassportByAccount implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_transPassportByAccount_args args = new lg_userinfo_transPassportByAccount_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_transPassportByAccount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_transPassportByAccount_result result = new lg_userinfo_transPassportByAccount_result();
        result.success = iface_.lg_userinfo_transPassportByAccount(args.email);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_transPassportByAccount", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_transUdbseqByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_transUdbseqByUid_args args = new lg_userinfo_transUdbseqByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_transUdbseqByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_transUdbseqByUid_result result = new lg_userinfo_transUdbseqByUid_result();
        result.success = iface_.lg_userinfo_transUdbseqByUid(args.uid);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_transUdbseqByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_transRegipByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_transRegipByUid_args args = new lg_userinfo_transRegipByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_transRegipByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_transRegipByUid_result result = new lg_userinfo_transRegipByUid_result();
        result.success = iface_.lg_userinfo_transRegipByUid(args.uid);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_transRegipByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_gainsPassport implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_gainsPassport_args args = new lg_userinfo_gainsPassport_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_gainsPassport", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_gainsPassport_result result = new lg_userinfo_gainsPassport_result();
        result.success = iface_.lg_userinfo_gainsPassport(args.type, args.request);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_gainsPassport", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_gainsgbuid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_gainsgbuid_args args = new lg_userinfo_gainsgbuid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_gainsgbuid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_gainsgbuid_result result = new lg_userinfo_gainsgbuid_result();
        result.success = iface_.lg_userinfo_gainsgbuid(args.type, args.request);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_gainsgbuid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_checkPassportPhoneBind implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_checkPassportPhoneBind_args args = new lg_userinfo_checkPassportPhoneBind_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_checkPassportPhoneBind", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_checkPassportPhoneBind_result result = new lg_userinfo_checkPassportPhoneBind_result();
        result.success = iface_.lg_userinfo_checkPassportPhoneBind(args.passport, args.phone);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_checkPassportPhoneBind", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_checkUidPhoneBind implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_checkUidPhoneBind_args args = new lg_userinfo_checkUidPhoneBind_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_checkUidPhoneBind", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_checkUidPhoneBind_result result = new lg_userinfo_checkUidPhoneBind_result();
        result.success = iface_.lg_userinfo_checkUidPhoneBind(args.uid, args.phone);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_checkUidPhoneBind", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_checkUidAccountBind implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_checkUidAccountBind_args args = new lg_userinfo_checkUidAccountBind_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_checkUidAccountBind", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_checkUidAccountBind_result result = new lg_userinfo_checkUidAccountBind_result();
        result.success = iface_.lg_userinfo_checkUidAccountBind(args.uid, args.account);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_checkUidAccountBind", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_checkPassportAccountBind implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_checkPassportAccountBind_args args = new lg_userinfo_checkPassportAccountBind_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_checkPassportAccountBind", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_checkPassportAccountBind_result result = new lg_userinfo_checkPassportAccountBind_result();
        result.success = iface_.lg_userinfo_checkPassportAccountBind(args.passport, args.account);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_checkPassportAccountBind", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_checkAccountBindByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_checkAccountBindByUid_args args = new lg_userinfo_checkAccountBindByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_checkAccountBindByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_checkAccountBindByUid_result result = new lg_userinfo_checkAccountBindByUid_result();
        result.success = iface_.lg_userinfo_checkAccountBindByUid(args.uid);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_checkAccountBindByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_checkgbNoUsable implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_checkgbNoUsable_args args = new lg_userinfo_checkgbNoUsable_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_checkgbNoUsable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_checkgbNoUsable_result result = new lg_userinfo_checkgbNoUsable_result();
        result.success = iface_.lg_userinfo_checkgbNoUsable(args.gbid);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_checkgbNoUsable", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_checkAccountUsable implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_checkAccountUsable_args args = new lg_userinfo_checkAccountUsable_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_checkAccountUsable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_checkAccountUsable_result result = new lg_userinfo_checkAccountUsable_result();
        result.success = iface_.lg_userinfo_checkAccountUsable(args.account);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_checkAccountUsable", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_checkVerifiedEmailByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_checkVerifiedEmailByUid_args args = new lg_userinfo_checkVerifiedEmailByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_checkVerifiedEmailByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_checkVerifiedEmailByUid_result result = new lg_userinfo_checkVerifiedEmailByUid_result();
        result.success = iface_.lg_userinfo_checkVerifiedEmailByUid(args.uid);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_checkVerifiedEmailByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_checkUidIdnumberBind implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_checkUidIdnumberBind_args args = new lg_userinfo_checkUidIdnumberBind_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_checkUidIdnumberBind", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_checkUidIdnumberBind_result result = new lg_userinfo_checkUidIdnumberBind_result();
        result.success = iface_.lg_userinfo_checkUidIdnumberBind(args.uid, args.idnumber);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_checkUidIdnumberBind", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_checkRegtimeByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_checkRegtimeByUid_args args = new lg_userinfo_checkRegtimeByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_checkRegtimeByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_checkRegtimeByUid_result result = new lg_userinfo_checkRegtimeByUid_result();
        result.success = iface_.lg_userinfo_checkRegtimeByUid(args.uid, args.regtime);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_checkRegtimeByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getUserBindCountByMobile implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getUserBindCountByMobile_args args = new lg_userinfo_getUserBindCountByMobile_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getUserBindCountByMobile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getUserBindCountByMobile_result result = new lg_userinfo_getUserBindCountByMobile_result();
        result.success = iface_.lg_userinfo_getUserBindCountByMobile(args.mobile);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getUserBindCountByMobile", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getMibaoInfoBindByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getMibaoInfoBindByUid_args args = new lg_userinfo_getMibaoInfoBindByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getMibaoInfoBindByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getMibaoInfoBindByUid_result result = new lg_userinfo_getMibaoInfoBindByUid_result();
        result.success = iface_.lg_userinfo_getMibaoInfoBindByUid(args.uid);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getMibaoInfoBindByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getMibaoInfoBindByPp implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getMibaoInfoBindByPp_args args = new lg_userinfo_getMibaoInfoBindByPp_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getMibaoInfoBindByPp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getMibaoInfoBindByPp_result result = new lg_userinfo_getMibaoInfoBindByPp_result();
        result.success = iface_.lg_userinfo_getMibaoInfoBindByPp(args.passport);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getMibaoInfoBindByPp", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getgbidLoginInfoByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getgbidLoginInfoByUid_args args = new lg_userinfo_getgbidLoginInfoByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getgbidLoginInfoByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getgbidLoginInfoByUid_result result = new lg_userinfo_getgbidLoginInfoByUid_result();
        result.success = iface_.lg_userinfo_getgbidLoginInfoByUid(args.uid);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getgbidLoginInfoByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_ping implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_ping_args args = new lg_userinfo_ping_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_ping", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_ping_result result = new lg_userinfo_ping_result();
        result.success = iface_.lg_userinfo_ping(args.seq);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_ping", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_transPpSeqgbNoByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_transPpSeqgbNoByUid_args args = new lg_userinfo_transPpSeqgbNoByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_transPpSeqgbNoByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_transPpSeqgbNoByUid_result result = new lg_userinfo_transPpSeqgbNoByUid_result();
        result.success = iface_.lg_userinfo_transPpSeqgbNoByUid(args.uid);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_transPpSeqgbNoByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_transUidSeqgbNoByPp implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_transUidSeqgbNoByPp_args args = new lg_userinfo_transUidSeqgbNoByPp_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_transUidSeqgbNoByPp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_transUidSeqgbNoByPp_result result = new lg_userinfo_transUidSeqgbNoByPp_result();
        result.success = iface_.lg_userinfo_transUidSeqgbNoByPp(args.passports);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_transUidSeqgbNoByPp", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_batchTransPpsActsByUids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_batchTransPpsActsByUids_args args = new lg_userinfo_batchTransPpsActsByUids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_batchTransPpsActsByUids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_batchTransPpsActsByUids_result result = new lg_userinfo_batchTransPpsActsByUids_result();
        result.success = iface_.lg_userinfo_batchTransPpsActsByUids(args.uids);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_batchTransPpsActsByUids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_batchTransPpsActsByUidsEx implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_batchTransPpsActsByUidsEx_args args = new lg_userinfo_batchTransPpsActsByUidsEx_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_batchTransPpsActsByUidsEx", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_batchTransPpsActsByUidsEx_result result = new lg_userinfo_batchTransPpsActsByUidsEx_result();
        result.success = iface_.lg_userinfo_batchTransPpsActsByUidsEx(args.uids);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_batchTransPpsActsByUidsEx", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_batchTransgbNos implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_batchTransgbNos_args args = new lg_userinfo_batchTransgbNos_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_batchTransgbNos", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_batchTransgbNos_result result = new lg_userinfo_batchTransgbNos_result();
        result.success = iface_.lg_userinfo_batchTransgbNos(args.gbids);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_batchTransgbNos", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_batchTransUids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_batchTransUids_args args = new lg_userinfo_batchTransUids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_batchTransUids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_batchTransUids_result result = new lg_userinfo_batchTransUids_result();
        result.success = iface_.lg_userinfo_batchTransUids(args.uids);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_batchTransUids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getMibaoQuestionByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getMibaoQuestionByUid_args args = new lg_userinfo_getMibaoQuestionByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getMibaoQuestionByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getMibaoQuestionByUid_result result = new lg_userinfo_getMibaoQuestionByUid_result();
        result.success = iface_.lg_userinfo_getMibaoQuestionByUid(args.uid);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getMibaoQuestionByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_checkMibaoQAByPpAct implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_checkMibaoQAByPpAct_args args = new lg_userinfo_checkMibaoQAByPpAct_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_checkMibaoQAByPpAct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_checkMibaoQAByPpAct_result result = new lg_userinfo_checkMibaoQAByPpAct_result();
        result.success = iface_.lg_userinfo_checkMibaoQAByPpAct(args.mibaoReq);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_checkMibaoQAByPpAct", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_checkMibaoQAByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_checkMibaoQAByUid_args args = new lg_userinfo_checkMibaoQAByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_checkMibaoQAByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_checkMibaoQAByUid_result result = new lg_userinfo_checkMibaoQAByUid_result();
        result.success = iface_.lg_userinfo_checkMibaoQAByUid(args.mibaoReq);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_checkMibaoQAByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getIDRegipMobileByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getIDRegipMobileByUid_args args = new lg_userinfo_getIDRegipMobileByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getIDRegipMobileByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getIDRegipMobileByUid_result result = new lg_userinfo_getIDRegipMobileByUid_result();
        result.success = iface_.lg_userinfo_getIDRegipMobileByUid(args.uid);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getIDRegipMobileByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getImidInfoByImidList implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getImidInfoByImidList_args args = new lg_userinfo_getImidInfoByImidList_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getImidInfoByImidList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getImidInfoByImidList_result result = new lg_userinfo_getImidInfoByImidList_result();
        result.success = iface_.lg_userinfo_getImidInfoByImidList(args.imids);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getImidInfoByImidList", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getImidInfoByUidList implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getImidInfoByUidList_args args = new lg_userinfo_getImidInfoByUidList_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getImidInfoByUidList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getImidInfoByUidList_result result = new lg_userinfo_getImidInfoByUidList_result();
        result.success = iface_.lg_userinfo_getImidInfoByUidList(args.uids);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getImidInfoByUidList", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getIDInfoByUid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getIDInfoByUid_args args = new lg_userinfo_getIDInfoByUid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getIDInfoByUid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getIDInfoByUid_result result = new lg_userinfo_getIDInfoByUid_result();
        result.success = iface_.lg_userinfo_getIDInfoByUid(args.idInfo);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getIDInfoByUid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lg_userinfo_getIDInfoByUidEx implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lg_userinfo_getIDInfoByUidEx_args args = new lg_userinfo_getIDInfoByUidEx_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lg_userinfo_getIDInfoByUidEx", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lg_userinfo_getIDInfoByUidEx_result result = new lg_userinfo_getIDInfoByUidEx_result();
        result.success = iface_.lg_userinfo_getIDInfoByUidEx(args.idInfo);
        oprot.writeMessageBegin(new TMessage("lg_userinfo_getIDInfoByUidEx", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class lg_userinfo_getUidsFromPps_args implements TBase<lg_userinfo_getUidsFromPps_args, lg_userinfo_getUidsFromPps_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getUidsFromPps_args");

    private static final TField PASSPORTS_FIELD_DESC = new TField("passports", TType.STRING, (short)1);

    public String passports;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      PASSPORTS((short)1, "passports");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSPORTS
            return PASSPORTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSPORTS, new FieldMetaData("passports", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getUidsFromPps_args.class, metaDataMap);
    }

    public lg_userinfo_getUidsFromPps_args() {
    }

    public lg_userinfo_getUidsFromPps_args(
      String passports)
    {
      this();
      this.passports = passports;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getUidsFromPps_args(lg_userinfo_getUidsFromPps_args other) {
      if (other.isSetPassports()) {
        this.passports = other.passports;
      }
    }

    public lg_userinfo_getUidsFromPps_args deepCopy() {
      return new lg_userinfo_getUidsFromPps_args(this);
    }

    @Override
    public void clear() {
      this.passports = null;
    }

    public String getPassports() {
      return this.passports;
    }

    public lg_userinfo_getUidsFromPps_args setPassports(String passports) {
      this.passports = passports;
      return this;
    }

    public void unsetPassports() {
      this.passports = null;
    }

    /** Returns true if field passports is set (has been asigned a value) and false otherwise */
    public boolean isSetPassports() {
      return this.passports != null;
    }

    public void setPassportsIsSet(boolean value) {
      if (!value) {
        this.passports = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PASSPORTS:
        if (value == null) {
          unsetPassports();
        } else {
          setPassports((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSPORTS:
        return getPassports();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASSPORTS:
        return isSetPassports();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getUidsFromPps_args)
        return this.equals((lg_userinfo_getUidsFromPps_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getUidsFromPps_args that) {
      if (that == null)
        return false;

      boolean this_present_passports = true && this.isSetPassports();
      boolean that_present_passports = true && that.isSetPassports();
      if (this_present_passports || that_present_passports) {
        if (!(this_present_passports && that_present_passports))
          return false;
        if (!this.passports.equals(that.passports))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getUidsFromPps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getUidsFromPps_args typedOther = (lg_userinfo_getUidsFromPps_args)other;

      lastComparison = Boolean.valueOf(isSetPassports()).compareTo(typedOther.isSetPassports());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassports()) {
        lastComparison = TBaseHelper.compareTo(this.passports, typedOther.passports);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PASSPORTS
            if (field.type == TType.STRING) {
              this.passports = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.passports != null) {
        oprot.writeFieldBegin(PASSPORTS_FIELD_DESC);
        oprot.writeString(this.passports);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getUidsFromPps_args(");
      boolean first = true;

      sb.append("passports:");
      if (this.passports == null) {
        sb.append("null");
      } else {
        sb.append(this.passports);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getUidsFromPps_result implements TBase<lg_userinfo_getUidsFromPps_result, lg_userinfo_getUidsFromPps_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getUidsFromPps_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getUidsFromPps_result.class, metaDataMap);
    }

    public lg_userinfo_getUidsFromPps_result() {
    }

    public lg_userinfo_getUidsFromPps_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getUidsFromPps_result(lg_userinfo_getUidsFromPps_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_getUidsFromPps_result deepCopy() {
      return new lg_userinfo_getUidsFromPps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_getUidsFromPps_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getUidsFromPps_result)
        return this.equals((lg_userinfo_getUidsFromPps_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getUidsFromPps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getUidsFromPps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getUidsFromPps_result typedOther = (lg_userinfo_getUidsFromPps_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getUidsFromPps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getEmailsFromPps_args implements TBase<lg_userinfo_getEmailsFromPps_args, lg_userinfo_getEmailsFromPps_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getEmailsFromPps_args");

    private static final TField PASSPORTS_FIELD_DESC = new TField("passports", TType.STRING, (short)1);

    public String passports;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      PASSPORTS((short)1, "passports");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSPORTS
            return PASSPORTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSPORTS, new FieldMetaData("passports", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getEmailsFromPps_args.class, metaDataMap);
    }

    public lg_userinfo_getEmailsFromPps_args() {
    }

    public lg_userinfo_getEmailsFromPps_args(
      String passports)
    {
      this();
      this.passports = passports;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getEmailsFromPps_args(lg_userinfo_getEmailsFromPps_args other) {
      if (other.isSetPassports()) {
        this.passports = other.passports;
      }
    }

    public lg_userinfo_getEmailsFromPps_args deepCopy() {
      return new lg_userinfo_getEmailsFromPps_args(this);
    }

    @Override
    public void clear() {
      this.passports = null;
    }

    public String getPassports() {
      return this.passports;
    }

    public lg_userinfo_getEmailsFromPps_args setPassports(String passports) {
      this.passports = passports;
      return this;
    }

    public void unsetPassports() {
      this.passports = null;
    }

    /** Returns true if field passports is set (has been asigned a value) and false otherwise */
    public boolean isSetPassports() {
      return this.passports != null;
    }

    public void setPassportsIsSet(boolean value) {
      if (!value) {
        this.passports = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PASSPORTS:
        if (value == null) {
          unsetPassports();
        } else {
          setPassports((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSPORTS:
        return getPassports();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASSPORTS:
        return isSetPassports();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getEmailsFromPps_args)
        return this.equals((lg_userinfo_getEmailsFromPps_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getEmailsFromPps_args that) {
      if (that == null)
        return false;

      boolean this_present_passports = true && this.isSetPassports();
      boolean that_present_passports = true && that.isSetPassports();
      if (this_present_passports || that_present_passports) {
        if (!(this_present_passports && that_present_passports))
          return false;
        if (!this.passports.equals(that.passports))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getEmailsFromPps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getEmailsFromPps_args typedOther = (lg_userinfo_getEmailsFromPps_args)other;

      lastComparison = Boolean.valueOf(isSetPassports()).compareTo(typedOther.isSetPassports());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassports()) {
        lastComparison = TBaseHelper.compareTo(this.passports, typedOther.passports);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PASSPORTS
            if (field.type == TType.STRING) {
              this.passports = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.passports != null) {
        oprot.writeFieldBegin(PASSPORTS_FIELD_DESC);
        oprot.writeString(this.passports);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getEmailsFromPps_args(");
      boolean first = true;

      sb.append("passports:");
      if (this.passports == null) {
        sb.append("null");
      } else {
        sb.append(this.passports);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getEmailsFromPps_result implements TBase<lg_userinfo_getEmailsFromPps_result, lg_userinfo_getEmailsFromPps_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getEmailsFromPps_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getEmailsFromPps_result.class, metaDataMap);
    }

    public lg_userinfo_getEmailsFromPps_result() {
    }

    public lg_userinfo_getEmailsFromPps_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getEmailsFromPps_result(lg_userinfo_getEmailsFromPps_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_getEmailsFromPps_result deepCopy() {
      return new lg_userinfo_getEmailsFromPps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_getEmailsFromPps_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getEmailsFromPps_result)
        return this.equals((lg_userinfo_getEmailsFromPps_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getEmailsFromPps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getEmailsFromPps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getEmailsFromPps_result typedOther = (lg_userinfo_getEmailsFromPps_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getEmailsFromPps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getPpsFromUids_args implements TBase<lg_userinfo_getPpsFromUids_args, lg_userinfo_getPpsFromUids_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getPpsFromUids_args");

    private static final TField UIDS_FIELD_DESC = new TField("uids", TType.STRING, (short)1);

    public String uids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UIDS((short)1, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UIDS, new FieldMetaData("uids", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getPpsFromUids_args.class, metaDataMap);
    }

    public lg_userinfo_getPpsFromUids_args() {
    }

    public lg_userinfo_getPpsFromUids_args(
      String uids)
    {
      this();
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getPpsFromUids_args(lg_userinfo_getPpsFromUids_args other) {
      if (other.isSetUids()) {
        this.uids = other.uids;
      }
    }

    public lg_userinfo_getPpsFromUids_args deepCopy() {
      return new lg_userinfo_getPpsFromUids_args(this);
    }

    @Override
    public void clear() {
      this.uids = null;
    }

    public String getUids() {
      return this.uids;
    }

    public lg_userinfo_getPpsFromUids_args setUids(String uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been asigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getPpsFromUids_args)
        return this.equals((lg_userinfo_getPpsFromUids_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getPpsFromUids_args that) {
      if (that == null)
        return false;

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getPpsFromUids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getPpsFromUids_args typedOther = (lg_userinfo_getPpsFromUids_args)other;

      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UIDS
            if (field.type == TType.STRING) {
              this.uids = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uids != null) {
        oprot.writeFieldBegin(UIDS_FIELD_DESC);
        oprot.writeString(this.uids);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getPpsFromUids_args(");
      boolean first = true;

      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getPpsFromUids_result implements TBase<lg_userinfo_getPpsFromUids_result, lg_userinfo_getPpsFromUids_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getPpsFromUids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getPpsFromUids_result.class, metaDataMap);
    }

    public lg_userinfo_getPpsFromUids_result() {
    }

    public lg_userinfo_getPpsFromUids_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getPpsFromUids_result(lg_userinfo_getPpsFromUids_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_getPpsFromUids_result deepCopy() {
      return new lg_userinfo_getPpsFromUids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_getPpsFromUids_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getPpsFromUids_result)
        return this.equals((lg_userinfo_getPpsFromUids_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getPpsFromUids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getPpsFromUids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getPpsFromUids_result typedOther = (lg_userinfo_getPpsFromUids_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getPpsFromUids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMobilesFromPps_args implements TBase<lg_userinfo_getMobilesFromPps_args, lg_userinfo_getMobilesFromPps_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMobilesFromPps_args");

    private static final TField PASSPORTS_FIELD_DESC = new TField("passports", TType.STRING, (short)1);

    public String passports;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      PASSPORTS((short)1, "passports");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSPORTS
            return PASSPORTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSPORTS, new FieldMetaData("passports", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMobilesFromPps_args.class, metaDataMap);
    }

    public lg_userinfo_getMobilesFromPps_args() {
    }

    public lg_userinfo_getMobilesFromPps_args(
      String passports)
    {
      this();
      this.passports = passports;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMobilesFromPps_args(lg_userinfo_getMobilesFromPps_args other) {
      if (other.isSetPassports()) {
        this.passports = other.passports;
      }
    }

    public lg_userinfo_getMobilesFromPps_args deepCopy() {
      return new lg_userinfo_getMobilesFromPps_args(this);
    }

    @Override
    public void clear() {
      this.passports = null;
    }

    public String getPassports() {
      return this.passports;
    }

    public lg_userinfo_getMobilesFromPps_args setPassports(String passports) {
      this.passports = passports;
      return this;
    }

    public void unsetPassports() {
      this.passports = null;
    }

    /** Returns true if field passports is set (has been asigned a value) and false otherwise */
    public boolean isSetPassports() {
      return this.passports != null;
    }

    public void setPassportsIsSet(boolean value) {
      if (!value) {
        this.passports = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PASSPORTS:
        if (value == null) {
          unsetPassports();
        } else {
          setPassports((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSPORTS:
        return getPassports();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASSPORTS:
        return isSetPassports();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMobilesFromPps_args)
        return this.equals((lg_userinfo_getMobilesFromPps_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMobilesFromPps_args that) {
      if (that == null)
        return false;

      boolean this_present_passports = true && this.isSetPassports();
      boolean that_present_passports = true && that.isSetPassports();
      if (this_present_passports || that_present_passports) {
        if (!(this_present_passports && that_present_passports))
          return false;
        if (!this.passports.equals(that.passports))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMobilesFromPps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMobilesFromPps_args typedOther = (lg_userinfo_getMobilesFromPps_args)other;

      lastComparison = Boolean.valueOf(isSetPassports()).compareTo(typedOther.isSetPassports());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassports()) {
        lastComparison = TBaseHelper.compareTo(this.passports, typedOther.passports);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PASSPORTS
            if (field.type == TType.STRING) {
              this.passports = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.passports != null) {
        oprot.writeFieldBegin(PASSPORTS_FIELD_DESC);
        oprot.writeString(this.passports);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMobilesFromPps_args(");
      boolean first = true;

      sb.append("passports:");
      if (this.passports == null) {
        sb.append("null");
      } else {
        sb.append(this.passports);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMobilesFromPps_result implements TBase<lg_userinfo_getMobilesFromPps_result, lg_userinfo_getMobilesFromPps_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMobilesFromPps_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMobilesFromPps_result.class, metaDataMap);
    }

    public lg_userinfo_getMobilesFromPps_result() {
    }

    public lg_userinfo_getMobilesFromPps_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMobilesFromPps_result(lg_userinfo_getMobilesFromPps_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_getMobilesFromPps_result deepCopy() {
      return new lg_userinfo_getMobilesFromPps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_getMobilesFromPps_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMobilesFromPps_result)
        return this.equals((lg_userinfo_getMobilesFromPps_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMobilesFromPps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMobilesFromPps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMobilesFromPps_result typedOther = (lg_userinfo_getMobilesFromPps_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMobilesFromPps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMobilesFromUids_args implements TBase<lg_userinfo_getMobilesFromUids_args, lg_userinfo_getMobilesFromUids_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMobilesFromUids_args");

    private static final TField UIDS_FIELD_DESC = new TField("uids", TType.STRING, (short)1);

    public String uids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UIDS((short)1, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UIDS, new FieldMetaData("uids", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMobilesFromUids_args.class, metaDataMap);
    }

    public lg_userinfo_getMobilesFromUids_args() {
    }

    public lg_userinfo_getMobilesFromUids_args(
      String uids)
    {
      this();
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMobilesFromUids_args(lg_userinfo_getMobilesFromUids_args other) {
      if (other.isSetUids()) {
        this.uids = other.uids;
      }
    }

    public lg_userinfo_getMobilesFromUids_args deepCopy() {
      return new lg_userinfo_getMobilesFromUids_args(this);
    }

    @Override
    public void clear() {
      this.uids = null;
    }

    public String getUids() {
      return this.uids;
    }

    public lg_userinfo_getMobilesFromUids_args setUids(String uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been asigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMobilesFromUids_args)
        return this.equals((lg_userinfo_getMobilesFromUids_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMobilesFromUids_args that) {
      if (that == null)
        return false;

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMobilesFromUids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMobilesFromUids_args typedOther = (lg_userinfo_getMobilesFromUids_args)other;

      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UIDS
            if (field.type == TType.STRING) {
              this.uids = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uids != null) {
        oprot.writeFieldBegin(UIDS_FIELD_DESC);
        oprot.writeString(this.uids);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMobilesFromUids_args(");
      boolean first = true;

      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMobilesFromUids_result implements TBase<lg_userinfo_getMobilesFromUids_result, lg_userinfo_getMobilesFromUids_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMobilesFromUids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMobilesFromUids_result.class, metaDataMap);
    }

    public lg_userinfo_getMobilesFromUids_result() {
    }

    public lg_userinfo_getMobilesFromUids_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMobilesFromUids_result(lg_userinfo_getMobilesFromUids_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_getMobilesFromUids_result deepCopy() {
      return new lg_userinfo_getMobilesFromUids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_getMobilesFromUids_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMobilesFromUids_result)
        return this.equals((lg_userinfo_getMobilesFromUids_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMobilesFromUids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMobilesFromUids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMobilesFromUids_result typedOther = (lg_userinfo_getMobilesFromUids_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMobilesFromUids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getAuthStatusByUid_args implements TBase<lg_userinfo_getAuthStatusByUid_args, lg_userinfo_getAuthStatusByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getAuthStatusByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getAuthStatusByUid_args.class, metaDataMap);
    }

    public lg_userinfo_getAuthStatusByUid_args() {
    }

    public lg_userinfo_getAuthStatusByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getAuthStatusByUid_args(lg_userinfo_getAuthStatusByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_getAuthStatusByUid_args deepCopy() {
      return new lg_userinfo_getAuthStatusByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_getAuthStatusByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getAuthStatusByUid_args)
        return this.equals((lg_userinfo_getAuthStatusByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getAuthStatusByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getAuthStatusByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getAuthStatusByUid_args typedOther = (lg_userinfo_getAuthStatusByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getAuthStatusByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getAuthStatusByUid_result implements TBase<lg_userinfo_getAuthStatusByUid_result, lg_userinfo_getAuthStatusByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getAuthStatusByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getAuthStatusByUid_result.class, metaDataMap);
    }

    public lg_userinfo_getAuthStatusByUid_result() {
    }

    public lg_userinfo_getAuthStatusByUid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getAuthStatusByUid_result(lg_userinfo_getAuthStatusByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_getAuthStatusByUid_result deepCopy() {
      return new lg_userinfo_getAuthStatusByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_getAuthStatusByUid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getAuthStatusByUid_result)
        return this.equals((lg_userinfo_getAuthStatusByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getAuthStatusByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getAuthStatusByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getAuthStatusByUid_result typedOther = (lg_userinfo_getAuthStatusByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getAuthStatusByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_sendMsgByPps_args implements TBase<lg_userinfo_sendMsgByPps_args, lg_userinfo_sendMsgByPps_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_sendMsgByPps_args");

    private static final TField PASSPORTS_FIELD_DESC = new TField("passports", TType.STRING, (short)1);
    private static final TField CONTENT_FIELD_DESC = new TField("content", TType.STRING, (short)2);

    public String passports;
    public String content;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      PASSPORTS((short)1, "passports"),
      CONTENT((short)2, "content");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSPORTS
            return PASSPORTS;
          case 2: // CONTENT
            return CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSPORTS, new FieldMetaData("passports", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new FieldMetaData("content", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_sendMsgByPps_args.class, metaDataMap);
    }

    public lg_userinfo_sendMsgByPps_args() {
    }

    public lg_userinfo_sendMsgByPps_args(
      String passports,
      String content)
    {
      this();
      this.passports = passports;
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_sendMsgByPps_args(lg_userinfo_sendMsgByPps_args other) {
      if (other.isSetPassports()) {
        this.passports = other.passports;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
    }

    public lg_userinfo_sendMsgByPps_args deepCopy() {
      return new lg_userinfo_sendMsgByPps_args(this);
    }

    @Override
    public void clear() {
      this.passports = null;
      this.content = null;
    }

    public String getPassports() {
      return this.passports;
    }

    public lg_userinfo_sendMsgByPps_args setPassports(String passports) {
      this.passports = passports;
      return this;
    }

    public void unsetPassports() {
      this.passports = null;
    }

    /** Returns true if field passports is set (has been asigned a value) and false otherwise */
    public boolean isSetPassports() {
      return this.passports != null;
    }

    public void setPassportsIsSet(boolean value) {
      if (!value) {
        this.passports = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public lg_userinfo_sendMsgByPps_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been asigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PASSPORTS:
        if (value == null) {
          unsetPassports();
        } else {
          setPassports((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSPORTS:
        return getPassports();

      case CONTENT:
        return getContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASSPORTS:
        return isSetPassports();
      case CONTENT:
        return isSetContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_sendMsgByPps_args)
        return this.equals((lg_userinfo_sendMsgByPps_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_sendMsgByPps_args that) {
      if (that == null)
        return false;

      boolean this_present_passports = true && this.isSetPassports();
      boolean that_present_passports = true && that.isSetPassports();
      if (this_present_passports || that_present_passports) {
        if (!(this_present_passports && that_present_passports))
          return false;
        if (!this.passports.equals(that.passports))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_sendMsgByPps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_sendMsgByPps_args typedOther = (lg_userinfo_sendMsgByPps_args)other;

      lastComparison = Boolean.valueOf(isSetPassports()).compareTo(typedOther.isSetPassports());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassports()) {
        lastComparison = TBaseHelper.compareTo(this.passports, typedOther.passports);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PASSPORTS
            if (field.type == TType.STRING) {
              this.passports = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CONTENT
            if (field.type == TType.STRING) {
              this.content = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.passports != null) {
        oprot.writeFieldBegin(PASSPORTS_FIELD_DESC);
        oprot.writeString(this.passports);
        oprot.writeFieldEnd();
      }
      if (this.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(this.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_sendMsgByPps_args(");
      boolean first = true;

      sb.append("passports:");
      if (this.passports == null) {
        sb.append("null");
      } else {
        sb.append(this.passports);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_sendMsgByPps_result implements TBase<lg_userinfo_sendMsgByPps_result, lg_userinfo_sendMsgByPps_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_sendMsgByPps_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_sendMsgByPps_result.class, metaDataMap);
    }

    public lg_userinfo_sendMsgByPps_result() {
    }

    public lg_userinfo_sendMsgByPps_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_sendMsgByPps_result(lg_userinfo_sendMsgByPps_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_sendMsgByPps_result deepCopy() {
      return new lg_userinfo_sendMsgByPps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_sendMsgByPps_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_sendMsgByPps_result)
        return this.equals((lg_userinfo_sendMsgByPps_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_sendMsgByPps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_sendMsgByPps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_sendMsgByPps_result typedOther = (lg_userinfo_sendMsgByPps_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_sendMsgByPps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_sendMsgByUids_args implements TBase<lg_userinfo_sendMsgByUids_args, lg_userinfo_sendMsgByUids_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_sendMsgByUids_args");

    private static final TField UIDS_FIELD_DESC = new TField("uids", TType.STRING, (short)1);
    private static final TField CONTENT_FIELD_DESC = new TField("content", TType.STRING, (short)2);

    public String uids;
    public String content;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UIDS((short)1, "uids"),
      CONTENT((short)2, "content");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UIDS
            return UIDS;
          case 2: // CONTENT
            return CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UIDS, new FieldMetaData("uids", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new FieldMetaData("content", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_sendMsgByUids_args.class, metaDataMap);
    }

    public lg_userinfo_sendMsgByUids_args() {
    }

    public lg_userinfo_sendMsgByUids_args(
      String uids,
      String content)
    {
      this();
      this.uids = uids;
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_sendMsgByUids_args(lg_userinfo_sendMsgByUids_args other) {
      if (other.isSetUids()) {
        this.uids = other.uids;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
    }

    public lg_userinfo_sendMsgByUids_args deepCopy() {
      return new lg_userinfo_sendMsgByUids_args(this);
    }

    @Override
    public void clear() {
      this.uids = null;
      this.content = null;
    }

    public String getUids() {
      return this.uids;
    }

    public lg_userinfo_sendMsgByUids_args setUids(String uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been asigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public lg_userinfo_sendMsgByUids_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been asigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UIDS:
        return getUids();

      case CONTENT:
        return getContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UIDS:
        return isSetUids();
      case CONTENT:
        return isSetContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_sendMsgByUids_args)
        return this.equals((lg_userinfo_sendMsgByUids_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_sendMsgByUids_args that) {
      if (that == null)
        return false;

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_sendMsgByUids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_sendMsgByUids_args typedOther = (lg_userinfo_sendMsgByUids_args)other;

      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UIDS
            if (field.type == TType.STRING) {
              this.uids = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CONTENT
            if (field.type == TType.STRING) {
              this.content = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uids != null) {
        oprot.writeFieldBegin(UIDS_FIELD_DESC);
        oprot.writeString(this.uids);
        oprot.writeFieldEnd();
      }
      if (this.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(this.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_sendMsgByUids_args(");
      boolean first = true;

      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_sendMsgByUids_result implements TBase<lg_userinfo_sendMsgByUids_result, lg_userinfo_sendMsgByUids_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_sendMsgByUids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_sendMsgByUids_result.class, metaDataMap);
    }

    public lg_userinfo_sendMsgByUids_result() {
    }

    public lg_userinfo_sendMsgByUids_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_sendMsgByUids_result(lg_userinfo_sendMsgByUids_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_sendMsgByUids_result deepCopy() {
      return new lg_userinfo_sendMsgByUids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_sendMsgByUids_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_sendMsgByUids_result)
        return this.equals((lg_userinfo_sendMsgByUids_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_sendMsgByUids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_sendMsgByUids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_sendMsgByUids_result typedOther = (lg_userinfo_sendMsgByUids_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_sendMsgByUids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_sendEmailByPp_args implements TBase<lg_userinfo_sendEmailByPp_args, lg_userinfo_sendEmailByPp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_sendEmailByPp_args");

    private static final TField EMAIL_INFO_FIELD_DESC = new TField("emailInfo", TType.STRUCT, (short)1);

    public EMailInfoReq emailInfo;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      EMAIL_INFO((short)1, "emailInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL_INFO
            return EMAIL_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL_INFO, new FieldMetaData("emailInfo", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, EMailInfoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_sendEmailByPp_args.class, metaDataMap);
    }

    public lg_userinfo_sendEmailByPp_args() {
    }

    public lg_userinfo_sendEmailByPp_args(
      EMailInfoReq emailInfo)
    {
      this();
      this.emailInfo = emailInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_sendEmailByPp_args(lg_userinfo_sendEmailByPp_args other) {
      if (other.isSetEmailInfo()) {
        this.emailInfo = new EMailInfoReq(other.emailInfo);
      }
    }

    public lg_userinfo_sendEmailByPp_args deepCopy() {
      return new lg_userinfo_sendEmailByPp_args(this);
    }

    @Override
    public void clear() {
      this.emailInfo = null;
    }

    public EMailInfoReq getEmailInfo() {
      return this.emailInfo;
    }

    public lg_userinfo_sendEmailByPp_args setEmailInfo(EMailInfoReq emailInfo) {
      this.emailInfo = emailInfo;
      return this;
    }

    public void unsetEmailInfo() {
      this.emailInfo = null;
    }

    /** Returns true if field emailInfo is set (has been asigned a value) and false otherwise */
    public boolean isSetEmailInfo() {
      return this.emailInfo != null;
    }

    public void setEmailInfoIsSet(boolean value) {
      if (!value) {
        this.emailInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL_INFO:
        if (value == null) {
          unsetEmailInfo();
        } else {
          setEmailInfo((EMailInfoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL_INFO:
        return getEmailInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL_INFO:
        return isSetEmailInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_sendEmailByPp_args)
        return this.equals((lg_userinfo_sendEmailByPp_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_sendEmailByPp_args that) {
      if (that == null)
        return false;

      boolean this_present_emailInfo = true && this.isSetEmailInfo();
      boolean that_present_emailInfo = true && that.isSetEmailInfo();
      if (this_present_emailInfo || that_present_emailInfo) {
        if (!(this_present_emailInfo && that_present_emailInfo))
          return false;
        if (!this.emailInfo.equals(that.emailInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_sendEmailByPp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_sendEmailByPp_args typedOther = (lg_userinfo_sendEmailByPp_args)other;

      lastComparison = Boolean.valueOf(isSetEmailInfo()).compareTo(typedOther.isSetEmailInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmailInfo()) {
        lastComparison = TBaseHelper.compareTo(this.emailInfo, typedOther.emailInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // EMAIL_INFO
            if (field.type == TType.STRUCT) {
              this.emailInfo = new EMailInfoReq();
              this.emailInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.emailInfo != null) {
        oprot.writeFieldBegin(EMAIL_INFO_FIELD_DESC);
        this.emailInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_sendEmailByPp_args(");
      boolean first = true;

      sb.append("emailInfo:");
      if (this.emailInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.emailInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_sendEmailByPp_result implements TBase<lg_userinfo_sendEmailByPp_result, lg_userinfo_sendEmailByPp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_sendEmailByPp_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_sendEmailByPp_result.class, metaDataMap);
    }

    public lg_userinfo_sendEmailByPp_result() {
    }

    public lg_userinfo_sendEmailByPp_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_sendEmailByPp_result(lg_userinfo_sendEmailByPp_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_sendEmailByPp_result deepCopy() {
      return new lg_userinfo_sendEmailByPp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_sendEmailByPp_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_sendEmailByPp_result)
        return this.equals((lg_userinfo_sendEmailByPp_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_sendEmailByPp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_sendEmailByPp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_sendEmailByPp_result typedOther = (lg_userinfo_sendEmailByPp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_sendEmailByPp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_sendEmailByUid_args implements TBase<lg_userinfo_sendEmailByUid_args, lg_userinfo_sendEmailByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_sendEmailByUid_args");

    private static final TField EMAIL_INFO_FIELD_DESC = new TField("emailInfo", TType.STRUCT, (short)1);

    public EMailInfoReq emailInfo;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      EMAIL_INFO((short)1, "emailInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL_INFO
            return EMAIL_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL_INFO, new FieldMetaData("emailInfo", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, EMailInfoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_sendEmailByUid_args.class, metaDataMap);
    }

    public lg_userinfo_sendEmailByUid_args() {
    }

    public lg_userinfo_sendEmailByUid_args(
      EMailInfoReq emailInfo)
    {
      this();
      this.emailInfo = emailInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_sendEmailByUid_args(lg_userinfo_sendEmailByUid_args other) {
      if (other.isSetEmailInfo()) {
        this.emailInfo = new EMailInfoReq(other.emailInfo);
      }
    }

    public lg_userinfo_sendEmailByUid_args deepCopy() {
      return new lg_userinfo_sendEmailByUid_args(this);
    }

    @Override
    public void clear() {
      this.emailInfo = null;
    }

    public EMailInfoReq getEmailInfo() {
      return this.emailInfo;
    }

    public lg_userinfo_sendEmailByUid_args setEmailInfo(EMailInfoReq emailInfo) {
      this.emailInfo = emailInfo;
      return this;
    }

    public void unsetEmailInfo() {
      this.emailInfo = null;
    }

    /** Returns true if field emailInfo is set (has been asigned a value) and false otherwise */
    public boolean isSetEmailInfo() {
      return this.emailInfo != null;
    }

    public void setEmailInfoIsSet(boolean value) {
      if (!value) {
        this.emailInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL_INFO:
        if (value == null) {
          unsetEmailInfo();
        } else {
          setEmailInfo((EMailInfoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL_INFO:
        return getEmailInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL_INFO:
        return isSetEmailInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_sendEmailByUid_args)
        return this.equals((lg_userinfo_sendEmailByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_sendEmailByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_emailInfo = true && this.isSetEmailInfo();
      boolean that_present_emailInfo = true && that.isSetEmailInfo();
      if (this_present_emailInfo || that_present_emailInfo) {
        if (!(this_present_emailInfo && that_present_emailInfo))
          return false;
        if (!this.emailInfo.equals(that.emailInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_sendEmailByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_sendEmailByUid_args typedOther = (lg_userinfo_sendEmailByUid_args)other;

      lastComparison = Boolean.valueOf(isSetEmailInfo()).compareTo(typedOther.isSetEmailInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmailInfo()) {
        lastComparison = TBaseHelper.compareTo(this.emailInfo, typedOther.emailInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // EMAIL_INFO
            if (field.type == TType.STRUCT) {
              this.emailInfo = new EMailInfoReq();
              this.emailInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.emailInfo != null) {
        oprot.writeFieldBegin(EMAIL_INFO_FIELD_DESC);
        this.emailInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_sendEmailByUid_args(");
      boolean first = true;

      sb.append("emailInfo:");
      if (this.emailInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.emailInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_sendEmailByUid_result implements TBase<lg_userinfo_sendEmailByUid_result, lg_userinfo_sendEmailByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_sendEmailByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_sendEmailByUid_result.class, metaDataMap);
    }

    public lg_userinfo_sendEmailByUid_result() {
    }

    public lg_userinfo_sendEmailByUid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_sendEmailByUid_result(lg_userinfo_sendEmailByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_sendEmailByUid_result deepCopy() {
      return new lg_userinfo_sendEmailByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_sendEmailByUid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_sendEmailByUid_result)
        return this.equals((lg_userinfo_sendEmailByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_sendEmailByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_sendEmailByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_sendEmailByUid_result typedOther = (lg_userinfo_sendEmailByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_sendEmailByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMobileMaskByPp_args implements TBase<lg_userinfo_getMobileMaskByPp_args, lg_userinfo_getMobileMaskByPp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMobileMaskByPp_args");

    private static final TField MASK_INFO_FIELD_DESC = new TField("maskInfo", TType.STRUCT, (short)1);

    public MaskCodeInfo maskInfo;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      MASK_INFO((short)1, "maskInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASK_INFO
            return MASK_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASK_INFO, new FieldMetaData("maskInfo", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, MaskCodeInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMobileMaskByPp_args.class, metaDataMap);
    }

    public lg_userinfo_getMobileMaskByPp_args() {
    }

    public lg_userinfo_getMobileMaskByPp_args(
      MaskCodeInfo maskInfo)
    {
      this();
      this.maskInfo = maskInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMobileMaskByPp_args(lg_userinfo_getMobileMaskByPp_args other) {
      if (other.isSetMaskInfo()) {
        this.maskInfo = new MaskCodeInfo(other.maskInfo);
      }
    }

    public lg_userinfo_getMobileMaskByPp_args deepCopy() {
      return new lg_userinfo_getMobileMaskByPp_args(this);
    }

    @Override
    public void clear() {
      this.maskInfo = null;
    }

    public MaskCodeInfo getMaskInfo() {
      return this.maskInfo;
    }

    public lg_userinfo_getMobileMaskByPp_args setMaskInfo(MaskCodeInfo maskInfo) {
      this.maskInfo = maskInfo;
      return this;
    }

    public void unsetMaskInfo() {
      this.maskInfo = null;
    }

    /** Returns true if field maskInfo is set (has been asigned a value) and false otherwise */
    public boolean isSetMaskInfo() {
      return this.maskInfo != null;
    }

    public void setMaskInfoIsSet(boolean value) {
      if (!value) {
        this.maskInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MASK_INFO:
        if (value == null) {
          unsetMaskInfo();
        } else {
          setMaskInfo((MaskCodeInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MASK_INFO:
        return getMaskInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MASK_INFO:
        return isSetMaskInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMobileMaskByPp_args)
        return this.equals((lg_userinfo_getMobileMaskByPp_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMobileMaskByPp_args that) {
      if (that == null)
        return false;

      boolean this_present_maskInfo = true && this.isSetMaskInfo();
      boolean that_present_maskInfo = true && that.isSetMaskInfo();
      if (this_present_maskInfo || that_present_maskInfo) {
        if (!(this_present_maskInfo && that_present_maskInfo))
          return false;
        if (!this.maskInfo.equals(that.maskInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMobileMaskByPp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMobileMaskByPp_args typedOther = (lg_userinfo_getMobileMaskByPp_args)other;

      lastComparison = Boolean.valueOf(isSetMaskInfo()).compareTo(typedOther.isSetMaskInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaskInfo()) {
        lastComparison = TBaseHelper.compareTo(this.maskInfo, typedOther.maskInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MASK_INFO
            if (field.type == TType.STRUCT) {
              this.maskInfo = new MaskCodeInfo();
              this.maskInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.maskInfo != null) {
        oprot.writeFieldBegin(MASK_INFO_FIELD_DESC);
        this.maskInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMobileMaskByPp_args(");
      boolean first = true;

      sb.append("maskInfo:");
      if (this.maskInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.maskInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMobileMaskByPp_result implements TBase<lg_userinfo_getMobileMaskByPp_result, lg_userinfo_getMobileMaskByPp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMobileMaskByPp_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMobileMaskByPp_result.class, metaDataMap);
    }

    public lg_userinfo_getMobileMaskByPp_result() {
    }

    public lg_userinfo_getMobileMaskByPp_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMobileMaskByPp_result(lg_userinfo_getMobileMaskByPp_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_getMobileMaskByPp_result deepCopy() {
      return new lg_userinfo_getMobileMaskByPp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_getMobileMaskByPp_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMobileMaskByPp_result)
        return this.equals((lg_userinfo_getMobileMaskByPp_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMobileMaskByPp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMobileMaskByPp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMobileMaskByPp_result typedOther = (lg_userinfo_getMobileMaskByPp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMobileMaskByPp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMobileMaskByUid_args implements TBase<lg_userinfo_getMobileMaskByUid_args, lg_userinfo_getMobileMaskByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMobileMaskByUid_args");

    private static final TField MASK_INFO_FIELD_DESC = new TField("maskInfo", TType.STRUCT, (short)1);

    public MaskCodeInfo maskInfo;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      MASK_INFO((short)1, "maskInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASK_INFO
            return MASK_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASK_INFO, new FieldMetaData("maskInfo", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, MaskCodeInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMobileMaskByUid_args.class, metaDataMap);
    }

    public lg_userinfo_getMobileMaskByUid_args() {
    }

    public lg_userinfo_getMobileMaskByUid_args(
      MaskCodeInfo maskInfo)
    {
      this();
      this.maskInfo = maskInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMobileMaskByUid_args(lg_userinfo_getMobileMaskByUid_args other) {
      if (other.isSetMaskInfo()) {
        this.maskInfo = new MaskCodeInfo(other.maskInfo);
      }
    }

    public lg_userinfo_getMobileMaskByUid_args deepCopy() {
      return new lg_userinfo_getMobileMaskByUid_args(this);
    }

    @Override
    public void clear() {
      this.maskInfo = null;
    }

    public MaskCodeInfo getMaskInfo() {
      return this.maskInfo;
    }

    public lg_userinfo_getMobileMaskByUid_args setMaskInfo(MaskCodeInfo maskInfo) {
      this.maskInfo = maskInfo;
      return this;
    }

    public void unsetMaskInfo() {
      this.maskInfo = null;
    }

    /** Returns true if field maskInfo is set (has been asigned a value) and false otherwise */
    public boolean isSetMaskInfo() {
      return this.maskInfo != null;
    }

    public void setMaskInfoIsSet(boolean value) {
      if (!value) {
        this.maskInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MASK_INFO:
        if (value == null) {
          unsetMaskInfo();
        } else {
          setMaskInfo((MaskCodeInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MASK_INFO:
        return getMaskInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MASK_INFO:
        return isSetMaskInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMobileMaskByUid_args)
        return this.equals((lg_userinfo_getMobileMaskByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMobileMaskByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_maskInfo = true && this.isSetMaskInfo();
      boolean that_present_maskInfo = true && that.isSetMaskInfo();
      if (this_present_maskInfo || that_present_maskInfo) {
        if (!(this_present_maskInfo && that_present_maskInfo))
          return false;
        if (!this.maskInfo.equals(that.maskInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMobileMaskByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMobileMaskByUid_args typedOther = (lg_userinfo_getMobileMaskByUid_args)other;

      lastComparison = Boolean.valueOf(isSetMaskInfo()).compareTo(typedOther.isSetMaskInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaskInfo()) {
        lastComparison = TBaseHelper.compareTo(this.maskInfo, typedOther.maskInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MASK_INFO
            if (field.type == TType.STRUCT) {
              this.maskInfo = new MaskCodeInfo();
              this.maskInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.maskInfo != null) {
        oprot.writeFieldBegin(MASK_INFO_FIELD_DESC);
        this.maskInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMobileMaskByUid_args(");
      boolean first = true;

      sb.append("maskInfo:");
      if (this.maskInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.maskInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMobileMaskByUid_result implements TBase<lg_userinfo_getMobileMaskByUid_result, lg_userinfo_getMobileMaskByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMobileMaskByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMobileMaskByUid_result.class, metaDataMap);
    }

    public lg_userinfo_getMobileMaskByUid_result() {
    }

    public lg_userinfo_getMobileMaskByUid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMobileMaskByUid_result(lg_userinfo_getMobileMaskByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_getMobileMaskByUid_result deepCopy() {
      return new lg_userinfo_getMobileMaskByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_getMobileMaskByUid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMobileMaskByUid_result)
        return this.equals((lg_userinfo_getMobileMaskByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMobileMaskByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMobileMaskByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMobileMaskByUid_result typedOther = (lg_userinfo_getMobileMaskByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMobileMaskByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getEmailMaskByPp_args implements TBase<lg_userinfo_getEmailMaskByPp_args, lg_userinfo_getEmailMaskByPp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getEmailMaskByPp_args");

    private static final TField MASK_INFO_FIELD_DESC = new TField("maskInfo", TType.STRUCT, (short)1);

    public MaskCodeInfo maskInfo;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      MASK_INFO((short)1, "maskInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASK_INFO
            return MASK_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASK_INFO, new FieldMetaData("maskInfo", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, MaskCodeInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getEmailMaskByPp_args.class, metaDataMap);
    }

    public lg_userinfo_getEmailMaskByPp_args() {
    }

    public lg_userinfo_getEmailMaskByPp_args(
      MaskCodeInfo maskInfo)
    {
      this();
      this.maskInfo = maskInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getEmailMaskByPp_args(lg_userinfo_getEmailMaskByPp_args other) {
      if (other.isSetMaskInfo()) {
        this.maskInfo = new MaskCodeInfo(other.maskInfo);
      }
    }

    public lg_userinfo_getEmailMaskByPp_args deepCopy() {
      return new lg_userinfo_getEmailMaskByPp_args(this);
    }

    @Override
    public void clear() {
      this.maskInfo = null;
    }

    public MaskCodeInfo getMaskInfo() {
      return this.maskInfo;
    }

    public lg_userinfo_getEmailMaskByPp_args setMaskInfo(MaskCodeInfo maskInfo) {
      this.maskInfo = maskInfo;
      return this;
    }

    public void unsetMaskInfo() {
      this.maskInfo = null;
    }

    /** Returns true if field maskInfo is set (has been asigned a value) and false otherwise */
    public boolean isSetMaskInfo() {
      return this.maskInfo != null;
    }

    public void setMaskInfoIsSet(boolean value) {
      if (!value) {
        this.maskInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MASK_INFO:
        if (value == null) {
          unsetMaskInfo();
        } else {
          setMaskInfo((MaskCodeInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MASK_INFO:
        return getMaskInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MASK_INFO:
        return isSetMaskInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getEmailMaskByPp_args)
        return this.equals((lg_userinfo_getEmailMaskByPp_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getEmailMaskByPp_args that) {
      if (that == null)
        return false;

      boolean this_present_maskInfo = true && this.isSetMaskInfo();
      boolean that_present_maskInfo = true && that.isSetMaskInfo();
      if (this_present_maskInfo || that_present_maskInfo) {
        if (!(this_present_maskInfo && that_present_maskInfo))
          return false;
        if (!this.maskInfo.equals(that.maskInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getEmailMaskByPp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getEmailMaskByPp_args typedOther = (lg_userinfo_getEmailMaskByPp_args)other;

      lastComparison = Boolean.valueOf(isSetMaskInfo()).compareTo(typedOther.isSetMaskInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaskInfo()) {
        lastComparison = TBaseHelper.compareTo(this.maskInfo, typedOther.maskInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MASK_INFO
            if (field.type == TType.STRUCT) {
              this.maskInfo = new MaskCodeInfo();
              this.maskInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.maskInfo != null) {
        oprot.writeFieldBegin(MASK_INFO_FIELD_DESC);
        this.maskInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getEmailMaskByPp_args(");
      boolean first = true;

      sb.append("maskInfo:");
      if (this.maskInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.maskInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getEmailMaskByPp_result implements TBase<lg_userinfo_getEmailMaskByPp_result, lg_userinfo_getEmailMaskByPp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getEmailMaskByPp_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getEmailMaskByPp_result.class, metaDataMap);
    }

    public lg_userinfo_getEmailMaskByPp_result() {
    }

    public lg_userinfo_getEmailMaskByPp_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getEmailMaskByPp_result(lg_userinfo_getEmailMaskByPp_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_getEmailMaskByPp_result deepCopy() {
      return new lg_userinfo_getEmailMaskByPp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_getEmailMaskByPp_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getEmailMaskByPp_result)
        return this.equals((lg_userinfo_getEmailMaskByPp_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getEmailMaskByPp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getEmailMaskByPp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getEmailMaskByPp_result typedOther = (lg_userinfo_getEmailMaskByPp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getEmailMaskByPp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getEmailMaskByUid_args implements TBase<lg_userinfo_getEmailMaskByUid_args, lg_userinfo_getEmailMaskByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getEmailMaskByUid_args");

    private static final TField MASK_INFO_FIELD_DESC = new TField("maskInfo", TType.STRUCT, (short)1);

    public MaskCodeInfo maskInfo;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      MASK_INFO((short)1, "maskInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASK_INFO
            return MASK_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASK_INFO, new FieldMetaData("maskInfo", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, MaskCodeInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getEmailMaskByUid_args.class, metaDataMap);
    }

    public lg_userinfo_getEmailMaskByUid_args() {
    }

    public lg_userinfo_getEmailMaskByUid_args(
      MaskCodeInfo maskInfo)
    {
      this();
      this.maskInfo = maskInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getEmailMaskByUid_args(lg_userinfo_getEmailMaskByUid_args other) {
      if (other.isSetMaskInfo()) {
        this.maskInfo = new MaskCodeInfo(other.maskInfo);
      }
    }

    public lg_userinfo_getEmailMaskByUid_args deepCopy() {
      return new lg_userinfo_getEmailMaskByUid_args(this);
    }

    @Override
    public void clear() {
      this.maskInfo = null;
    }

    public MaskCodeInfo getMaskInfo() {
      return this.maskInfo;
    }

    public lg_userinfo_getEmailMaskByUid_args setMaskInfo(MaskCodeInfo maskInfo) {
      this.maskInfo = maskInfo;
      return this;
    }

    public void unsetMaskInfo() {
      this.maskInfo = null;
    }

    /** Returns true if field maskInfo is set (has been asigned a value) and false otherwise */
    public boolean isSetMaskInfo() {
      return this.maskInfo != null;
    }

    public void setMaskInfoIsSet(boolean value) {
      if (!value) {
        this.maskInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MASK_INFO:
        if (value == null) {
          unsetMaskInfo();
        } else {
          setMaskInfo((MaskCodeInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MASK_INFO:
        return getMaskInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MASK_INFO:
        return isSetMaskInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getEmailMaskByUid_args)
        return this.equals((lg_userinfo_getEmailMaskByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getEmailMaskByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_maskInfo = true && this.isSetMaskInfo();
      boolean that_present_maskInfo = true && that.isSetMaskInfo();
      if (this_present_maskInfo || that_present_maskInfo) {
        if (!(this_present_maskInfo && that_present_maskInfo))
          return false;
        if (!this.maskInfo.equals(that.maskInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getEmailMaskByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getEmailMaskByUid_args typedOther = (lg_userinfo_getEmailMaskByUid_args)other;

      lastComparison = Boolean.valueOf(isSetMaskInfo()).compareTo(typedOther.isSetMaskInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaskInfo()) {
        lastComparison = TBaseHelper.compareTo(this.maskInfo, typedOther.maskInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MASK_INFO
            if (field.type == TType.STRUCT) {
              this.maskInfo = new MaskCodeInfo();
              this.maskInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.maskInfo != null) {
        oprot.writeFieldBegin(MASK_INFO_FIELD_DESC);
        this.maskInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getEmailMaskByUid_args(");
      boolean first = true;

      sb.append("maskInfo:");
      if (this.maskInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.maskInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getEmailMaskByUid_result implements TBase<lg_userinfo_getEmailMaskByUid_result, lg_userinfo_getEmailMaskByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getEmailMaskByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getEmailMaskByUid_result.class, metaDataMap);
    }

    public lg_userinfo_getEmailMaskByUid_result() {
    }

    public lg_userinfo_getEmailMaskByUid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getEmailMaskByUid_result(lg_userinfo_getEmailMaskByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_getEmailMaskByUid_result deepCopy() {
      return new lg_userinfo_getEmailMaskByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_getEmailMaskByUid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getEmailMaskByUid_result)
        return this.equals((lg_userinfo_getEmailMaskByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getEmailMaskByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getEmailMaskByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getEmailMaskByUid_result typedOther = (lg_userinfo_getEmailMaskByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getEmailMaskByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transPassportByUid_args implements TBase<lg_userinfo_transPassportByUid_args, lg_userinfo_transPassportByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transPassportByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transPassportByUid_args.class, metaDataMap);
    }

    public lg_userinfo_transPassportByUid_args() {
    }

    public lg_userinfo_transPassportByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transPassportByUid_args(lg_userinfo_transPassportByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_transPassportByUid_args deepCopy() {
      return new lg_userinfo_transPassportByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_transPassportByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transPassportByUid_args)
        return this.equals((lg_userinfo_transPassportByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_transPassportByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transPassportByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transPassportByUid_args typedOther = (lg_userinfo_transPassportByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transPassportByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transPassportByUid_result implements TBase<lg_userinfo_transPassportByUid_result, lg_userinfo_transPassportByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transPassportByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transPassportByUid_result.class, metaDataMap);
    }

    public lg_userinfo_transPassportByUid_result() {
    }

    public lg_userinfo_transPassportByUid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transPassportByUid_result(lg_userinfo_transPassportByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_transPassportByUid_result deepCopy() {
      return new lg_userinfo_transPassportByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_transPassportByUid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transPassportByUid_result)
        return this.equals((lg_userinfo_transPassportByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_transPassportByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transPassportByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transPassportByUid_result typedOther = (lg_userinfo_transPassportByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transPassportByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transPassport_args implements TBase<lg_userinfo_transPassport_args, lg_userinfo_transPassport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transPassport_args");

    private static final TField PASSPORT_FIELD_DESC = new TField("passport", TType.STRING, (short)1);

    public String passport;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      PASSPORT((short)1, "passport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSPORT
            return PASSPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSPORT, new FieldMetaData("passport", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transPassport_args.class, metaDataMap);
    }

    public lg_userinfo_transPassport_args() {
    }

    public lg_userinfo_transPassport_args(
      String passport)
    {
      this();
      this.passport = passport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transPassport_args(lg_userinfo_transPassport_args other) {
      if (other.isSetPassport()) {
        this.passport = other.passport;
      }
    }

    public lg_userinfo_transPassport_args deepCopy() {
      return new lg_userinfo_transPassport_args(this);
    }

    @Override
    public void clear() {
      this.passport = null;
    }

    public String getPassport() {
      return this.passport;
    }

    public lg_userinfo_transPassport_args setPassport(String passport) {
      this.passport = passport;
      return this;
    }

    public void unsetPassport() {
      this.passport = null;
    }

    /** Returns true if field passport is set (has been asigned a value) and false otherwise */
    public boolean isSetPassport() {
      return this.passport != null;
    }

    public void setPassportIsSet(boolean value) {
      if (!value) {
        this.passport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PASSPORT:
        if (value == null) {
          unsetPassport();
        } else {
          setPassport((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSPORT:
        return getPassport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASSPORT:
        return isSetPassport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transPassport_args)
        return this.equals((lg_userinfo_transPassport_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_transPassport_args that) {
      if (that == null)
        return false;

      boolean this_present_passport = true && this.isSetPassport();
      boolean that_present_passport = true && that.isSetPassport();
      if (this_present_passport || that_present_passport) {
        if (!(this_present_passport && that_present_passport))
          return false;
        if (!this.passport.equals(that.passport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transPassport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transPassport_args typedOther = (lg_userinfo_transPassport_args)other;

      lastComparison = Boolean.valueOf(isSetPassport()).compareTo(typedOther.isSetPassport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassport()) {
        lastComparison = TBaseHelper.compareTo(this.passport, typedOther.passport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PASSPORT
            if (field.type == TType.STRING) {
              this.passport = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.passport != null) {
        oprot.writeFieldBegin(PASSPORT_FIELD_DESC);
        oprot.writeString(this.passport);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transPassport_args(");
      boolean first = true;

      sb.append("passport:");
      if (this.passport == null) {
        sb.append("null");
      } else {
        sb.append(this.passport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transPassport_result implements TBase<lg_userinfo_transPassport_result, lg_userinfo_transPassport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transPassport_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transPassport_result.class, metaDataMap);
    }

    public lg_userinfo_transPassport_result() {
    }

    public lg_userinfo_transPassport_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transPassport_result(lg_userinfo_transPassport_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_transPassport_result deepCopy() {
      return new lg_userinfo_transPassport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_transPassport_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transPassport_result)
        return this.equals((lg_userinfo_transPassport_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_transPassport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transPassport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transPassport_result typedOther = (lg_userinfo_transPassport_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transPassport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transgbNo_args implements TBase<lg_userinfo_transgbNo_args, lg_userinfo_transgbNo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transgbNo_args");

    private static final TField gbID_FIELD_DESC = new TField("gbid", TType.STRING, (short)1);

    public String gbid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      gbID((short)1, "gbid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // gbID
            return gbID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.gbID, new FieldMetaData("gbid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transgbNo_args.class, metaDataMap);
    }

    public lg_userinfo_transgbNo_args() {
    }

    public lg_userinfo_transgbNo_args(
      String gbid)
    {
      this();
      this.gbid = gbid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transgbNo_args(lg_userinfo_transgbNo_args other) {
      if (other.isSetgbid()) {
        this.gbid = other.gbid;
      }
    }

    public lg_userinfo_transgbNo_args deepCopy() {
      return new lg_userinfo_transgbNo_args(this);
    }

    @Override
    public void clear() {
      this.gbid = null;
    }

    public String getgbid() {
      return this.gbid;
    }

    public lg_userinfo_transgbNo_args setgbid(String gbid) {
      this.gbid = gbid;
      return this;
    }

    public void unsetgbid() {
      this.gbid = null;
    }

    /** Returns true if field gbid is set (has been asigned a value) and false otherwise */
    public boolean isSetgbid() {
      return this.gbid != null;
    }

    public void setgbidIsSet(boolean value) {
      if (!value) {
        this.gbid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case gbID:
        if (value == null) {
          unsetgbid();
        } else {
          setgbid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case gbID:
        return getgbid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case gbID:
        return isSetgbid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transgbNo_args)
        return this.equals((lg_userinfo_transgbNo_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_transgbNo_args that) {
      if (that == null)
        return false;

      boolean this_present_gbid = true && this.isSetgbid();
      boolean that_present_gbid = true && that.isSetgbid();
      if (this_present_gbid || that_present_gbid) {
        if (!(this_present_gbid && that_present_gbid))
          return false;
        if (!this.gbid.equals(that.gbid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transgbNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transgbNo_args typedOther = (lg_userinfo_transgbNo_args)other;

      lastComparison = Boolean.valueOf(isSetgbid()).compareTo(typedOther.isSetgbid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetgbid()) {
        lastComparison = TBaseHelper.compareTo(this.gbid, typedOther.gbid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // gbID
            if (field.type == TType.STRING) {
              this.gbid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.gbid != null) {
        oprot.writeFieldBegin(gbID_FIELD_DESC);
        oprot.writeString(this.gbid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transgbNo_args(");
      boolean first = true;

      sb.append("gbid:");
      if (this.gbid == null) {
        sb.append("null");
      } else {
        sb.append(this.gbid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transgbNo_result implements TBase<lg_userinfo_transgbNo_result, lg_userinfo_transgbNo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transgbNo_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transgbNo_result.class, metaDataMap);
    }

    public lg_userinfo_transgbNo_result() {
    }

    public lg_userinfo_transgbNo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transgbNo_result(lg_userinfo_transgbNo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_transgbNo_result deepCopy() {
      return new lg_userinfo_transgbNo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_transgbNo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transgbNo_result)
        return this.equals((lg_userinfo_transgbNo_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_transgbNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transgbNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transgbNo_result typedOther = (lg_userinfo_transgbNo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transgbNo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transUid_args implements TBase<lg_userinfo_transUid_args, lg_userinfo_transUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transUid_args.class, metaDataMap);
    }

    public lg_userinfo_transUid_args() {
    }

    public lg_userinfo_transUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transUid_args(lg_userinfo_transUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_transUid_args deepCopy() {
      return new lg_userinfo_transUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_transUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transUid_args)
        return this.equals((lg_userinfo_transUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_transUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transUid_args typedOther = (lg_userinfo_transUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transUid_result implements TBase<lg_userinfo_transUid_result, lg_userinfo_transUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transUid_result.class, metaDataMap);
    }

    public lg_userinfo_transUid_result() {
    }

    public lg_userinfo_transUid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transUid_result(lg_userinfo_transUid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_transUid_result deepCopy() {
      return new lg_userinfo_transUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_transUid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transUid_result)
        return this.equals((lg_userinfo_transUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_transUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transUid_result typedOther = (lg_userinfo_transUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transAccount_args implements TBase<lg_userinfo_transAccount_args, lg_userinfo_transAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transAccount_args");

    private static final TField EMAIL_FIELD_DESC = new TField("email", TType.STRING, (short)1);

    public String email;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      EMAIL((short)1, "email");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new FieldMetaData("email", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transAccount_args.class, metaDataMap);
    }

    public lg_userinfo_transAccount_args() {
    }

    public lg_userinfo_transAccount_args(
      String email)
    {
      this();
      this.email = email;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transAccount_args(lg_userinfo_transAccount_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
    }

    public lg_userinfo_transAccount_args deepCopy() {
      return new lg_userinfo_transAccount_args(this);
    }

    @Override
    public void clear() {
      this.email = null;
    }

    public String getEmail() {
      return this.email;
    }

    public lg_userinfo_transAccount_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been asigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transAccount_args)
        return this.equals((lg_userinfo_transAccount_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_transAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transAccount_args typedOther = (lg_userinfo_transAccount_args)other;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // EMAIL
            if (field.type == TType.STRING) {
              this.email = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(this.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transAccount_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transAccount_result implements TBase<lg_userinfo_transAccount_result, lg_userinfo_transAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transAccount_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transAccount_result.class, metaDataMap);
    }

    public lg_userinfo_transAccount_result() {
    }

    public lg_userinfo_transAccount_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transAccount_result(lg_userinfo_transAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_transAccount_result deepCopy() {
      return new lg_userinfo_transAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_transAccount_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transAccount_result)
        return this.equals((lg_userinfo_transAccount_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_transAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transAccount_result typedOther = (lg_userinfo_transAccount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transAccountByUid_args implements TBase<lg_userinfo_transAccountByUid_args, lg_userinfo_transAccountByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transAccountByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transAccountByUid_args.class, metaDataMap);
    }

    public lg_userinfo_transAccountByUid_args() {
    }

    public lg_userinfo_transAccountByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transAccountByUid_args(lg_userinfo_transAccountByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_transAccountByUid_args deepCopy() {
      return new lg_userinfo_transAccountByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_transAccountByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transAccountByUid_args)
        return this.equals((lg_userinfo_transAccountByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_transAccountByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transAccountByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transAccountByUid_args typedOther = (lg_userinfo_transAccountByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transAccountByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transAccountByUid_result implements TBase<lg_userinfo_transAccountByUid_result, lg_userinfo_transAccountByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transAccountByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transAccountByUid_result.class, metaDataMap);
    }

    public lg_userinfo_transAccountByUid_result() {
    }

    public lg_userinfo_transAccountByUid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transAccountByUid_result(lg_userinfo_transAccountByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_transAccountByUid_result deepCopy() {
      return new lg_userinfo_transAccountByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_transAccountByUid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transAccountByUid_result)
        return this.equals((lg_userinfo_transAccountByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_transAccountByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transAccountByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transAccountByUid_result typedOther = (lg_userinfo_transAccountByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transAccountByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transPassportByAccount_args implements TBase<lg_userinfo_transPassportByAccount_args, lg_userinfo_transPassportByAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transPassportByAccount_args");

    private static final TField EMAIL_FIELD_DESC = new TField("email", TType.STRING, (short)1);

    public String email;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      EMAIL((short)1, "email");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new FieldMetaData("email", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transPassportByAccount_args.class, metaDataMap);
    }

    public lg_userinfo_transPassportByAccount_args() {
    }

    public lg_userinfo_transPassportByAccount_args(
      String email)
    {
      this();
      this.email = email;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transPassportByAccount_args(lg_userinfo_transPassportByAccount_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
    }

    public lg_userinfo_transPassportByAccount_args deepCopy() {
      return new lg_userinfo_transPassportByAccount_args(this);
    }

    @Override
    public void clear() {
      this.email = null;
    }

    public String getEmail() {
      return this.email;
    }

    public lg_userinfo_transPassportByAccount_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been asigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transPassportByAccount_args)
        return this.equals((lg_userinfo_transPassportByAccount_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_transPassportByAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transPassportByAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transPassportByAccount_args typedOther = (lg_userinfo_transPassportByAccount_args)other;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // EMAIL
            if (field.type == TType.STRING) {
              this.email = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(this.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transPassportByAccount_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transPassportByAccount_result implements TBase<lg_userinfo_transPassportByAccount_result, lg_userinfo_transPassportByAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transPassportByAccount_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transPassportByAccount_result.class, metaDataMap);
    }

    public lg_userinfo_transPassportByAccount_result() {
    }

    public lg_userinfo_transPassportByAccount_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transPassportByAccount_result(lg_userinfo_transPassportByAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_transPassportByAccount_result deepCopy() {
      return new lg_userinfo_transPassportByAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_transPassportByAccount_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transPassportByAccount_result)
        return this.equals((lg_userinfo_transPassportByAccount_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_transPassportByAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transPassportByAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transPassportByAccount_result typedOther = (lg_userinfo_transPassportByAccount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transPassportByAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transUdbseqByUid_args implements TBase<lg_userinfo_transUdbseqByUid_args, lg_userinfo_transUdbseqByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transUdbseqByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transUdbseqByUid_args.class, metaDataMap);
    }

    public lg_userinfo_transUdbseqByUid_args() {
    }

    public lg_userinfo_transUdbseqByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transUdbseqByUid_args(lg_userinfo_transUdbseqByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_transUdbseqByUid_args deepCopy() {
      return new lg_userinfo_transUdbseqByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_transUdbseqByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transUdbseqByUid_args)
        return this.equals((lg_userinfo_transUdbseqByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_transUdbseqByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transUdbseqByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transUdbseqByUid_args typedOther = (lg_userinfo_transUdbseqByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transUdbseqByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transUdbseqByUid_result implements TBase<lg_userinfo_transUdbseqByUid_result, lg_userinfo_transUdbseqByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transUdbseqByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transUdbseqByUid_result.class, metaDataMap);
    }

    public lg_userinfo_transUdbseqByUid_result() {
    }

    public lg_userinfo_transUdbseqByUid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transUdbseqByUid_result(lg_userinfo_transUdbseqByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_transUdbseqByUid_result deepCopy() {
      return new lg_userinfo_transUdbseqByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_transUdbseqByUid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transUdbseqByUid_result)
        return this.equals((lg_userinfo_transUdbseqByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_transUdbseqByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transUdbseqByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transUdbseqByUid_result typedOther = (lg_userinfo_transUdbseqByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transUdbseqByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transRegipByUid_args implements TBase<lg_userinfo_transRegipByUid_args, lg_userinfo_transRegipByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transRegipByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transRegipByUid_args.class, metaDataMap);
    }

    public lg_userinfo_transRegipByUid_args() {
    }

    public lg_userinfo_transRegipByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transRegipByUid_args(lg_userinfo_transRegipByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_transRegipByUid_args deepCopy() {
      return new lg_userinfo_transRegipByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_transRegipByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transRegipByUid_args)
        return this.equals((lg_userinfo_transRegipByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_transRegipByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transRegipByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transRegipByUid_args typedOther = (lg_userinfo_transRegipByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transRegipByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transRegipByUid_result implements TBase<lg_userinfo_transRegipByUid_result, lg_userinfo_transRegipByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transRegipByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transRegipByUid_result.class, metaDataMap);
    }

    public lg_userinfo_transRegipByUid_result() {
    }

    public lg_userinfo_transRegipByUid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transRegipByUid_result(lg_userinfo_transRegipByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_transRegipByUid_result deepCopy() {
      return new lg_userinfo_transRegipByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_transRegipByUid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transRegipByUid_result)
        return this.equals((lg_userinfo_transRegipByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_transRegipByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transRegipByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transRegipByUid_result typedOther = (lg_userinfo_transRegipByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transRegipByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_gainsPassport_args implements TBase<lg_userinfo_gainsPassport_args, lg_userinfo_gainsPassport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_gainsPassport_args");

    private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)1);
    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRING, (short)2);

    public int type;
    public String request;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TYPE((short)1, "type"),
      REQUEST((short)2, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_gainsPassport_args.class, metaDataMap);
    }

    public lg_userinfo_gainsPassport_args() {
    }

    public lg_userinfo_gainsPassport_args(
      int type,
      String request)
    {
      this();
      this.type = type;
      setTypeIsSet(true);
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_gainsPassport_args(lg_userinfo_gainsPassport_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.type = other.type;
      if (other.isSetRequest()) {
        this.request = other.request;
      }
    }

    public lg_userinfo_gainsPassport_args deepCopy() {
      return new lg_userinfo_gainsPassport_args(this);
    }

    @Override
    public void clear() {
      setTypeIsSet(false);
      this.type = 0;
      this.request = null;
    }

    public int getType() {
      return this.type;
    }

    public lg_userinfo_gainsPassport_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bit_vector.clear(__TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been asigned a value) and false otherwise */
    public boolean isSetType() {
      return __isset_bit_vector.get(__TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bit_vector.set(__TYPE_ISSET_ID, value);
    }

    public String getRequest() {
      return this.request;
    }

    public lg_userinfo_gainsPassport_args setRequest(String request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been asigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return new Integer(getType());

      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_gainsPassport_args)
        return this.equals((lg_userinfo_gainsPassport_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_gainsPassport_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_gainsPassport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_gainsPassport_args typedOther = (lg_userinfo_gainsPassport_args)other;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TYPE
            if (field.type == TType.I32) {
              this.type = iprot.readI32();
              setTypeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // REQUEST
            if (field.type == TType.STRING) {
              this.request = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type);
      oprot.writeFieldEnd();
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        oprot.writeString(this.request);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_gainsPassport_args(");
      boolean first = true;

      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_gainsPassport_result implements TBase<lg_userinfo_gainsPassport_result, lg_userinfo_gainsPassport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_gainsPassport_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_gainsPassport_result.class, metaDataMap);
    }

    public lg_userinfo_gainsPassport_result() {
    }

    public lg_userinfo_gainsPassport_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_gainsPassport_result(lg_userinfo_gainsPassport_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_gainsPassport_result deepCopy() {
      return new lg_userinfo_gainsPassport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_gainsPassport_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_gainsPassport_result)
        return this.equals((lg_userinfo_gainsPassport_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_gainsPassport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_gainsPassport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_gainsPassport_result typedOther = (lg_userinfo_gainsPassport_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_gainsPassport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_gainsgbuid_args implements TBase<lg_userinfo_gainsgbuid_args, lg_userinfo_gainsgbuid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_gainsgbuid_args");

    private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)1);
    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRING, (short)2);

    public int type;
    public String request;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TYPE((short)1, "type"),
      REQUEST((short)2, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_gainsgbuid_args.class, metaDataMap);
    }

    public lg_userinfo_gainsgbuid_args() {
    }

    public lg_userinfo_gainsgbuid_args(
      int type,
      String request)
    {
      this();
      this.type = type;
      setTypeIsSet(true);
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_gainsgbuid_args(lg_userinfo_gainsgbuid_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.type = other.type;
      if (other.isSetRequest()) {
        this.request = other.request;
      }
    }

    public lg_userinfo_gainsgbuid_args deepCopy() {
      return new lg_userinfo_gainsgbuid_args(this);
    }

    @Override
    public void clear() {
      setTypeIsSet(false);
      this.type = 0;
      this.request = null;
    }

    public int getType() {
      return this.type;
    }

    public lg_userinfo_gainsgbuid_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bit_vector.clear(__TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been asigned a value) and false otherwise */
    public boolean isSetType() {
      return __isset_bit_vector.get(__TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bit_vector.set(__TYPE_ISSET_ID, value);
    }

    public String getRequest() {
      return this.request;
    }

    public lg_userinfo_gainsgbuid_args setRequest(String request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been asigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return new Integer(getType());

      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_gainsgbuid_args)
        return this.equals((lg_userinfo_gainsgbuid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_gainsgbuid_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_gainsgbuid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_gainsgbuid_args typedOther = (lg_userinfo_gainsgbuid_args)other;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TYPE
            if (field.type == TType.I32) {
              this.type = iprot.readI32();
              setTypeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // REQUEST
            if (field.type == TType.STRING) {
              this.request = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type);
      oprot.writeFieldEnd();
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        oprot.writeString(this.request);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_gainsgbuid_args(");
      boolean first = true;

      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_gainsgbuid_result implements TBase<lg_userinfo_gainsgbuid_result, lg_userinfo_gainsgbuid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_gainsgbuid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_gainsgbuid_result.class, metaDataMap);
    }

    public lg_userinfo_gainsgbuid_result() {
    }

    public lg_userinfo_gainsgbuid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_gainsgbuid_result(lg_userinfo_gainsgbuid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lg_userinfo_gainsgbuid_result deepCopy() {
      return new lg_userinfo_gainsgbuid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lg_userinfo_gainsgbuid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_gainsgbuid_result)
        return this.equals((lg_userinfo_gainsgbuid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_gainsgbuid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_gainsgbuid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_gainsgbuid_result typedOther = (lg_userinfo_gainsgbuid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_gainsgbuid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkPassportPhoneBind_args implements TBase<lg_userinfo_checkPassportPhoneBind_args, lg_userinfo_checkPassportPhoneBind_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkPassportPhoneBind_args");

    private static final TField PASSPORT_FIELD_DESC = new TField("passport", TType.STRING, (short)1);
    private static final TField PHONE_FIELD_DESC = new TField("phone", TType.STRING, (short)2);

    public String passport;
    public String phone;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      PASSPORT((short)1, "passport"),
      PHONE((short)2, "phone");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSPORT
            return PASSPORT;
          case 2: // PHONE
            return PHONE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSPORT, new FieldMetaData("passport", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PHONE, new FieldMetaData("phone", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkPassportPhoneBind_args.class, metaDataMap);
    }

    public lg_userinfo_checkPassportPhoneBind_args() {
    }

    public lg_userinfo_checkPassportPhoneBind_args(
      String passport,
      String phone)
    {
      this();
      this.passport = passport;
      this.phone = phone;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkPassportPhoneBind_args(lg_userinfo_checkPassportPhoneBind_args other) {
      if (other.isSetPassport()) {
        this.passport = other.passport;
      }
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
    }

    public lg_userinfo_checkPassportPhoneBind_args deepCopy() {
      return new lg_userinfo_checkPassportPhoneBind_args(this);
    }

    @Override
    public void clear() {
      this.passport = null;
      this.phone = null;
    }

    public String getPassport() {
      return this.passport;
    }

    public lg_userinfo_checkPassportPhoneBind_args setPassport(String passport) {
      this.passport = passport;
      return this;
    }

    public void unsetPassport() {
      this.passport = null;
    }

    /** Returns true if field passport is set (has been asigned a value) and false otherwise */
    public boolean isSetPassport() {
      return this.passport != null;
    }

    public void setPassportIsSet(boolean value) {
      if (!value) {
        this.passport = null;
      }
    }

    public String getPhone() {
      return this.phone;
    }

    public lg_userinfo_checkPassportPhoneBind_args setPhone(String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been asigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PASSPORT:
        if (value == null) {
          unsetPassport();
        } else {
          setPassport((String)value);
        }
        break;

      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSPORT:
        return getPassport();

      case PHONE:
        return getPhone();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASSPORT:
        return isSetPassport();
      case PHONE:
        return isSetPhone();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkPassportPhoneBind_args)
        return this.equals((lg_userinfo_checkPassportPhoneBind_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkPassportPhoneBind_args that) {
      if (that == null)
        return false;

      boolean this_present_passport = true && this.isSetPassport();
      boolean that_present_passport = true && that.isSetPassport();
      if (this_present_passport || that_present_passport) {
        if (!(this_present_passport && that_present_passport))
          return false;
        if (!this.passport.equals(that.passport))
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkPassportPhoneBind_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkPassportPhoneBind_args typedOther = (lg_userinfo_checkPassportPhoneBind_args)other;

      lastComparison = Boolean.valueOf(isSetPassport()).compareTo(typedOther.isSetPassport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassport()) {
        lastComparison = TBaseHelper.compareTo(this.passport, typedOther.passport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPhone()).compareTo(typedOther.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = TBaseHelper.compareTo(this.phone, typedOther.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PASSPORT
            if (field.type == TType.STRING) {
              this.passport = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PHONE
            if (field.type == TType.STRING) {
              this.phone = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.passport != null) {
        oprot.writeFieldBegin(PASSPORT_FIELD_DESC);
        oprot.writeString(this.passport);
        oprot.writeFieldEnd();
      }
      if (this.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(this.phone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkPassportPhoneBind_args(");
      boolean first = true;

      sb.append("passport:");
      if (this.passport == null) {
        sb.append("null");
      } else {
        sb.append(this.passport);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkPassportPhoneBind_result implements TBase<lg_userinfo_checkPassportPhoneBind_result, lg_userinfo_checkPassportPhoneBind_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkPassportPhoneBind_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkPassportPhoneBind_result.class, metaDataMap);
    }

    public lg_userinfo_checkPassportPhoneBind_result() {
    }

    public lg_userinfo_checkPassportPhoneBind_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkPassportPhoneBind_result(lg_userinfo_checkPassportPhoneBind_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_checkPassportPhoneBind_result deepCopy() {
      return new lg_userinfo_checkPassportPhoneBind_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_checkPassportPhoneBind_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkPassportPhoneBind_result)
        return this.equals((lg_userinfo_checkPassportPhoneBind_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkPassportPhoneBind_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkPassportPhoneBind_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkPassportPhoneBind_result typedOther = (lg_userinfo_checkPassportPhoneBind_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkPassportPhoneBind_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkUidPhoneBind_args implements TBase<lg_userinfo_checkUidPhoneBind_args, lg_userinfo_checkUidPhoneBind_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkUidPhoneBind_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);
    private static final TField PHONE_FIELD_DESC = new TField("phone", TType.STRING, (short)2);

    public String uid;
    public String phone;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid"),
      PHONE((short)2, "phone");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PHONE
            return PHONE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PHONE, new FieldMetaData("phone", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkUidPhoneBind_args.class, metaDataMap);
    }

    public lg_userinfo_checkUidPhoneBind_args() {
    }

    public lg_userinfo_checkUidPhoneBind_args(
      String uid,
      String phone)
    {
      this();
      this.uid = uid;
      this.phone = phone;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkUidPhoneBind_args(lg_userinfo_checkUidPhoneBind_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
    }

    public lg_userinfo_checkUidPhoneBind_args deepCopy() {
      return new lg_userinfo_checkUidPhoneBind_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
      this.phone = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_checkUidPhoneBind_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public String getPhone() {
      return this.phone;
    }

    public lg_userinfo_checkUidPhoneBind_args setPhone(String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been asigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case PHONE:
        return getPhone();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PHONE:
        return isSetPhone();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkUidPhoneBind_args)
        return this.equals((lg_userinfo_checkUidPhoneBind_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkUidPhoneBind_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkUidPhoneBind_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkUidPhoneBind_args typedOther = (lg_userinfo_checkUidPhoneBind_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPhone()).compareTo(typedOther.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = TBaseHelper.compareTo(this.phone, typedOther.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PHONE
            if (field.type == TType.STRING) {
              this.phone = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      if (this.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(this.phone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkUidPhoneBind_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkUidPhoneBind_result implements TBase<lg_userinfo_checkUidPhoneBind_result, lg_userinfo_checkUidPhoneBind_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkUidPhoneBind_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkUidPhoneBind_result.class, metaDataMap);
    }

    public lg_userinfo_checkUidPhoneBind_result() {
    }

    public lg_userinfo_checkUidPhoneBind_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkUidPhoneBind_result(lg_userinfo_checkUidPhoneBind_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_checkUidPhoneBind_result deepCopy() {
      return new lg_userinfo_checkUidPhoneBind_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_checkUidPhoneBind_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkUidPhoneBind_result)
        return this.equals((lg_userinfo_checkUidPhoneBind_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkUidPhoneBind_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkUidPhoneBind_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkUidPhoneBind_result typedOther = (lg_userinfo_checkUidPhoneBind_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkUidPhoneBind_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkUidAccountBind_args implements TBase<lg_userinfo_checkUidAccountBind_args, lg_userinfo_checkUidAccountBind_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkUidAccountBind_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);
    private static final TField ACCOUNT_FIELD_DESC = new TField("account", TType.STRING, (short)2);

    public String uid;
    public String account;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid"),
      ACCOUNT((short)2, "account");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // ACCOUNT
            return ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ACCOUNT, new FieldMetaData("account", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkUidAccountBind_args.class, metaDataMap);
    }

    public lg_userinfo_checkUidAccountBind_args() {
    }

    public lg_userinfo_checkUidAccountBind_args(
      String uid,
      String account)
    {
      this();
      this.uid = uid;
      this.account = account;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkUidAccountBind_args(lg_userinfo_checkUidAccountBind_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetAccount()) {
        this.account = other.account;
      }
    }

    public lg_userinfo_checkUidAccountBind_args deepCopy() {
      return new lg_userinfo_checkUidAccountBind_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
      this.account = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_checkUidAccountBind_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public String getAccount() {
      return this.account;
    }

    public lg_userinfo_checkUidAccountBind_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been asigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case ACCOUNT:
        return getAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case ACCOUNT:
        return isSetAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkUidAccountBind_args)
        return this.equals((lg_userinfo_checkUidAccountBind_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkUidAccountBind_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkUidAccountBind_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkUidAccountBind_args typedOther = (lg_userinfo_checkUidAccountBind_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(typedOther.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = TBaseHelper.compareTo(this.account, typedOther.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ACCOUNT
            if (field.type == TType.STRING) {
              this.account = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      if (this.account != null) {
        oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
        oprot.writeString(this.account);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkUidAccountBind_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkUidAccountBind_result implements TBase<lg_userinfo_checkUidAccountBind_result, lg_userinfo_checkUidAccountBind_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkUidAccountBind_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkUidAccountBind_result.class, metaDataMap);
    }

    public lg_userinfo_checkUidAccountBind_result() {
    }

    public lg_userinfo_checkUidAccountBind_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkUidAccountBind_result(lg_userinfo_checkUidAccountBind_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_checkUidAccountBind_result deepCopy() {
      return new lg_userinfo_checkUidAccountBind_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_checkUidAccountBind_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkUidAccountBind_result)
        return this.equals((lg_userinfo_checkUidAccountBind_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkUidAccountBind_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkUidAccountBind_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkUidAccountBind_result typedOther = (lg_userinfo_checkUidAccountBind_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkUidAccountBind_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkPassportAccountBind_args implements TBase<lg_userinfo_checkPassportAccountBind_args, lg_userinfo_checkPassportAccountBind_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkPassportAccountBind_args");

    private static final TField PASSPORT_FIELD_DESC = new TField("passport", TType.STRING, (short)1);
    private static final TField ACCOUNT_FIELD_DESC = new TField("account", TType.STRING, (short)2);

    public String passport;
    public String account;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      PASSPORT((short)1, "passport"),
      ACCOUNT((short)2, "account");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSPORT
            return PASSPORT;
          case 2: // ACCOUNT
            return ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSPORT, new FieldMetaData("passport", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ACCOUNT, new FieldMetaData("account", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkPassportAccountBind_args.class, metaDataMap);
    }

    public lg_userinfo_checkPassportAccountBind_args() {
    }

    public lg_userinfo_checkPassportAccountBind_args(
      String passport,
      String account)
    {
      this();
      this.passport = passport;
      this.account = account;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkPassportAccountBind_args(lg_userinfo_checkPassportAccountBind_args other) {
      if (other.isSetPassport()) {
        this.passport = other.passport;
      }
      if (other.isSetAccount()) {
        this.account = other.account;
      }
    }

    public lg_userinfo_checkPassportAccountBind_args deepCopy() {
      return new lg_userinfo_checkPassportAccountBind_args(this);
    }

    @Override
    public void clear() {
      this.passport = null;
      this.account = null;
    }

    public String getPassport() {
      return this.passport;
    }

    public lg_userinfo_checkPassportAccountBind_args setPassport(String passport) {
      this.passport = passport;
      return this;
    }

    public void unsetPassport() {
      this.passport = null;
    }

    /** Returns true if field passport is set (has been asigned a value) and false otherwise */
    public boolean isSetPassport() {
      return this.passport != null;
    }

    public void setPassportIsSet(boolean value) {
      if (!value) {
        this.passport = null;
      }
    }

    public String getAccount() {
      return this.account;
    }

    public lg_userinfo_checkPassportAccountBind_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been asigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PASSPORT:
        if (value == null) {
          unsetPassport();
        } else {
          setPassport((String)value);
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSPORT:
        return getPassport();

      case ACCOUNT:
        return getAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASSPORT:
        return isSetPassport();
      case ACCOUNT:
        return isSetAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkPassportAccountBind_args)
        return this.equals((lg_userinfo_checkPassportAccountBind_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkPassportAccountBind_args that) {
      if (that == null)
        return false;

      boolean this_present_passport = true && this.isSetPassport();
      boolean that_present_passport = true && that.isSetPassport();
      if (this_present_passport || that_present_passport) {
        if (!(this_present_passport && that_present_passport))
          return false;
        if (!this.passport.equals(that.passport))
          return false;
      }

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkPassportAccountBind_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkPassportAccountBind_args typedOther = (lg_userinfo_checkPassportAccountBind_args)other;

      lastComparison = Boolean.valueOf(isSetPassport()).compareTo(typedOther.isSetPassport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassport()) {
        lastComparison = TBaseHelper.compareTo(this.passport, typedOther.passport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(typedOther.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = TBaseHelper.compareTo(this.account, typedOther.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PASSPORT
            if (field.type == TType.STRING) {
              this.passport = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ACCOUNT
            if (field.type == TType.STRING) {
              this.account = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.passport != null) {
        oprot.writeFieldBegin(PASSPORT_FIELD_DESC);
        oprot.writeString(this.passport);
        oprot.writeFieldEnd();
      }
      if (this.account != null) {
        oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
        oprot.writeString(this.account);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkPassportAccountBind_args(");
      boolean first = true;

      sb.append("passport:");
      if (this.passport == null) {
        sb.append("null");
      } else {
        sb.append(this.passport);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkPassportAccountBind_result implements TBase<lg_userinfo_checkPassportAccountBind_result, lg_userinfo_checkPassportAccountBind_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkPassportAccountBind_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkPassportAccountBind_result.class, metaDataMap);
    }

    public lg_userinfo_checkPassportAccountBind_result() {
    }

    public lg_userinfo_checkPassportAccountBind_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkPassportAccountBind_result(lg_userinfo_checkPassportAccountBind_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_checkPassportAccountBind_result deepCopy() {
      return new lg_userinfo_checkPassportAccountBind_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_checkPassportAccountBind_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkPassportAccountBind_result)
        return this.equals((lg_userinfo_checkPassportAccountBind_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkPassportAccountBind_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkPassportAccountBind_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkPassportAccountBind_result typedOther = (lg_userinfo_checkPassportAccountBind_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkPassportAccountBind_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkAccountBindByUid_args implements TBase<lg_userinfo_checkAccountBindByUid_args, lg_userinfo_checkAccountBindByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkAccountBindByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkAccountBindByUid_args.class, metaDataMap);
    }

    public lg_userinfo_checkAccountBindByUid_args() {
    }

    public lg_userinfo_checkAccountBindByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkAccountBindByUid_args(lg_userinfo_checkAccountBindByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_checkAccountBindByUid_args deepCopy() {
      return new lg_userinfo_checkAccountBindByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_checkAccountBindByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkAccountBindByUid_args)
        return this.equals((lg_userinfo_checkAccountBindByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkAccountBindByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkAccountBindByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkAccountBindByUid_args typedOther = (lg_userinfo_checkAccountBindByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkAccountBindByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkAccountBindByUid_result implements TBase<lg_userinfo_checkAccountBindByUid_result, lg_userinfo_checkAccountBindByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkAccountBindByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkAccountBindByUid_result.class, metaDataMap);
    }

    public lg_userinfo_checkAccountBindByUid_result() {
    }

    public lg_userinfo_checkAccountBindByUid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkAccountBindByUid_result(lg_userinfo_checkAccountBindByUid_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_checkAccountBindByUid_result deepCopy() {
      return new lg_userinfo_checkAccountBindByUid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_checkAccountBindByUid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkAccountBindByUid_result)
        return this.equals((lg_userinfo_checkAccountBindByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkAccountBindByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkAccountBindByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkAccountBindByUid_result typedOther = (lg_userinfo_checkAccountBindByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkAccountBindByUid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkgbNoUsable_args implements TBase<lg_userinfo_checkgbNoUsable_args, lg_userinfo_checkgbNoUsable_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkgbNoUsable_args");

    private static final TField gbID_FIELD_DESC = new TField("gbid", TType.STRING, (short)1);

    public String gbid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      gbID((short)1, "gbid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // gbID
            return gbID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.gbID, new FieldMetaData("gbid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkgbNoUsable_args.class, metaDataMap);
    }

    public lg_userinfo_checkgbNoUsable_args() {
    }

    public lg_userinfo_checkgbNoUsable_args(
      String gbid)
    {
      this();
      this.gbid = gbid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkgbNoUsable_args(lg_userinfo_checkgbNoUsable_args other) {
      if (other.isSetgbid()) {
        this.gbid = other.gbid;
      }
    }

    public lg_userinfo_checkgbNoUsable_args deepCopy() {
      return new lg_userinfo_checkgbNoUsable_args(this);
    }

    @Override
    public void clear() {
      this.gbid = null;
    }

    public String getgbid() {
      return this.gbid;
    }

    public lg_userinfo_checkgbNoUsable_args setgbid(String gbid) {
      this.gbid = gbid;
      return this;
    }

    public void unsetgbid() {
      this.gbid = null;
    }

    /** Returns true if field gbid is set (has been asigned a value) and false otherwise */
    public boolean isSetgbid() {
      return this.gbid != null;
    }

    public void setgbidIsSet(boolean value) {
      if (!value) {
        this.gbid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case gbID:
        if (value == null) {
          unsetgbid();
        } else {
          setgbid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case gbID:
        return getgbid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case gbID:
        return isSetgbid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkgbNoUsable_args)
        return this.equals((lg_userinfo_checkgbNoUsable_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkgbNoUsable_args that) {
      if (that == null)
        return false;

      boolean this_present_gbid = true && this.isSetgbid();
      boolean that_present_gbid = true && that.isSetgbid();
      if (this_present_gbid || that_present_gbid) {
        if (!(this_present_gbid && that_present_gbid))
          return false;
        if (!this.gbid.equals(that.gbid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkgbNoUsable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkgbNoUsable_args typedOther = (lg_userinfo_checkgbNoUsable_args)other;

      lastComparison = Boolean.valueOf(isSetgbid()).compareTo(typedOther.isSetgbid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetgbid()) {
        lastComparison = TBaseHelper.compareTo(this.gbid, typedOther.gbid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // gbID
            if (field.type == TType.STRING) {
              this.gbid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.gbid != null) {
        oprot.writeFieldBegin(gbID_FIELD_DESC);
        oprot.writeString(this.gbid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkgbNoUsable_args(");
      boolean first = true;

      sb.append("gbid:");
      if (this.gbid == null) {
        sb.append("null");
      } else {
        sb.append(this.gbid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkgbNoUsable_result implements TBase<lg_userinfo_checkgbNoUsable_result, lg_userinfo_checkgbNoUsable_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkgbNoUsable_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkgbNoUsable_result.class, metaDataMap);
    }

    public lg_userinfo_checkgbNoUsable_result() {
    }

    public lg_userinfo_checkgbNoUsable_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkgbNoUsable_result(lg_userinfo_checkgbNoUsable_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_checkgbNoUsable_result deepCopy() {
      return new lg_userinfo_checkgbNoUsable_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_checkgbNoUsable_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkgbNoUsable_result)
        return this.equals((lg_userinfo_checkgbNoUsable_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkgbNoUsable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkgbNoUsable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkgbNoUsable_result typedOther = (lg_userinfo_checkgbNoUsable_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkgbNoUsable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkAccountUsable_args implements TBase<lg_userinfo_checkAccountUsable_args, lg_userinfo_checkAccountUsable_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkAccountUsable_args");

    private static final TField ACCOUNT_FIELD_DESC = new TField("account", TType.STRING, (short)1);

    public String account;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ACCOUNT((short)1, "account");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT
            return ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT, new FieldMetaData("account", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkAccountUsable_args.class, metaDataMap);
    }

    public lg_userinfo_checkAccountUsable_args() {
    }

    public lg_userinfo_checkAccountUsable_args(
      String account)
    {
      this();
      this.account = account;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkAccountUsable_args(lg_userinfo_checkAccountUsable_args other) {
      if (other.isSetAccount()) {
        this.account = other.account;
      }
    }

    public lg_userinfo_checkAccountUsable_args deepCopy() {
      return new lg_userinfo_checkAccountUsable_args(this);
    }

    @Override
    public void clear() {
      this.account = null;
    }

    public String getAccount() {
      return this.account;
    }

    public lg_userinfo_checkAccountUsable_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been asigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT:
        return getAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT:
        return isSetAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkAccountUsable_args)
        return this.equals((lg_userinfo_checkAccountUsable_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkAccountUsable_args that) {
      if (that == null)
        return false;

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkAccountUsable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkAccountUsable_args typedOther = (lg_userinfo_checkAccountUsable_args)other;

      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(typedOther.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = TBaseHelper.compareTo(this.account, typedOther.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ACCOUNT
            if (field.type == TType.STRING) {
              this.account = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.account != null) {
        oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
        oprot.writeString(this.account);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkAccountUsable_args(");
      boolean first = true;

      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkAccountUsable_result implements TBase<lg_userinfo_checkAccountUsable_result, lg_userinfo_checkAccountUsable_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkAccountUsable_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkAccountUsable_result.class, metaDataMap);
    }

    public lg_userinfo_checkAccountUsable_result() {
    }

    public lg_userinfo_checkAccountUsable_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkAccountUsable_result(lg_userinfo_checkAccountUsable_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_checkAccountUsable_result deepCopy() {
      return new lg_userinfo_checkAccountUsable_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_checkAccountUsable_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkAccountUsable_result)
        return this.equals((lg_userinfo_checkAccountUsable_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkAccountUsable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkAccountUsable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkAccountUsable_result typedOther = (lg_userinfo_checkAccountUsable_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkAccountUsable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkVerifiedEmailByUid_args implements TBase<lg_userinfo_checkVerifiedEmailByUid_args, lg_userinfo_checkVerifiedEmailByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkVerifiedEmailByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkVerifiedEmailByUid_args.class, metaDataMap);
    }

    public lg_userinfo_checkVerifiedEmailByUid_args() {
    }

    public lg_userinfo_checkVerifiedEmailByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkVerifiedEmailByUid_args(lg_userinfo_checkVerifiedEmailByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_checkVerifiedEmailByUid_args deepCopy() {
      return new lg_userinfo_checkVerifiedEmailByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_checkVerifiedEmailByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkVerifiedEmailByUid_args)
        return this.equals((lg_userinfo_checkVerifiedEmailByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkVerifiedEmailByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkVerifiedEmailByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkVerifiedEmailByUid_args typedOther = (lg_userinfo_checkVerifiedEmailByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkVerifiedEmailByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkVerifiedEmailByUid_result implements TBase<lg_userinfo_checkVerifiedEmailByUid_result, lg_userinfo_checkVerifiedEmailByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkVerifiedEmailByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkVerifiedEmailByUid_result.class, metaDataMap);
    }

    public lg_userinfo_checkVerifiedEmailByUid_result() {
    }

    public lg_userinfo_checkVerifiedEmailByUid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkVerifiedEmailByUid_result(lg_userinfo_checkVerifiedEmailByUid_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_checkVerifiedEmailByUid_result deepCopy() {
      return new lg_userinfo_checkVerifiedEmailByUid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_checkVerifiedEmailByUid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkVerifiedEmailByUid_result)
        return this.equals((lg_userinfo_checkVerifiedEmailByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkVerifiedEmailByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkVerifiedEmailByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkVerifiedEmailByUid_result typedOther = (lg_userinfo_checkVerifiedEmailByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkVerifiedEmailByUid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkUidIdnumberBind_args implements TBase<lg_userinfo_checkUidIdnumberBind_args, lg_userinfo_checkUidIdnumberBind_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkUidIdnumberBind_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);
    private static final TField IDNUMBER_FIELD_DESC = new TField("idnumber", TType.STRING, (short)2);

    public String uid;
    public String idnumber;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid"),
      IDNUMBER((short)2, "idnumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // IDNUMBER
            return IDNUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.IDNUMBER, new FieldMetaData("idnumber", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkUidIdnumberBind_args.class, metaDataMap);
    }

    public lg_userinfo_checkUidIdnumberBind_args() {
    }

    public lg_userinfo_checkUidIdnumberBind_args(
      String uid,
      String idnumber)
    {
      this();
      this.uid = uid;
      this.idnumber = idnumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkUidIdnumberBind_args(lg_userinfo_checkUidIdnumberBind_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetIdnumber()) {
        this.idnumber = other.idnumber;
      }
    }

    public lg_userinfo_checkUidIdnumberBind_args deepCopy() {
      return new lg_userinfo_checkUidIdnumberBind_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
      this.idnumber = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_checkUidIdnumberBind_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public String getIdnumber() {
      return this.idnumber;
    }

    public lg_userinfo_checkUidIdnumberBind_args setIdnumber(String idnumber) {
      this.idnumber = idnumber;
      return this;
    }

    public void unsetIdnumber() {
      this.idnumber = null;
    }

    /** Returns true if field idnumber is set (has been asigned a value) and false otherwise */
    public boolean isSetIdnumber() {
      return this.idnumber != null;
    }

    public void setIdnumberIsSet(boolean value) {
      if (!value) {
        this.idnumber = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      case IDNUMBER:
        if (value == null) {
          unsetIdnumber();
        } else {
          setIdnumber((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case IDNUMBER:
        return getIdnumber();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case IDNUMBER:
        return isSetIdnumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkUidIdnumberBind_args)
        return this.equals((lg_userinfo_checkUidIdnumberBind_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkUidIdnumberBind_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_idnumber = true && this.isSetIdnumber();
      boolean that_present_idnumber = true && that.isSetIdnumber();
      if (this_present_idnumber || that_present_idnumber) {
        if (!(this_present_idnumber && that_present_idnumber))
          return false;
        if (!this.idnumber.equals(that.idnumber))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkUidIdnumberBind_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkUidIdnumberBind_args typedOther = (lg_userinfo_checkUidIdnumberBind_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdnumber()).compareTo(typedOther.isSetIdnumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdnumber()) {
        lastComparison = TBaseHelper.compareTo(this.idnumber, typedOther.idnumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // IDNUMBER
            if (field.type == TType.STRING) {
              this.idnumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      if (this.idnumber != null) {
        oprot.writeFieldBegin(IDNUMBER_FIELD_DESC);
        oprot.writeString(this.idnumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkUidIdnumberBind_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idnumber:");
      if (this.idnumber == null) {
        sb.append("null");
      } else {
        sb.append(this.idnumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkUidIdnumberBind_result implements TBase<lg_userinfo_checkUidIdnumberBind_result, lg_userinfo_checkUidIdnumberBind_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkUidIdnumberBind_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkUidIdnumberBind_result.class, metaDataMap);
    }

    public lg_userinfo_checkUidIdnumberBind_result() {
    }

    public lg_userinfo_checkUidIdnumberBind_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkUidIdnumberBind_result(lg_userinfo_checkUidIdnumberBind_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_checkUidIdnumberBind_result deepCopy() {
      return new lg_userinfo_checkUidIdnumberBind_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_checkUidIdnumberBind_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkUidIdnumberBind_result)
        return this.equals((lg_userinfo_checkUidIdnumberBind_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkUidIdnumberBind_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkUidIdnumberBind_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkUidIdnumberBind_result typedOther = (lg_userinfo_checkUidIdnumberBind_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkUidIdnumberBind_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkRegtimeByUid_args implements TBase<lg_userinfo_checkRegtimeByUid_args, lg_userinfo_checkRegtimeByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkRegtimeByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);
    private static final TField REGTIME_FIELD_DESC = new TField("regtime", TType.STRING, (short)2);

    public String uid;
    public String regtime;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid"),
      REGTIME((short)2, "regtime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // REGTIME
            return REGTIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.REGTIME, new FieldMetaData("regtime", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkRegtimeByUid_args.class, metaDataMap);
    }

    public lg_userinfo_checkRegtimeByUid_args() {
    }

    public lg_userinfo_checkRegtimeByUid_args(
      String uid,
      String regtime)
    {
      this();
      this.uid = uid;
      this.regtime = regtime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkRegtimeByUid_args(lg_userinfo_checkRegtimeByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetRegtime()) {
        this.regtime = other.regtime;
      }
    }

    public lg_userinfo_checkRegtimeByUid_args deepCopy() {
      return new lg_userinfo_checkRegtimeByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
      this.regtime = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_checkRegtimeByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public String getRegtime() {
      return this.regtime;
    }

    public lg_userinfo_checkRegtimeByUid_args setRegtime(String regtime) {
      this.regtime = regtime;
      return this;
    }

    public void unsetRegtime() {
      this.regtime = null;
    }

    /** Returns true if field regtime is set (has been asigned a value) and false otherwise */
    public boolean isSetRegtime() {
      return this.regtime != null;
    }

    public void setRegtimeIsSet(boolean value) {
      if (!value) {
        this.regtime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      case REGTIME:
        if (value == null) {
          unsetRegtime();
        } else {
          setRegtime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case REGTIME:
        return getRegtime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case REGTIME:
        return isSetRegtime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkRegtimeByUid_args)
        return this.equals((lg_userinfo_checkRegtimeByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkRegtimeByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_regtime = true && this.isSetRegtime();
      boolean that_present_regtime = true && that.isSetRegtime();
      if (this_present_regtime || that_present_regtime) {
        if (!(this_present_regtime && that_present_regtime))
          return false;
        if (!this.regtime.equals(that.regtime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkRegtimeByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkRegtimeByUid_args typedOther = (lg_userinfo_checkRegtimeByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegtime()).compareTo(typedOther.isSetRegtime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegtime()) {
        lastComparison = TBaseHelper.compareTo(this.regtime, typedOther.regtime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // REGTIME
            if (field.type == TType.STRING) {
              this.regtime = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      if (this.regtime != null) {
        oprot.writeFieldBegin(REGTIME_FIELD_DESC);
        oprot.writeString(this.regtime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkRegtimeByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("regtime:");
      if (this.regtime == null) {
        sb.append("null");
      } else {
        sb.append(this.regtime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkRegtimeByUid_result implements TBase<lg_userinfo_checkRegtimeByUid_result, lg_userinfo_checkRegtimeByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkRegtimeByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkRegtimeByUid_result.class, metaDataMap);
    }

    public lg_userinfo_checkRegtimeByUid_result() {
    }

    public lg_userinfo_checkRegtimeByUid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkRegtimeByUid_result(lg_userinfo_checkRegtimeByUid_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_checkRegtimeByUid_result deepCopy() {
      return new lg_userinfo_checkRegtimeByUid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_checkRegtimeByUid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkRegtimeByUid_result)
        return this.equals((lg_userinfo_checkRegtimeByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkRegtimeByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkRegtimeByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkRegtimeByUid_result typedOther = (lg_userinfo_checkRegtimeByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkRegtimeByUid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getUserBindCountByMobile_args implements TBase<lg_userinfo_getUserBindCountByMobile_args, lg_userinfo_getUserBindCountByMobile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getUserBindCountByMobile_args");

    private static final TField MOBILE_FIELD_DESC = new TField("mobile", TType.STRING, (short)1);

    public String mobile;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      MOBILE((short)1, "mobile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOBILE
            return MOBILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOBILE, new FieldMetaData("mobile", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getUserBindCountByMobile_args.class, metaDataMap);
    }

    public lg_userinfo_getUserBindCountByMobile_args() {
    }

    public lg_userinfo_getUserBindCountByMobile_args(
      String mobile)
    {
      this();
      this.mobile = mobile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getUserBindCountByMobile_args(lg_userinfo_getUserBindCountByMobile_args other) {
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
    }

    public lg_userinfo_getUserBindCountByMobile_args deepCopy() {
      return new lg_userinfo_getUserBindCountByMobile_args(this);
    }

    @Override
    public void clear() {
      this.mobile = null;
    }

    public String getMobile() {
      return this.mobile;
    }

    public lg_userinfo_getUserBindCountByMobile_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been asigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MOBILE:
        return getMobile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MOBILE:
        return isSetMobile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getUserBindCountByMobile_args)
        return this.equals((lg_userinfo_getUserBindCountByMobile_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getUserBindCountByMobile_args that) {
      if (that == null)
        return false;

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getUserBindCountByMobile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getUserBindCountByMobile_args typedOther = (lg_userinfo_getUserBindCountByMobile_args)other;

      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(typedOther.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = TBaseHelper.compareTo(this.mobile, typedOther.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MOBILE
            if (field.type == TType.STRING) {
              this.mobile = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(this.mobile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getUserBindCountByMobile_args(");
      boolean first = true;

      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getUserBindCountByMobile_result implements TBase<lg_userinfo_getUserBindCountByMobile_result, lg_userinfo_getUserBindCountByMobile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getUserBindCountByMobile_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getUserBindCountByMobile_result.class, metaDataMap);
    }

    public lg_userinfo_getUserBindCountByMobile_result() {
    }

    public lg_userinfo_getUserBindCountByMobile_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getUserBindCountByMobile_result(lg_userinfo_getUserBindCountByMobile_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_getUserBindCountByMobile_result deepCopy() {
      return new lg_userinfo_getUserBindCountByMobile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_getUserBindCountByMobile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getUserBindCountByMobile_result)
        return this.equals((lg_userinfo_getUserBindCountByMobile_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getUserBindCountByMobile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getUserBindCountByMobile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getUserBindCountByMobile_result typedOther = (lg_userinfo_getUserBindCountByMobile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getUserBindCountByMobile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMibaoInfoBindByUid_args implements TBase<lg_userinfo_getMibaoInfoBindByUid_args, lg_userinfo_getMibaoInfoBindByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMibaoInfoBindByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMibaoInfoBindByUid_args.class, metaDataMap);
    }

    public lg_userinfo_getMibaoInfoBindByUid_args() {
    }

    public lg_userinfo_getMibaoInfoBindByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMibaoInfoBindByUid_args(lg_userinfo_getMibaoInfoBindByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_getMibaoInfoBindByUid_args deepCopy() {
      return new lg_userinfo_getMibaoInfoBindByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_getMibaoInfoBindByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMibaoInfoBindByUid_args)
        return this.equals((lg_userinfo_getMibaoInfoBindByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMibaoInfoBindByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMibaoInfoBindByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMibaoInfoBindByUid_args typedOther = (lg_userinfo_getMibaoInfoBindByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMibaoInfoBindByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMibaoInfoBindByUid_result implements TBase<lg_userinfo_getMibaoInfoBindByUid_result, lg_userinfo_getMibaoInfoBindByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMibaoInfoBindByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMibaoInfoBindByUid_result.class, metaDataMap);
    }

    public lg_userinfo_getMibaoInfoBindByUid_result() {
    }

    public lg_userinfo_getMibaoInfoBindByUid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMibaoInfoBindByUid_result(lg_userinfo_getMibaoInfoBindByUid_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_getMibaoInfoBindByUid_result deepCopy() {
      return new lg_userinfo_getMibaoInfoBindByUid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_getMibaoInfoBindByUid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMibaoInfoBindByUid_result)
        return this.equals((lg_userinfo_getMibaoInfoBindByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMibaoInfoBindByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMibaoInfoBindByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMibaoInfoBindByUid_result typedOther = (lg_userinfo_getMibaoInfoBindByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMibaoInfoBindByUid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMibaoInfoBindByPp_args implements TBase<lg_userinfo_getMibaoInfoBindByPp_args, lg_userinfo_getMibaoInfoBindByPp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMibaoInfoBindByPp_args");

    private static final TField PASSPORT_FIELD_DESC = new TField("passport", TType.STRING, (short)1);

    public String passport;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      PASSPORT((short)1, "passport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSPORT
            return PASSPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSPORT, new FieldMetaData("passport", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMibaoInfoBindByPp_args.class, metaDataMap);
    }

    public lg_userinfo_getMibaoInfoBindByPp_args() {
    }

    public lg_userinfo_getMibaoInfoBindByPp_args(
      String passport)
    {
      this();
      this.passport = passport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMibaoInfoBindByPp_args(lg_userinfo_getMibaoInfoBindByPp_args other) {
      if (other.isSetPassport()) {
        this.passport = other.passport;
      }
    }

    public lg_userinfo_getMibaoInfoBindByPp_args deepCopy() {
      return new lg_userinfo_getMibaoInfoBindByPp_args(this);
    }

    @Override
    public void clear() {
      this.passport = null;
    }

    public String getPassport() {
      return this.passport;
    }

    public lg_userinfo_getMibaoInfoBindByPp_args setPassport(String passport) {
      this.passport = passport;
      return this;
    }

    public void unsetPassport() {
      this.passport = null;
    }

    /** Returns true if field passport is set (has been asigned a value) and false otherwise */
    public boolean isSetPassport() {
      return this.passport != null;
    }

    public void setPassportIsSet(boolean value) {
      if (!value) {
        this.passport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PASSPORT:
        if (value == null) {
          unsetPassport();
        } else {
          setPassport((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSPORT:
        return getPassport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASSPORT:
        return isSetPassport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMibaoInfoBindByPp_args)
        return this.equals((lg_userinfo_getMibaoInfoBindByPp_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMibaoInfoBindByPp_args that) {
      if (that == null)
        return false;

      boolean this_present_passport = true && this.isSetPassport();
      boolean that_present_passport = true && that.isSetPassport();
      if (this_present_passport || that_present_passport) {
        if (!(this_present_passport && that_present_passport))
          return false;
        if (!this.passport.equals(that.passport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMibaoInfoBindByPp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMibaoInfoBindByPp_args typedOther = (lg_userinfo_getMibaoInfoBindByPp_args)other;

      lastComparison = Boolean.valueOf(isSetPassport()).compareTo(typedOther.isSetPassport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassport()) {
        lastComparison = TBaseHelper.compareTo(this.passport, typedOther.passport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PASSPORT
            if (field.type == TType.STRING) {
              this.passport = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.passport != null) {
        oprot.writeFieldBegin(PASSPORT_FIELD_DESC);
        oprot.writeString(this.passport);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMibaoInfoBindByPp_args(");
      boolean first = true;

      sb.append("passport:");
      if (this.passport == null) {
        sb.append("null");
      } else {
        sb.append(this.passport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMibaoInfoBindByPp_result implements TBase<lg_userinfo_getMibaoInfoBindByPp_result, lg_userinfo_getMibaoInfoBindByPp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMibaoInfoBindByPp_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMibaoInfoBindByPp_result.class, metaDataMap);
    }

    public lg_userinfo_getMibaoInfoBindByPp_result() {
    }

    public lg_userinfo_getMibaoInfoBindByPp_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMibaoInfoBindByPp_result(lg_userinfo_getMibaoInfoBindByPp_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_getMibaoInfoBindByPp_result deepCopy() {
      return new lg_userinfo_getMibaoInfoBindByPp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_getMibaoInfoBindByPp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMibaoInfoBindByPp_result)
        return this.equals((lg_userinfo_getMibaoInfoBindByPp_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMibaoInfoBindByPp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMibaoInfoBindByPp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMibaoInfoBindByPp_result typedOther = (lg_userinfo_getMibaoInfoBindByPp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMibaoInfoBindByPp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getgbidLoginInfoByUid_args implements TBase<lg_userinfo_getgbidLoginInfoByUid_args, lg_userinfo_getgbidLoginInfoByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getgbidLoginInfoByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getgbidLoginInfoByUid_args.class, metaDataMap);
    }

    public lg_userinfo_getgbidLoginInfoByUid_args() {
    }

    public lg_userinfo_getgbidLoginInfoByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getgbidLoginInfoByUid_args(lg_userinfo_getgbidLoginInfoByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_getgbidLoginInfoByUid_args deepCopy() {
      return new lg_userinfo_getgbidLoginInfoByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_getgbidLoginInfoByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getgbidLoginInfoByUid_args)
        return this.equals((lg_userinfo_getgbidLoginInfoByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getgbidLoginInfoByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getgbidLoginInfoByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getgbidLoginInfoByUid_args typedOther = (lg_userinfo_getgbidLoginInfoByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getgbidLoginInfoByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getgbidLoginInfoByUid_result implements TBase<lg_userinfo_getgbidLoginInfoByUid_result, lg_userinfo_getgbidLoginInfoByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getgbidLoginInfoByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getgbidLoginInfoByUid_result.class, metaDataMap);
    }

    public lg_userinfo_getgbidLoginInfoByUid_result() {
    }

    public lg_userinfo_getgbidLoginInfoByUid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getgbidLoginInfoByUid_result(lg_userinfo_getgbidLoginInfoByUid_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_getgbidLoginInfoByUid_result deepCopy() {
      return new lg_userinfo_getgbidLoginInfoByUid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_getgbidLoginInfoByUid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getgbidLoginInfoByUid_result)
        return this.equals((lg_userinfo_getgbidLoginInfoByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getgbidLoginInfoByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getgbidLoginInfoByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getgbidLoginInfoByUid_result typedOther = (lg_userinfo_getgbidLoginInfoByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getgbidLoginInfoByUid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_ping_args implements TBase<lg_userinfo_ping_args, lg_userinfo_ping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_ping_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);

    public int seq;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEQ((short)1, "seq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEQ
            return SEQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEQ, new FieldMetaData("seq", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_ping_args.class, metaDataMap);
    }

    public lg_userinfo_ping_args() {
    }

    public lg_userinfo_ping_args(
      int seq)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_ping_args(lg_userinfo_ping_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.seq = other.seq;
    }

    public lg_userinfo_ping_args deepCopy() {
      return new lg_userinfo_ping_args(this);
    }

    @Override
    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
    }

    public int getSeq() {
      return this.seq;
    }

    public lg_userinfo_ping_args setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
      return this;
    }

    public void unsetSeq() {
      __isset_bit_vector.clear(__SEQ_ISSET_ID);
    }

    /** Returns true if field seq is set (has been asigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_bit_vector.get(__SEQ_ISSET_ID);
    }

    public void setSeqIsSet(boolean value) {
      __isset_bit_vector.set(__SEQ_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEQ:
        if (value == null) {
          unsetSeq();
        } else {
          setSeq((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEQ:
        return new Integer(getSeq());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEQ:
        return isSetSeq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_ping_args)
        return this.equals((lg_userinfo_ping_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_ping_args that) {
      if (that == null)
        return false;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_ping_args typedOther = (lg_userinfo_ping_args)other;

      lastComparison = Boolean.valueOf(isSetSeq()).compareTo(typedOther.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, typedOther.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_ping_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_ping_result implements TBase<lg_userinfo_ping_result, lg_userinfo_ping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_ping_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_ping_result.class, metaDataMap);
    }

    public lg_userinfo_ping_result() {
    }

    public lg_userinfo_ping_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_ping_result(lg_userinfo_ping_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public lg_userinfo_ping_result deepCopy() {
      return new lg_userinfo_ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public lg_userinfo_ping_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_ping_result)
        return this.equals((lg_userinfo_ping_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_ping_result typedOther = (lg_userinfo_ping_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transPpSeqgbNoByUid_args implements TBase<lg_userinfo_transPpSeqgbNoByUid_args, lg_userinfo_transPpSeqgbNoByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transPpSeqgbNoByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transPpSeqgbNoByUid_args.class, metaDataMap);
    }

    public lg_userinfo_transPpSeqgbNoByUid_args() {
    }

    public lg_userinfo_transPpSeqgbNoByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transPpSeqgbNoByUid_args(lg_userinfo_transPpSeqgbNoByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_transPpSeqgbNoByUid_args deepCopy() {
      return new lg_userinfo_transPpSeqgbNoByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_transPpSeqgbNoByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transPpSeqgbNoByUid_args)
        return this.equals((lg_userinfo_transPpSeqgbNoByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_transPpSeqgbNoByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transPpSeqgbNoByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transPpSeqgbNoByUid_args typedOther = (lg_userinfo_transPpSeqgbNoByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transPpSeqgbNoByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transPpSeqgbNoByUid_result implements TBase<lg_userinfo_transPpSeqgbNoByUid_result, lg_userinfo_transPpSeqgbNoByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transPpSeqgbNoByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public PassportUdbseqImidRet success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, PassportUdbseqImidRet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transPpSeqgbNoByUid_result.class, metaDataMap);
    }

    public lg_userinfo_transPpSeqgbNoByUid_result() {
    }

    public lg_userinfo_transPpSeqgbNoByUid_result(
      PassportUdbseqImidRet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transPpSeqgbNoByUid_result(lg_userinfo_transPpSeqgbNoByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new PassportUdbseqImidRet(other.success);
      }
    }

    public lg_userinfo_transPpSeqgbNoByUid_result deepCopy() {
      return new lg_userinfo_transPpSeqgbNoByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PassportUdbseqImidRet getSuccess() {
      return this.success;
    }

    public lg_userinfo_transPpSeqgbNoByUid_result setSuccess(PassportUdbseqImidRet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PassportUdbseqImidRet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transPpSeqgbNoByUid_result)
        return this.equals((lg_userinfo_transPpSeqgbNoByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_transPpSeqgbNoByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transPpSeqgbNoByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transPpSeqgbNoByUid_result typedOther = (lg_userinfo_transPpSeqgbNoByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PassportUdbseqImidRet();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transPpSeqgbNoByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transUidSeqgbNoByPp_args implements TBase<lg_userinfo_transUidSeqgbNoByPp_args, lg_userinfo_transUidSeqgbNoByPp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transUidSeqgbNoByPp_args");

    private static final TField PASSPORTS_FIELD_DESC = new TField("passports", TType.STRING, (short)1);

    public String passports;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      PASSPORTS((short)1, "passports");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSPORTS
            return PASSPORTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSPORTS, new FieldMetaData("passports", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transUidSeqgbNoByPp_args.class, metaDataMap);
    }

    public lg_userinfo_transUidSeqgbNoByPp_args() {
    }

    public lg_userinfo_transUidSeqgbNoByPp_args(
      String passports)
    {
      this();
      this.passports = passports;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transUidSeqgbNoByPp_args(lg_userinfo_transUidSeqgbNoByPp_args other) {
      if (other.isSetPassports()) {
        this.passports = other.passports;
      }
    }

    public lg_userinfo_transUidSeqgbNoByPp_args deepCopy() {
      return new lg_userinfo_transUidSeqgbNoByPp_args(this);
    }

    @Override
    public void clear() {
      this.passports = null;
    }

    public String getPassports() {
      return this.passports;
    }

    public lg_userinfo_transUidSeqgbNoByPp_args setPassports(String passports) {
      this.passports = passports;
      return this;
    }

    public void unsetPassports() {
      this.passports = null;
    }

    /** Returns true if field passports is set (has been asigned a value) and false otherwise */
    public boolean isSetPassports() {
      return this.passports != null;
    }

    public void setPassportsIsSet(boolean value) {
      if (!value) {
        this.passports = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PASSPORTS:
        if (value == null) {
          unsetPassports();
        } else {
          setPassports((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSPORTS:
        return getPassports();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASSPORTS:
        return isSetPassports();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transUidSeqgbNoByPp_args)
        return this.equals((lg_userinfo_transUidSeqgbNoByPp_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_transUidSeqgbNoByPp_args that) {
      if (that == null)
        return false;

      boolean this_present_passports = true && this.isSetPassports();
      boolean that_present_passports = true && that.isSetPassports();
      if (this_present_passports || that_present_passports) {
        if (!(this_present_passports && that_present_passports))
          return false;
        if (!this.passports.equals(that.passports))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transUidSeqgbNoByPp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transUidSeqgbNoByPp_args typedOther = (lg_userinfo_transUidSeqgbNoByPp_args)other;

      lastComparison = Boolean.valueOf(isSetPassports()).compareTo(typedOther.isSetPassports());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassports()) {
        lastComparison = TBaseHelper.compareTo(this.passports, typedOther.passports);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PASSPORTS
            if (field.type == TType.STRING) {
              this.passports = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.passports != null) {
        oprot.writeFieldBegin(PASSPORTS_FIELD_DESC);
        oprot.writeString(this.passports);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transUidSeqgbNoByPp_args(");
      boolean first = true;

      sb.append("passports:");
      if (this.passports == null) {
        sb.append("null");
      } else {
        sb.append(this.passports);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_transUidSeqgbNoByPp_result implements TBase<lg_userinfo_transUidSeqgbNoByPp_result, lg_userinfo_transUidSeqgbNoByPp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_transUidSeqgbNoByPp_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public gbuidUdbseqImidRet success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, gbuidUdbseqImidRet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_transUidSeqgbNoByPp_result.class, metaDataMap);
    }

    public lg_userinfo_transUidSeqgbNoByPp_result() {
    }

    public lg_userinfo_transUidSeqgbNoByPp_result(
      gbuidUdbseqImidRet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_transUidSeqgbNoByPp_result(lg_userinfo_transUidSeqgbNoByPp_result other) {
      if (other.isSetSuccess()) {
        this.success = new gbuidUdbseqImidRet(other.success);
      }
    }

    public lg_userinfo_transUidSeqgbNoByPp_result deepCopy() {
      return new lg_userinfo_transUidSeqgbNoByPp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public gbuidUdbseqImidRet getSuccess() {
      return this.success;
    }

    public lg_userinfo_transUidSeqgbNoByPp_result setSuccess(gbuidUdbseqImidRet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((gbuidUdbseqImidRet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_transUidSeqgbNoByPp_result)
        return this.equals((lg_userinfo_transUidSeqgbNoByPp_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_transUidSeqgbNoByPp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_transUidSeqgbNoByPp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_transUidSeqgbNoByPp_result typedOther = (lg_userinfo_transUidSeqgbNoByPp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new gbuidUdbseqImidRet();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_transUidSeqgbNoByPp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_batchTransPpsActsByUids_args implements TBase<lg_userinfo_batchTransPpsActsByUids_args, lg_userinfo_batchTransPpsActsByUids_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_batchTransPpsActsByUids_args");

    private static final TField UIDS_FIELD_DESC = new TField("uids", TType.LIST, (short)1);

    public List<String> uids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UIDS((short)1, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UIDS, new FieldMetaData("uids", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_batchTransPpsActsByUids_args.class, metaDataMap);
    }

    public lg_userinfo_batchTransPpsActsByUids_args() {
    }

    public lg_userinfo_batchTransPpsActsByUids_args(
      List<String> uids)
    {
      this();
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_batchTransPpsActsByUids_args(lg_userinfo_batchTransPpsActsByUids_args other) {
      if (other.isSetUids()) {
        List<String> __this__uids = new ArrayList<String>();
        for (String other_element : other.uids) {
          __this__uids.add(other_element);
        }
        this.uids = __this__uids;
      }
    }

    public lg_userinfo_batchTransPpsActsByUids_args deepCopy() {
      return new lg_userinfo_batchTransPpsActsByUids_args(this);
    }

    @Override
    public void clear() {
      this.uids = null;
    }

    public int getUidsSize() {
      return (this.uids == null) ? 0 : this.uids.size();
    }

    public java.util.Iterator<String> getUidsIterator() {
      return (this.uids == null) ? null : this.uids.iterator();
    }

    public void addToUids(String elem) {
      if (this.uids == null) {
        this.uids = new ArrayList<String>();
      }
      this.uids.add(elem);
    }

    public List<String> getUids() {
      return this.uids;
    }

    public lg_userinfo_batchTransPpsActsByUids_args setUids(List<String> uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been asigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_batchTransPpsActsByUids_args)
        return this.equals((lg_userinfo_batchTransPpsActsByUids_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_batchTransPpsActsByUids_args that) {
      if (that == null)
        return false;

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_batchTransPpsActsByUids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_batchTransPpsActsByUids_args typedOther = (lg_userinfo_batchTransPpsActsByUids_args)other;

      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UIDS
            if (field.type == TType.LIST) {
              {
                TList _list13 = iprot.readListBegin();
                this.uids = new ArrayList<String>(_list13.size);
                for (int _i14 = 0; _i14 < _list13.size; ++_i14)
                {
                  String _elem15;
                  _elem15 = iprot.readString();
                  this.uids.add(_elem15);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uids != null) {
        oprot.writeFieldBegin(UIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.uids.size()));
          for (String _iter16 : this.uids)
          {
            oprot.writeString(_iter16);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_batchTransPpsActsByUids_args(");
      boolean first = true;

      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_batchTransPpsActsByUids_result implements TBase<lg_userinfo_batchTransPpsActsByUids_result, lg_userinfo_batchTransPpsActsByUids_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_batchTransPpsActsByUids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public PassportEmailRet success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, PassportEmailRet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_batchTransPpsActsByUids_result.class, metaDataMap);
    }

    public lg_userinfo_batchTransPpsActsByUids_result() {
    }

    public lg_userinfo_batchTransPpsActsByUids_result(
      PassportEmailRet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_batchTransPpsActsByUids_result(lg_userinfo_batchTransPpsActsByUids_result other) {
      if (other.isSetSuccess()) {
        this.success = new PassportEmailRet(other.success);
      }
    }

    public lg_userinfo_batchTransPpsActsByUids_result deepCopy() {
      return new lg_userinfo_batchTransPpsActsByUids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PassportEmailRet getSuccess() {
      return this.success;
    }

    public lg_userinfo_batchTransPpsActsByUids_result setSuccess(PassportEmailRet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PassportEmailRet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_batchTransPpsActsByUids_result)
        return this.equals((lg_userinfo_batchTransPpsActsByUids_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_batchTransPpsActsByUids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_batchTransPpsActsByUids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_batchTransPpsActsByUids_result typedOther = (lg_userinfo_batchTransPpsActsByUids_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PassportEmailRet();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_batchTransPpsActsByUids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_batchTransPpsActsByUidsEx_args implements TBase<lg_userinfo_batchTransPpsActsByUidsEx_args, lg_userinfo_batchTransPpsActsByUidsEx_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_batchTransPpsActsByUidsEx_args");

    private static final TField UIDS_FIELD_DESC = new TField("uids", TType.LIST, (short)1);

    public List<String> uids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UIDS((short)1, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UIDS, new FieldMetaData("uids", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_batchTransPpsActsByUidsEx_args.class, metaDataMap);
    }

    public lg_userinfo_batchTransPpsActsByUidsEx_args() {
    }

    public lg_userinfo_batchTransPpsActsByUidsEx_args(
      List<String> uids)
    {
      this();
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_batchTransPpsActsByUidsEx_args(lg_userinfo_batchTransPpsActsByUidsEx_args other) {
      if (other.isSetUids()) {
        List<String> __this__uids = new ArrayList<String>();
        for (String other_element : other.uids) {
          __this__uids.add(other_element);
        }
        this.uids = __this__uids;
      }
    }

    public lg_userinfo_batchTransPpsActsByUidsEx_args deepCopy() {
      return new lg_userinfo_batchTransPpsActsByUidsEx_args(this);
    }

    @Override
    public void clear() {
      this.uids = null;
    }

    public int getUidsSize() {
      return (this.uids == null) ? 0 : this.uids.size();
    }

    public java.util.Iterator<String> getUidsIterator() {
      return (this.uids == null) ? null : this.uids.iterator();
    }

    public void addToUids(String elem) {
      if (this.uids == null) {
        this.uids = new ArrayList<String>();
      }
      this.uids.add(elem);
    }

    public List<String> getUids() {
      return this.uids;
    }

    public lg_userinfo_batchTransPpsActsByUidsEx_args setUids(List<String> uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been asigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_batchTransPpsActsByUidsEx_args)
        return this.equals((lg_userinfo_batchTransPpsActsByUidsEx_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_batchTransPpsActsByUidsEx_args that) {
      if (that == null)
        return false;

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_batchTransPpsActsByUidsEx_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_batchTransPpsActsByUidsEx_args typedOther = (lg_userinfo_batchTransPpsActsByUidsEx_args)other;

      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UIDS
            if (field.type == TType.LIST) {
              {
                TList _list17 = iprot.readListBegin();
                this.uids = new ArrayList<String>(_list17.size);
                for (int _i18 = 0; _i18 < _list17.size; ++_i18)
                {
                  String _elem19;
                  _elem19 = iprot.readString();
                  this.uids.add(_elem19);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uids != null) {
        oprot.writeFieldBegin(UIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.uids.size()));
          for (String _iter20 : this.uids)
          {
            oprot.writeString(_iter20);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_batchTransPpsActsByUidsEx_args(");
      boolean first = true;

      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_batchTransPpsActsByUidsEx_result implements TBase<lg_userinfo_batchTransPpsActsByUidsEx_result, lg_userinfo_batchTransPpsActsByUidsEx_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_batchTransPpsActsByUidsEx_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public PassportEmailRet success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, PassportEmailRet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_batchTransPpsActsByUidsEx_result.class, metaDataMap);
    }

    public lg_userinfo_batchTransPpsActsByUidsEx_result() {
    }

    public lg_userinfo_batchTransPpsActsByUidsEx_result(
      PassportEmailRet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_batchTransPpsActsByUidsEx_result(lg_userinfo_batchTransPpsActsByUidsEx_result other) {
      if (other.isSetSuccess()) {
        this.success = new PassportEmailRet(other.success);
      }
    }

    public lg_userinfo_batchTransPpsActsByUidsEx_result deepCopy() {
      return new lg_userinfo_batchTransPpsActsByUidsEx_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PassportEmailRet getSuccess() {
      return this.success;
    }

    public lg_userinfo_batchTransPpsActsByUidsEx_result setSuccess(PassportEmailRet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PassportEmailRet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_batchTransPpsActsByUidsEx_result)
        return this.equals((lg_userinfo_batchTransPpsActsByUidsEx_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_batchTransPpsActsByUidsEx_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_batchTransPpsActsByUidsEx_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_batchTransPpsActsByUidsEx_result typedOther = (lg_userinfo_batchTransPpsActsByUidsEx_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PassportEmailRet();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_batchTransPpsActsByUidsEx_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_batchTransgbNos_args implements TBase<lg_userinfo_batchTransgbNos_args, lg_userinfo_batchTransgbNos_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_batchTransgbNos_args");

    private static final TField gbIDS_FIELD_DESC = new TField("gbids", TType.LIST, (short)1);

    public List<String> gbids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      gbIDS((short)1, "gbids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // gbIDS
            return gbIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.gbIDS, new FieldMetaData("gbids", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_batchTransgbNos_args.class, metaDataMap);
    }

    public lg_userinfo_batchTransgbNos_args() {
    }

    public lg_userinfo_batchTransgbNos_args(
      List<String> gbids)
    {
      this();
      this.gbids = gbids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_batchTransgbNos_args(lg_userinfo_batchTransgbNos_args other) {
      if (other.isSetgbids()) {
        List<String> __this__gbids = new ArrayList<String>();
        for (String other_element : other.gbids) {
          __this__gbids.add(other_element);
        }
        this.gbids = __this__gbids;
      }
    }

    public lg_userinfo_batchTransgbNos_args deepCopy() {
      return new lg_userinfo_batchTransgbNos_args(this);
    }

    @Override
    public void clear() {
      this.gbids = null;
    }

    public int getgbidsSize() {
      return (this.gbids == null) ? 0 : this.gbids.size();
    }

    public java.util.Iterator<String> getgbidsIterator() {
      return (this.gbids == null) ? null : this.gbids.iterator();
    }

    public void addTogbids(String elem) {
      if (this.gbids == null) {
        this.gbids = new ArrayList<String>();
      }
      this.gbids.add(elem);
    }

    public List<String> getgbids() {
      return this.gbids;
    }

    public lg_userinfo_batchTransgbNos_args setgbids(List<String> gbids) {
      this.gbids = gbids;
      return this;
    }

    public void unsetgbids() {
      this.gbids = null;
    }

    /** Returns true if field gbids is set (has been asigned a value) and false otherwise */
    public boolean isSetgbids() {
      return this.gbids != null;
    }

    public void setgbidsIsSet(boolean value) {
      if (!value) {
        this.gbids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case gbIDS:
        if (value == null) {
          unsetgbids();
        } else {
          setgbids((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case gbIDS:
        return getgbids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case gbIDS:
        return isSetgbids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_batchTransgbNos_args)
        return this.equals((lg_userinfo_batchTransgbNos_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_batchTransgbNos_args that) {
      if (that == null)
        return false;

      boolean this_present_gbids = true && this.isSetgbids();
      boolean that_present_gbids = true && that.isSetgbids();
      if (this_present_gbids || that_present_gbids) {
        if (!(this_present_gbids && that_present_gbids))
          return false;
        if (!this.gbids.equals(that.gbids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_batchTransgbNos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_batchTransgbNos_args typedOther = (lg_userinfo_batchTransgbNos_args)other;

      lastComparison = Boolean.valueOf(isSetgbids()).compareTo(typedOther.isSetgbids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetgbids()) {
        lastComparison = TBaseHelper.compareTo(this.gbids, typedOther.gbids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // gbIDS
            if (field.type == TType.LIST) {
              {
                TList _list21 = iprot.readListBegin();
                this.gbids = new ArrayList<String>(_list21.size);
                for (int _i22 = 0; _i22 < _list21.size; ++_i22)
                {
                  String _elem23;
                  _elem23 = iprot.readString();
                  this.gbids.add(_elem23);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.gbids != null) {
        oprot.writeFieldBegin(gbIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.gbids.size()));
          for (String _iter24 : this.gbids)
          {
            oprot.writeString(_iter24);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_batchTransgbNos_args(");
      boolean first = true;

      sb.append("gbids:");
      if (this.gbids == null) {
        sb.append("null");
      } else {
        sb.append(this.gbids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_batchTransgbNos_result implements TBase<lg_userinfo_batchTransgbNos_result, lg_userinfo_batchTransgbNos_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_batchTransgbNos_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);

    public Map<String,String> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_batchTransgbNos_result.class, metaDataMap);
    }

    public lg_userinfo_batchTransgbNos_result() {
    }

    public lg_userinfo_batchTransgbNos_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_batchTransgbNos_result(lg_userinfo_batchTransgbNos_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public lg_userinfo_batchTransgbNos_result deepCopy() {
      return new lg_userinfo_batchTransgbNos_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public lg_userinfo_batchTransgbNos_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_batchTransgbNos_result)
        return this.equals((lg_userinfo_batchTransgbNos_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_batchTransgbNos_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_batchTransgbNos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_batchTransgbNos_result typedOther = (lg_userinfo_batchTransgbNos_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map25 = iprot.readMapBegin();
                this.success = new HashMap<String,String>(2*_map25.size);
                for (int _i26 = 0; _i26 < _map25.size; ++_i26)
                {
                  String _key27;
                  String _val28;
                  _key27 = iprot.readString();
                  _val28 = iprot.readString();
                  this.success.put(_key27, _val28);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
          for (Map.Entry<String, String> _iter29 : this.success.entrySet())
          {
            oprot.writeString(_iter29.getKey());
            oprot.writeString(_iter29.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_batchTransgbNos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_batchTransUids_args implements TBase<lg_userinfo_batchTransUids_args, lg_userinfo_batchTransUids_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_batchTransUids_args");

    private static final TField UIDS_FIELD_DESC = new TField("uids", TType.LIST, (short)1);

    public List<String> uids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UIDS((short)1, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UIDS, new FieldMetaData("uids", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_batchTransUids_args.class, metaDataMap);
    }

    public lg_userinfo_batchTransUids_args() {
    }

    public lg_userinfo_batchTransUids_args(
      List<String> uids)
    {
      this();
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_batchTransUids_args(lg_userinfo_batchTransUids_args other) {
      if (other.isSetUids()) {
        List<String> __this__uids = new ArrayList<String>();
        for (String other_element : other.uids) {
          __this__uids.add(other_element);
        }
        this.uids = __this__uids;
      }
    }

    public lg_userinfo_batchTransUids_args deepCopy() {
      return new lg_userinfo_batchTransUids_args(this);
    }

    @Override
    public void clear() {
      this.uids = null;
    }

    public int getUidsSize() {
      return (this.uids == null) ? 0 : this.uids.size();
    }

    public java.util.Iterator<String> getUidsIterator() {
      return (this.uids == null) ? null : this.uids.iterator();
    }

    public void addToUids(String elem) {
      if (this.uids == null) {
        this.uids = new ArrayList<String>();
      }
      this.uids.add(elem);
    }

    public List<String> getUids() {
      return this.uids;
    }

    public lg_userinfo_batchTransUids_args setUids(List<String> uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been asigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_batchTransUids_args)
        return this.equals((lg_userinfo_batchTransUids_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_batchTransUids_args that) {
      if (that == null)
        return false;

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_batchTransUids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_batchTransUids_args typedOther = (lg_userinfo_batchTransUids_args)other;

      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UIDS
            if (field.type == TType.LIST) {
              {
                TList _list30 = iprot.readListBegin();
                this.uids = new ArrayList<String>(_list30.size);
                for (int _i31 = 0; _i31 < _list30.size; ++_i31)
                {
                  String _elem32;
                  _elem32 = iprot.readString();
                  this.uids.add(_elem32);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uids != null) {
        oprot.writeFieldBegin(UIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.uids.size()));
          for (String _iter33 : this.uids)
          {
            oprot.writeString(_iter33);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_batchTransUids_args(");
      boolean first = true;

      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_batchTransUids_result implements TBase<lg_userinfo_batchTransUids_result, lg_userinfo_batchTransUids_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_batchTransUids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);

    public Map<String,String> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_batchTransUids_result.class, metaDataMap);
    }

    public lg_userinfo_batchTransUids_result() {
    }

    public lg_userinfo_batchTransUids_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_batchTransUids_result(lg_userinfo_batchTransUids_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public lg_userinfo_batchTransUids_result deepCopy() {
      return new lg_userinfo_batchTransUids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public lg_userinfo_batchTransUids_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_batchTransUids_result)
        return this.equals((lg_userinfo_batchTransUids_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_batchTransUids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_batchTransUids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_batchTransUids_result typedOther = (lg_userinfo_batchTransUids_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map34 = iprot.readMapBegin();
                this.success = new HashMap<String,String>(2*_map34.size);
                for (int _i35 = 0; _i35 < _map34.size; ++_i35)
                {
                  String _key36;
                  String _val37;
                  _key36 = iprot.readString();
                  _val37 = iprot.readString();
                  this.success.put(_key36, _val37);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
          for (Map.Entry<String, String> _iter38 : this.success.entrySet())
          {
            oprot.writeString(_iter38.getKey());
            oprot.writeString(_iter38.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_batchTransUids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMibaoQuestionByUid_args implements TBase<lg_userinfo_getMibaoQuestionByUid_args, lg_userinfo_getMibaoQuestionByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMibaoQuestionByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMibaoQuestionByUid_args.class, metaDataMap);
    }

    public lg_userinfo_getMibaoQuestionByUid_args() {
    }

    public lg_userinfo_getMibaoQuestionByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMibaoQuestionByUid_args(lg_userinfo_getMibaoQuestionByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_getMibaoQuestionByUid_args deepCopy() {
      return new lg_userinfo_getMibaoQuestionByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_getMibaoQuestionByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMibaoQuestionByUid_args)
        return this.equals((lg_userinfo_getMibaoQuestionByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMibaoQuestionByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMibaoQuestionByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMibaoQuestionByUid_args typedOther = (lg_userinfo_getMibaoQuestionByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMibaoQuestionByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getMibaoQuestionByUid_result implements TBase<lg_userinfo_getMibaoQuestionByUid_result, lg_userinfo_getMibaoQuestionByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getMibaoQuestionByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public MibaoQuesRes success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, MibaoQuesRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getMibaoQuestionByUid_result.class, metaDataMap);
    }

    public lg_userinfo_getMibaoQuestionByUid_result() {
    }

    public lg_userinfo_getMibaoQuestionByUid_result(
      MibaoQuesRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getMibaoQuestionByUid_result(lg_userinfo_getMibaoQuestionByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new MibaoQuesRes(other.success);
      }
    }

    public lg_userinfo_getMibaoQuestionByUid_result deepCopy() {
      return new lg_userinfo_getMibaoQuestionByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MibaoQuesRes getSuccess() {
      return this.success;
    }

    public lg_userinfo_getMibaoQuestionByUid_result setSuccess(MibaoQuesRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MibaoQuesRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getMibaoQuestionByUid_result)
        return this.equals((lg_userinfo_getMibaoQuestionByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getMibaoQuestionByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getMibaoQuestionByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getMibaoQuestionByUid_result typedOther = (lg_userinfo_getMibaoQuestionByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new MibaoQuesRes();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getMibaoQuestionByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkMibaoQAByPpAct_args implements TBase<lg_userinfo_checkMibaoQAByPpAct_args, lg_userinfo_checkMibaoQAByPpAct_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkMibaoQAByPpAct_args");

    private static final TField MIBAO_REQ_FIELD_DESC = new TField("mibaoReq", TType.STRUCT, (short)1);

    public MibaoQAReq mibaoReq;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      MIBAO_REQ((short)1, "mibaoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MIBAO_REQ
            return MIBAO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MIBAO_REQ, new FieldMetaData("mibaoReq", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, MibaoQAReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkMibaoQAByPpAct_args.class, metaDataMap);
    }

    public lg_userinfo_checkMibaoQAByPpAct_args() {
    }

    public lg_userinfo_checkMibaoQAByPpAct_args(
      MibaoQAReq mibaoReq)
    {
      this();
      this.mibaoReq = mibaoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkMibaoQAByPpAct_args(lg_userinfo_checkMibaoQAByPpAct_args other) {
      if (other.isSetMibaoReq()) {
        this.mibaoReq = new MibaoQAReq(other.mibaoReq);
      }
    }

    public lg_userinfo_checkMibaoQAByPpAct_args deepCopy() {
      return new lg_userinfo_checkMibaoQAByPpAct_args(this);
    }

    @Override
    public void clear() {
      this.mibaoReq = null;
    }

    public MibaoQAReq getMibaoReq() {
      return this.mibaoReq;
    }

    public lg_userinfo_checkMibaoQAByPpAct_args setMibaoReq(MibaoQAReq mibaoReq) {
      this.mibaoReq = mibaoReq;
      return this;
    }

    public void unsetMibaoReq() {
      this.mibaoReq = null;
    }

    /** Returns true if field mibaoReq is set (has been asigned a value) and false otherwise */
    public boolean isSetMibaoReq() {
      return this.mibaoReq != null;
    }

    public void setMibaoReqIsSet(boolean value) {
      if (!value) {
        this.mibaoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MIBAO_REQ:
        if (value == null) {
          unsetMibaoReq();
        } else {
          setMibaoReq((MibaoQAReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MIBAO_REQ:
        return getMibaoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MIBAO_REQ:
        return isSetMibaoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkMibaoQAByPpAct_args)
        return this.equals((lg_userinfo_checkMibaoQAByPpAct_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkMibaoQAByPpAct_args that) {
      if (that == null)
        return false;

      boolean this_present_mibaoReq = true && this.isSetMibaoReq();
      boolean that_present_mibaoReq = true && that.isSetMibaoReq();
      if (this_present_mibaoReq || that_present_mibaoReq) {
        if (!(this_present_mibaoReq && that_present_mibaoReq))
          return false;
        if (!this.mibaoReq.equals(that.mibaoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkMibaoQAByPpAct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkMibaoQAByPpAct_args typedOther = (lg_userinfo_checkMibaoQAByPpAct_args)other;

      lastComparison = Boolean.valueOf(isSetMibaoReq()).compareTo(typedOther.isSetMibaoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMibaoReq()) {
        lastComparison = TBaseHelper.compareTo(this.mibaoReq, typedOther.mibaoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MIBAO_REQ
            if (field.type == TType.STRUCT) {
              this.mibaoReq = new MibaoQAReq();
              this.mibaoReq.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mibaoReq != null) {
        oprot.writeFieldBegin(MIBAO_REQ_FIELD_DESC);
        this.mibaoReq.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkMibaoQAByPpAct_args(");
      boolean first = true;

      sb.append("mibaoReq:");
      if (this.mibaoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.mibaoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkMibaoQAByPpAct_result implements TBase<lg_userinfo_checkMibaoQAByPpAct_result, lg_userinfo_checkMibaoQAByPpAct_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkMibaoQAByPpAct_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public MibaoQARes success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, MibaoQARes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkMibaoQAByPpAct_result.class, metaDataMap);
    }

    public lg_userinfo_checkMibaoQAByPpAct_result() {
    }

    public lg_userinfo_checkMibaoQAByPpAct_result(
      MibaoQARes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkMibaoQAByPpAct_result(lg_userinfo_checkMibaoQAByPpAct_result other) {
      if (other.isSetSuccess()) {
        this.success = new MibaoQARes(other.success);
      }
    }

    public lg_userinfo_checkMibaoQAByPpAct_result deepCopy() {
      return new lg_userinfo_checkMibaoQAByPpAct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MibaoQARes getSuccess() {
      return this.success;
    }

    public lg_userinfo_checkMibaoQAByPpAct_result setSuccess(MibaoQARes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MibaoQARes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkMibaoQAByPpAct_result)
        return this.equals((lg_userinfo_checkMibaoQAByPpAct_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkMibaoQAByPpAct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkMibaoQAByPpAct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkMibaoQAByPpAct_result typedOther = (lg_userinfo_checkMibaoQAByPpAct_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new MibaoQARes();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkMibaoQAByPpAct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkMibaoQAByUid_args implements TBase<lg_userinfo_checkMibaoQAByUid_args, lg_userinfo_checkMibaoQAByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkMibaoQAByUid_args");

    private static final TField MIBAO_REQ_FIELD_DESC = new TField("mibaoReq", TType.STRUCT, (short)1);

    public MibaoQAReq mibaoReq;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      MIBAO_REQ((short)1, "mibaoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MIBAO_REQ
            return MIBAO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MIBAO_REQ, new FieldMetaData("mibaoReq", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, MibaoQAReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkMibaoQAByUid_args.class, metaDataMap);
    }

    public lg_userinfo_checkMibaoQAByUid_args() {
    }

    public lg_userinfo_checkMibaoQAByUid_args(
      MibaoQAReq mibaoReq)
    {
      this();
      this.mibaoReq = mibaoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkMibaoQAByUid_args(lg_userinfo_checkMibaoQAByUid_args other) {
      if (other.isSetMibaoReq()) {
        this.mibaoReq = new MibaoQAReq(other.mibaoReq);
      }
    }

    public lg_userinfo_checkMibaoQAByUid_args deepCopy() {
      return new lg_userinfo_checkMibaoQAByUid_args(this);
    }

    @Override
    public void clear() {
      this.mibaoReq = null;
    }

    public MibaoQAReq getMibaoReq() {
      return this.mibaoReq;
    }

    public lg_userinfo_checkMibaoQAByUid_args setMibaoReq(MibaoQAReq mibaoReq) {
      this.mibaoReq = mibaoReq;
      return this;
    }

    public void unsetMibaoReq() {
      this.mibaoReq = null;
    }

    /** Returns true if field mibaoReq is set (has been asigned a value) and false otherwise */
    public boolean isSetMibaoReq() {
      return this.mibaoReq != null;
    }

    public void setMibaoReqIsSet(boolean value) {
      if (!value) {
        this.mibaoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MIBAO_REQ:
        if (value == null) {
          unsetMibaoReq();
        } else {
          setMibaoReq((MibaoQAReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MIBAO_REQ:
        return getMibaoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MIBAO_REQ:
        return isSetMibaoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkMibaoQAByUid_args)
        return this.equals((lg_userinfo_checkMibaoQAByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkMibaoQAByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_mibaoReq = true && this.isSetMibaoReq();
      boolean that_present_mibaoReq = true && that.isSetMibaoReq();
      if (this_present_mibaoReq || that_present_mibaoReq) {
        if (!(this_present_mibaoReq && that_present_mibaoReq))
          return false;
        if (!this.mibaoReq.equals(that.mibaoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkMibaoQAByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkMibaoQAByUid_args typedOther = (lg_userinfo_checkMibaoQAByUid_args)other;

      lastComparison = Boolean.valueOf(isSetMibaoReq()).compareTo(typedOther.isSetMibaoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMibaoReq()) {
        lastComparison = TBaseHelper.compareTo(this.mibaoReq, typedOther.mibaoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MIBAO_REQ
            if (field.type == TType.STRUCT) {
              this.mibaoReq = new MibaoQAReq();
              this.mibaoReq.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mibaoReq != null) {
        oprot.writeFieldBegin(MIBAO_REQ_FIELD_DESC);
        this.mibaoReq.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkMibaoQAByUid_args(");
      boolean first = true;

      sb.append("mibaoReq:");
      if (this.mibaoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.mibaoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_checkMibaoQAByUid_result implements TBase<lg_userinfo_checkMibaoQAByUid_result, lg_userinfo_checkMibaoQAByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_checkMibaoQAByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public MibaoQARes success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, MibaoQARes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_checkMibaoQAByUid_result.class, metaDataMap);
    }

    public lg_userinfo_checkMibaoQAByUid_result() {
    }

    public lg_userinfo_checkMibaoQAByUid_result(
      MibaoQARes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_checkMibaoQAByUid_result(lg_userinfo_checkMibaoQAByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new MibaoQARes(other.success);
      }
    }

    public lg_userinfo_checkMibaoQAByUid_result deepCopy() {
      return new lg_userinfo_checkMibaoQAByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MibaoQARes getSuccess() {
      return this.success;
    }

    public lg_userinfo_checkMibaoQAByUid_result setSuccess(MibaoQARes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MibaoQARes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_checkMibaoQAByUid_result)
        return this.equals((lg_userinfo_checkMibaoQAByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_checkMibaoQAByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_checkMibaoQAByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_checkMibaoQAByUid_result typedOther = (lg_userinfo_checkMibaoQAByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new MibaoQARes();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_checkMibaoQAByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getIDRegipMobileByUid_args implements TBase<lg_userinfo_getIDRegipMobileByUid_args, lg_userinfo_getIDRegipMobileByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getIDRegipMobileByUid_args");

    private static final TField UID_FIELD_DESC = new TField("uid", TType.STRING, (short)1);

    public String uid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getIDRegipMobileByUid_args.class, metaDataMap);
    }

    public lg_userinfo_getIDRegipMobileByUid_args() {
    }

    public lg_userinfo_getIDRegipMobileByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getIDRegipMobileByUid_args(lg_userinfo_getIDRegipMobileByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public lg_userinfo_getIDRegipMobileByUid_args deepCopy() {
      return new lg_userinfo_getIDRegipMobileByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public lg_userinfo_getIDRegipMobileByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been asigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getIDRegipMobileByUid_args)
        return this.equals((lg_userinfo_getIDRegipMobileByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getIDRegipMobileByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getIDRegipMobileByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getIDRegipMobileByUid_args typedOther = (lg_userinfo_getIDRegipMobileByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UID
            if (field.type == TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getIDRegipMobileByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getIDRegipMobileByUid_result implements TBase<lg_userinfo_getIDRegipMobileByUid_result, lg_userinfo_getIDRegipMobileByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getIDRegipMobileByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public IDRegipMobileRes success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, IDRegipMobileRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getIDRegipMobileByUid_result.class, metaDataMap);
    }

    public lg_userinfo_getIDRegipMobileByUid_result() {
    }

    public lg_userinfo_getIDRegipMobileByUid_result(
      IDRegipMobileRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getIDRegipMobileByUid_result(lg_userinfo_getIDRegipMobileByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new IDRegipMobileRes(other.success);
      }
    }

    public lg_userinfo_getIDRegipMobileByUid_result deepCopy() {
      return new lg_userinfo_getIDRegipMobileByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public IDRegipMobileRes getSuccess() {
      return this.success;
    }

    public lg_userinfo_getIDRegipMobileByUid_result setSuccess(IDRegipMobileRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IDRegipMobileRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getIDRegipMobileByUid_result)
        return this.equals((lg_userinfo_getIDRegipMobileByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getIDRegipMobileByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getIDRegipMobileByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getIDRegipMobileByUid_result typedOther = (lg_userinfo_getIDRegipMobileByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new IDRegipMobileRes();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getIDRegipMobileByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getImidInfoByImidList_args implements TBase<lg_userinfo_getImidInfoByImidList_args, lg_userinfo_getImidInfoByImidList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getImidInfoByImidList_args");

    private static final TField IMIDS_FIELD_DESC = new TField("imids", TType.LIST, (short)1);

    public List<Integer> imids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      IMIDS((short)1, "imids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMIDS
            return IMIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMIDS, new FieldMetaData("imids", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getImidInfoByImidList_args.class, metaDataMap);
    }

    public lg_userinfo_getImidInfoByImidList_args() {
    }

    public lg_userinfo_getImidInfoByImidList_args(
      List<Integer> imids)
    {
      this();
      this.imids = imids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getImidInfoByImidList_args(lg_userinfo_getImidInfoByImidList_args other) {
      if (other.isSetImids()) {
        List<Integer> __this__imids = new ArrayList<Integer>();
        for (Integer other_element : other.imids) {
          __this__imids.add(other_element);
        }
        this.imids = __this__imids;
      }
    }

    public lg_userinfo_getImidInfoByImidList_args deepCopy() {
      return new lg_userinfo_getImidInfoByImidList_args(this);
    }

    @Override
    public void clear() {
      this.imids = null;
    }

    public int getImidsSize() {
      return (this.imids == null) ? 0 : this.imids.size();
    }

    public java.util.Iterator<Integer> getImidsIterator() {
      return (this.imids == null) ? null : this.imids.iterator();
    }

    public void addToImids(int elem) {
      if (this.imids == null) {
        this.imids = new ArrayList<Integer>();
      }
      this.imids.add(elem);
    }

    public List<Integer> getImids() {
      return this.imids;
    }

    public lg_userinfo_getImidInfoByImidList_args setImids(List<Integer> imids) {
      this.imids = imids;
      return this;
    }

    public void unsetImids() {
      this.imids = null;
    }

    /** Returns true if field imids is set (has been asigned a value) and false otherwise */
    public boolean isSetImids() {
      return this.imids != null;
    }

    public void setImidsIsSet(boolean value) {
      if (!value) {
        this.imids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMIDS:
        if (value == null) {
          unsetImids();
        } else {
          setImids((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMIDS:
        return getImids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMIDS:
        return isSetImids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getImidInfoByImidList_args)
        return this.equals((lg_userinfo_getImidInfoByImidList_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getImidInfoByImidList_args that) {
      if (that == null)
        return false;

      boolean this_present_imids = true && this.isSetImids();
      boolean that_present_imids = true && that.isSetImids();
      if (this_present_imids || that_present_imids) {
        if (!(this_present_imids && that_present_imids))
          return false;
        if (!this.imids.equals(that.imids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getImidInfoByImidList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getImidInfoByImidList_args typedOther = (lg_userinfo_getImidInfoByImidList_args)other;

      lastComparison = Boolean.valueOf(isSetImids()).compareTo(typedOther.isSetImids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImids()) {
        lastComparison = TBaseHelper.compareTo(this.imids, typedOther.imids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IMIDS
            if (field.type == TType.LIST) {
              {
                TList _list39 = iprot.readListBegin();
                this.imids = new ArrayList<Integer>(_list39.size);
                for (int _i40 = 0; _i40 < _list39.size; ++_i40)
                {
                  int _elem41;
                  _elem41 = iprot.readI32();
                  this.imids.add(_elem41);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.imids != null) {
        oprot.writeFieldBegin(IMIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.imids.size()));
          for (int _iter42 : this.imids)
          {
            oprot.writeI32(_iter42);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getImidInfoByImidList_args(");
      boolean first = true;

      sb.append("imids:");
      if (this.imids == null) {
        sb.append("null");
      } else {
        sb.append(this.imids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getImidInfoByImidList_result implements TBase<lg_userinfo_getImidInfoByImidList_result, lg_userinfo_getImidInfoByImidList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getImidInfoByImidList_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public ImidInfoRet success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ImidInfoRet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getImidInfoByImidList_result.class, metaDataMap);
    }

    public lg_userinfo_getImidInfoByImidList_result() {
    }

    public lg_userinfo_getImidInfoByImidList_result(
      ImidInfoRet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getImidInfoByImidList_result(lg_userinfo_getImidInfoByImidList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ImidInfoRet(other.success);
      }
    }

    public lg_userinfo_getImidInfoByImidList_result deepCopy() {
      return new lg_userinfo_getImidInfoByImidList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ImidInfoRet getSuccess() {
      return this.success;
    }

    public lg_userinfo_getImidInfoByImidList_result setSuccess(ImidInfoRet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ImidInfoRet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getImidInfoByImidList_result)
        return this.equals((lg_userinfo_getImidInfoByImidList_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getImidInfoByImidList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getImidInfoByImidList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getImidInfoByImidList_result typedOther = (lg_userinfo_getImidInfoByImidList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ImidInfoRet();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getImidInfoByImidList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getImidInfoByUidList_args implements TBase<lg_userinfo_getImidInfoByUidList_args, lg_userinfo_getImidInfoByUidList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getImidInfoByUidList_args");

    private static final TField UIDS_FIELD_DESC = new TField("uids", TType.LIST, (short)1);

    public List<Integer> uids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      UIDS((short)1, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UIDS, new FieldMetaData("uids", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getImidInfoByUidList_args.class, metaDataMap);
    }

    public lg_userinfo_getImidInfoByUidList_args() {
    }

    public lg_userinfo_getImidInfoByUidList_args(
      List<Integer> uids)
    {
      this();
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getImidInfoByUidList_args(lg_userinfo_getImidInfoByUidList_args other) {
      if (other.isSetUids()) {
        List<Integer> __this__uids = new ArrayList<Integer>();
        for (Integer other_element : other.uids) {
          __this__uids.add(other_element);
        }
        this.uids = __this__uids;
      }
    }

    public lg_userinfo_getImidInfoByUidList_args deepCopy() {
      return new lg_userinfo_getImidInfoByUidList_args(this);
    }

    @Override
    public void clear() {
      this.uids = null;
    }

    public int getUidsSize() {
      return (this.uids == null) ? 0 : this.uids.size();
    }

    public java.util.Iterator<Integer> getUidsIterator() {
      return (this.uids == null) ? null : this.uids.iterator();
    }

    public void addToUids(int elem) {
      if (this.uids == null) {
        this.uids = new ArrayList<Integer>();
      }
      this.uids.add(elem);
    }

    public List<Integer> getUids() {
      return this.uids;
    }

    public lg_userinfo_getImidInfoByUidList_args setUids(List<Integer> uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been asigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getImidInfoByUidList_args)
        return this.equals((lg_userinfo_getImidInfoByUidList_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getImidInfoByUidList_args that) {
      if (that == null)
        return false;

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getImidInfoByUidList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getImidInfoByUidList_args typedOther = (lg_userinfo_getImidInfoByUidList_args)other;

      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UIDS
            if (field.type == TType.LIST) {
              {
                TList _list43 = iprot.readListBegin();
                this.uids = new ArrayList<Integer>(_list43.size);
                for (int _i44 = 0; _i44 < _list43.size; ++_i44)
                {
                  int _elem45;
                  _elem45 = iprot.readI32();
                  this.uids.add(_elem45);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uids != null) {
        oprot.writeFieldBegin(UIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.uids.size()));
          for (int _iter46 : this.uids)
          {
            oprot.writeI32(_iter46);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getImidInfoByUidList_args(");
      boolean first = true;

      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getImidInfoByUidList_result implements TBase<lg_userinfo_getImidInfoByUidList_result, lg_userinfo_getImidInfoByUidList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getImidInfoByUidList_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public ImidInfoRet success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ImidInfoRet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getImidInfoByUidList_result.class, metaDataMap);
    }

    public lg_userinfo_getImidInfoByUidList_result() {
    }

    public lg_userinfo_getImidInfoByUidList_result(
      ImidInfoRet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getImidInfoByUidList_result(lg_userinfo_getImidInfoByUidList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ImidInfoRet(other.success);
      }
    }

    public lg_userinfo_getImidInfoByUidList_result deepCopy() {
      return new lg_userinfo_getImidInfoByUidList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ImidInfoRet getSuccess() {
      return this.success;
    }

    public lg_userinfo_getImidInfoByUidList_result setSuccess(ImidInfoRet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ImidInfoRet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getImidInfoByUidList_result)
        return this.equals((lg_userinfo_getImidInfoByUidList_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getImidInfoByUidList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getImidInfoByUidList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getImidInfoByUidList_result typedOther = (lg_userinfo_getImidInfoByUidList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ImidInfoRet();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getImidInfoByUidList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getIDInfoByUid_args implements TBase<lg_userinfo_getIDInfoByUid_args, lg_userinfo_getIDInfoByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getIDInfoByUid_args");

    private static final TField ID_INFO_FIELD_DESC = new TField("idInfo", TType.STRUCT, (short)1);

    public IDInfoReq idInfo;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ID_INFO((short)1, "idInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_INFO
            return ID_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_INFO, new FieldMetaData("idInfo", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, IDInfoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getIDInfoByUid_args.class, metaDataMap);
    }

    public lg_userinfo_getIDInfoByUid_args() {
    }

    public lg_userinfo_getIDInfoByUid_args(
      IDInfoReq idInfo)
    {
      this();
      this.idInfo = idInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getIDInfoByUid_args(lg_userinfo_getIDInfoByUid_args other) {
      if (other.isSetIdInfo()) {
        this.idInfo = new IDInfoReq(other.idInfo);
      }
    }

    public lg_userinfo_getIDInfoByUid_args deepCopy() {
      return new lg_userinfo_getIDInfoByUid_args(this);
    }

    @Override
    public void clear() {
      this.idInfo = null;
    }

    public IDInfoReq getIdInfo() {
      return this.idInfo;
    }

    public lg_userinfo_getIDInfoByUid_args setIdInfo(IDInfoReq idInfo) {
      this.idInfo = idInfo;
      return this;
    }

    public void unsetIdInfo() {
      this.idInfo = null;
    }

    /** Returns true if field idInfo is set (has been asigned a value) and false otherwise */
    public boolean isSetIdInfo() {
      return this.idInfo != null;
    }

    public void setIdInfoIsSet(boolean value) {
      if (!value) {
        this.idInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_INFO:
        if (value == null) {
          unsetIdInfo();
        } else {
          setIdInfo((IDInfoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_INFO:
        return getIdInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_INFO:
        return isSetIdInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getIDInfoByUid_args)
        return this.equals((lg_userinfo_getIDInfoByUid_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getIDInfoByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_idInfo = true && this.isSetIdInfo();
      boolean that_present_idInfo = true && that.isSetIdInfo();
      if (this_present_idInfo || that_present_idInfo) {
        if (!(this_present_idInfo && that_present_idInfo))
          return false;
        if (!this.idInfo.equals(that.idInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getIDInfoByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getIDInfoByUid_args typedOther = (lg_userinfo_getIDInfoByUid_args)other;

      lastComparison = Boolean.valueOf(isSetIdInfo()).compareTo(typedOther.isSetIdInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdInfo()) {
        lastComparison = TBaseHelper.compareTo(this.idInfo, typedOther.idInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ID_INFO
            if (field.type == TType.STRUCT) {
              this.idInfo = new IDInfoReq();
              this.idInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.idInfo != null) {
        oprot.writeFieldBegin(ID_INFO_FIELD_DESC);
        this.idInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getIDInfoByUid_args(");
      boolean first = true;

      sb.append("idInfo:");
      if (this.idInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.idInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getIDInfoByUid_result implements TBase<lg_userinfo_getIDInfoByUid_result, lg_userinfo_getIDInfoByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getIDInfoByUid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public IDInfoRes success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, IDInfoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getIDInfoByUid_result.class, metaDataMap);
    }

    public lg_userinfo_getIDInfoByUid_result() {
    }

    public lg_userinfo_getIDInfoByUid_result(
      IDInfoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getIDInfoByUid_result(lg_userinfo_getIDInfoByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new IDInfoRes(other.success);
      }
    }

    public lg_userinfo_getIDInfoByUid_result deepCopy() {
      return new lg_userinfo_getIDInfoByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public IDInfoRes getSuccess() {
      return this.success;
    }

    public lg_userinfo_getIDInfoByUid_result setSuccess(IDInfoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IDInfoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getIDInfoByUid_result)
        return this.equals((lg_userinfo_getIDInfoByUid_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getIDInfoByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getIDInfoByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getIDInfoByUid_result typedOther = (lg_userinfo_getIDInfoByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new IDInfoRes();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getIDInfoByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getIDInfoByUidEx_args implements TBase<lg_userinfo_getIDInfoByUidEx_args, lg_userinfo_getIDInfoByUidEx_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getIDInfoByUidEx_args");

    private static final TField ID_INFO_FIELD_DESC = new TField("idInfo", TType.STRUCT, (short)1);

    public IDInfoExReq idInfo;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ID_INFO((short)1, "idInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_INFO
            return ID_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_INFO, new FieldMetaData("idInfo", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, IDInfoExReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getIDInfoByUidEx_args.class, metaDataMap);
    }

    public lg_userinfo_getIDInfoByUidEx_args() {
    }

    public lg_userinfo_getIDInfoByUidEx_args(
      IDInfoExReq idInfo)
    {
      this();
      this.idInfo = idInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getIDInfoByUidEx_args(lg_userinfo_getIDInfoByUidEx_args other) {
      if (other.isSetIdInfo()) {
        this.idInfo = new IDInfoExReq(other.idInfo);
      }
    }

    public lg_userinfo_getIDInfoByUidEx_args deepCopy() {
      return new lg_userinfo_getIDInfoByUidEx_args(this);
    }

    @Override
    public void clear() {
      this.idInfo = null;
    }

    public IDInfoExReq getIdInfo() {
      return this.idInfo;
    }

    public lg_userinfo_getIDInfoByUidEx_args setIdInfo(IDInfoExReq idInfo) {
      this.idInfo = idInfo;
      return this;
    }

    public void unsetIdInfo() {
      this.idInfo = null;
    }

    /** Returns true if field idInfo is set (has been asigned a value) and false otherwise */
    public boolean isSetIdInfo() {
      return this.idInfo != null;
    }

    public void setIdInfoIsSet(boolean value) {
      if (!value) {
        this.idInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_INFO:
        if (value == null) {
          unsetIdInfo();
        } else {
          setIdInfo((IDInfoExReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_INFO:
        return getIdInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_INFO:
        return isSetIdInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getIDInfoByUidEx_args)
        return this.equals((lg_userinfo_getIDInfoByUidEx_args)that);
      return false;
    }

    public boolean equals(lg_userinfo_getIDInfoByUidEx_args that) {
      if (that == null)
        return false;

      boolean this_present_idInfo = true && this.isSetIdInfo();
      boolean that_present_idInfo = true && that.isSetIdInfo();
      if (this_present_idInfo || that_present_idInfo) {
        if (!(this_present_idInfo && that_present_idInfo))
          return false;
        if (!this.idInfo.equals(that.idInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getIDInfoByUidEx_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getIDInfoByUidEx_args typedOther = (lg_userinfo_getIDInfoByUidEx_args)other;

      lastComparison = Boolean.valueOf(isSetIdInfo()).compareTo(typedOther.isSetIdInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdInfo()) {
        lastComparison = TBaseHelper.compareTo(this.idInfo, typedOther.idInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ID_INFO
            if (field.type == TType.STRUCT) {
              this.idInfo = new IDInfoExReq();
              this.idInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.idInfo != null) {
        oprot.writeFieldBegin(ID_INFO_FIELD_DESC);
        this.idInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getIDInfoByUidEx_args(");
      boolean first = true;

      sb.append("idInfo:");
      if (this.idInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.idInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lg_userinfo_getIDInfoByUidEx_result implements TBase<lg_userinfo_getIDInfoByUidEx_result, lg_userinfo_getIDInfoByUidEx_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("lg_userinfo_getIDInfoByUidEx_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public IDInfoRes success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, IDInfoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(lg_userinfo_getIDInfoByUidEx_result.class, metaDataMap);
    }

    public lg_userinfo_getIDInfoByUidEx_result() {
    }

    public lg_userinfo_getIDInfoByUidEx_result(
      IDInfoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lg_userinfo_getIDInfoByUidEx_result(lg_userinfo_getIDInfoByUidEx_result other) {
      if (other.isSetSuccess()) {
        this.success = new IDInfoRes(other.success);
      }
    }

    public lg_userinfo_getIDInfoByUidEx_result deepCopy() {
      return new lg_userinfo_getIDInfoByUidEx_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public IDInfoRes getSuccess() {
      return this.success;
    }

    public lg_userinfo_getIDInfoByUidEx_result setSuccess(IDInfoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IDInfoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lg_userinfo_getIDInfoByUidEx_result)
        return this.equals((lg_userinfo_getIDInfoByUidEx_result)that);
      return false;
    }

    public boolean equals(lg_userinfo_getIDInfoByUidEx_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lg_userinfo_getIDInfoByUidEx_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lg_userinfo_getIDInfoByUidEx_result typedOther = (lg_userinfo_getIDInfoByUidEx_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new IDInfoRes();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lg_userinfo_getIDInfoByUidEx_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}

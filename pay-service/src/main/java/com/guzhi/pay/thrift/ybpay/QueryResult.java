/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * 查询结果
 * 2013/2/27新增
 */
public class QueryResult implements TBase<QueryResult, QueryResult._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("QueryResult");

    private static final TField CODE_FIELD_DESC = new TField("code", TType.I32, (short) 1);
    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short) 2);
    private static final TField TOTAL_PAGES_FIELD_DESC = new TField("totalPages", TType.I32, (short) 3);
    private static final TField PAGE_FIELD_DESC = new TField("page", TType.I32, (short) 4);
    private static final TField DATA_FIELD_DESC = new TField("data", TType.STRING, (short) 5);

    /**
     * 返回码
     */
    public int code;
    /**
     * 返回信息，最长255个UTF-8字符
     */
    public String message;
    /**
     * 总页数
     */
    public int totalPages;
    /**
     * 当前页
     */
    public int page;
    /**
     * 数据（JSON格式）
     */
    public String data;

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        /**
         * 返回码
         */
        CODE((short) 1, "code"),
        /**
         * 返回信息，最长255个UTF-8字符
         */
        MESSAGE((short) 2, "message"),
        /**
         * 总页数
         */
        TOTAL_PAGES((short) 3, "totalPages"),
        /**
         * 当前页
         */
        PAGE((short) 4, "page"),
        /**
         * 数据（JSON格式）
         */
        DATA((short) 5, "data");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // CODE
                return CODE;
            case 2: // MESSAGE
                return MESSAGE;
            case 3: // TOTAL_PAGES
                return TOTAL_PAGES;
            case 4: // PAGE
                return PAGE;
            case 5: // DATA
                return DATA;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __CODE_ISSET_ID = 0;
    private static final int __TOTALPAGES_ISSET_ID = 1;
    private static final int __PAGE_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.CODE, new FieldMetaData("code", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                TType.I32)));
        tmpMap.put(_Fields.MESSAGE, new FieldMetaData("message", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.TOTAL_PAGES, new FieldMetaData("totalPages", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.PAGE, new FieldMetaData("page", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                TType.I32)));
        tmpMap.put(_Fields.DATA, new FieldMetaData("data", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(QueryResult.class, metaDataMap);
    }

    public QueryResult() {
    }

    public QueryResult(int code, String message, int totalPages, int page, String data) {
        this();
        this.code = code;
        setCodeIsSet(true);
        this.message = message;
        this.totalPages = totalPages;
        setTotalPagesIsSet(true);
        this.page = page;
        setPageIsSet(true);
        this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryResult(QueryResult other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        this.code = other.code;
        if (other.isSetMessage()) {
            this.message = other.message;
        }
        this.totalPages = other.totalPages;
        this.page = other.page;
        if (other.isSetData()) {
            this.data = other.data;
        }
    }

    public QueryResult deepCopy() {
        return new QueryResult(this);
    }

    @Override
    public void clear() {
        setCodeIsSet(false);
        this.code = 0;
        this.message = null;
        setTotalPagesIsSet(false);
        this.totalPages = 0;
        setPageIsSet(false);
        this.page = 0;
        this.data = null;
    }

    /**
     * 返回码
     */
    public int getCode() {
        return this.code;
    }

    /**
     * 返回码
     */
    public QueryResult setCode(int code) {
        this.code = code;
        setCodeIsSet(true);
        return this;
    }

    public void unsetCode() {
        __isset_bit_vector.clear(__CODE_ISSET_ID);
    }

    /**
     * Returns true if field code is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetCode() {
        return __isset_bit_vector.get(__CODE_ISSET_ID);
    }

    public void setCodeIsSet(boolean value) {
        __isset_bit_vector.set(__CODE_ISSET_ID, value);
    }

    /**
     * 返回信息，最长255个UTF-8字符
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * 返回信息，最长255个UTF-8字符
     */
    public QueryResult setMessage(String message) {
        this.message = message;
        return this;
    }

    public void unsetMessage() {
        this.message = null;
    }

    /**
     * Returns true if field message is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetMessage() {
        return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
        if (!value) {
            this.message = null;
        }
    }

    /**
     * 总页数
     */
    public int getTotalPages() {
        return this.totalPages;
    }

    /**
     * 总页数
     */
    public QueryResult setTotalPages(int totalPages) {
        this.totalPages = totalPages;
        setTotalPagesIsSet(true);
        return this;
    }

    public void unsetTotalPages() {
        __isset_bit_vector.clear(__TOTALPAGES_ISSET_ID);
    }

    /**
     * Returns true if field totalPages is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetTotalPages() {
        return __isset_bit_vector.get(__TOTALPAGES_ISSET_ID);
    }

    public void setTotalPagesIsSet(boolean value) {
        __isset_bit_vector.set(__TOTALPAGES_ISSET_ID, value);
    }

    /**
     * 当前页
     */
    public int getPage() {
        return this.page;
    }

    /**
     * 当前页
     */
    public QueryResult setPage(int page) {
        this.page = page;
        setPageIsSet(true);
        return this;
    }

    public void unsetPage() {
        __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /**
     * Returns true if field page is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetPage() {
        return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
        __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    /**
     * 数据（JSON格式）
     */
    public String getData() {
        return this.data;
    }

    /**
     * 数据（JSON格式）
     */
    public QueryResult setData(String data) {
        this.data = data;
        return this;
    }

    public void unsetData() {
        this.data = null;
    }

    /**
     * Returns true if field data is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetData() {
        return this.data != null;
    }

    public void setDataIsSet(boolean value) {
        if (!value) {
            this.data = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case CODE:
            if (value == null) {
                unsetCode();
            } else {
                setCode((Integer) value);
            }
            break;

        case MESSAGE:
            if (value == null) {
                unsetMessage();
            } else {
                setMessage((String) value);
            }
            break;

        case TOTAL_PAGES:
            if (value == null) {
                unsetTotalPages();
            } else {
                setTotalPages((Integer) value);
            }
            break;

        case PAGE:
            if (value == null) {
                unsetPage();
            } else {
                setPage((Integer) value);
            }
            break;

        case DATA:
            if (value == null) {
                unsetData();
            } else {
                setData((String) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case CODE:
            return new Integer(getCode());

        case MESSAGE:
            return getMessage();

        case TOTAL_PAGES:
            return new Integer(getTotalPages());

        case PAGE:
            return new Integer(getPage());

        case DATA:
            return getData();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case CODE:
            return isSetCode();
        case MESSAGE:
            return isSetMessage();
        case TOTAL_PAGES:
            return isSetTotalPages();
        case PAGE:
            return isSetPage();
        case DATA:
            return isSetData();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof QueryResult)
            return this.equals((QueryResult) that);
        return false;
    }

    public boolean equals(QueryResult that) {
        if (that == null)
            return false;

        boolean this_present_code = true;
        boolean that_present_code = true;
        if (this_present_code || that_present_code) {
            if (!(this_present_code && that_present_code))
                return false;
            if (this.code != that.code)
                return false;
        }

        boolean this_present_message = true && this.isSetMessage();
        boolean that_present_message = true && that.isSetMessage();
        if (this_present_message || that_present_message) {
            if (!(this_present_message && that_present_message))
                return false;
            if (!this.message.equals(that.message))
                return false;
        }

        boolean this_present_totalPages = true;
        boolean that_present_totalPages = true;
        if (this_present_totalPages || that_present_totalPages) {
            if (!(this_present_totalPages && that_present_totalPages))
                return false;
            if (this.totalPages != that.totalPages)
                return false;
        }

        boolean this_present_page = true;
        boolean that_present_page = true;
        if (this_present_page || that_present_page) {
            if (!(this_present_page && that_present_page))
                return false;
            if (this.page != that.page)
                return false;
        }

        boolean this_present_data = true && this.isSetData();
        boolean that_present_data = true && that.isSetData();
        if (this_present_data || that_present_data) {
            if (!(this_present_data && that_present_data))
                return false;
            if (!this.data.equals(that.data))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(QueryResult other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        QueryResult typedOther = (QueryResult) other;

        lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCode()) {
            lastComparison = TBaseHelper.compareTo(this.code, typedOther.code);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMessage()) {
            lastComparison = TBaseHelper.compareTo(this.message, typedOther.message);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTotalPages()).compareTo(typedOther.isSetTotalPages());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTotalPages()) {
            lastComparison = TBaseHelper.compareTo(this.totalPages, typedOther.totalPages);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPage()) {
            lastComparison = TBaseHelper.compareTo(this.page, typedOther.page);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetData()) {
            lastComparison = TBaseHelper.compareTo(this.data, typedOther.data);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // CODE
                if (field.type == TType.I32) {
                    this.code = iprot.readI32();
                    setCodeIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // MESSAGE
                if (field.type == TType.STRING) {
                    this.message = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // TOTAL_PAGES
                if (field.type == TType.I32) {
                    this.totalPages = iprot.readI32();
                    setTotalPagesIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4: // PAGE
                if (field.type == TType.I32) {
                    this.page = iprot.readI32();
                    setPageIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 5: // DATA
                if (field.type == TType.STRING) {
                    this.data = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        if (!isSetCode()) {
            throw new TProtocolException("Required field 'code' was not found in serialized data! Struct: "
                    + toString());
        }
        if (!isSetTotalPages()) {
            throw new TProtocolException("Required field 'totalPages' was not found in serialized data! Struct: "
                    + toString());
        }
        if (!isSetPage()) {
            throw new TProtocolException("Required field 'page' was not found in serialized data! Struct: "
                    + toString());
        }
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeI32(this.code);
        oprot.writeFieldEnd();
        if (this.message != null) {
            oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
            oprot.writeString(this.message);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TOTAL_PAGES_FIELD_DESC);
        oprot.writeI32(this.totalPages);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(this.page);
        oprot.writeFieldEnd();
        if (this.data != null) {
            oprot.writeFieldBegin(DATA_FIELD_DESC);
            oprot.writeString(this.data);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("QueryResult(");
        boolean first = true;

        sb.append("code:");
        sb.append(this.code);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("message:");
        if (this.message == null) {
            sb.append("null");
        } else {
            sb.append(this.message);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("totalPages:");
        sb.append(this.totalPages);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("page:");
        sb.append(this.page);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("data:");
        if (this.data == null) {
            sb.append("null");
        } else {
            sb.append(this.data);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        // alas, we cannot check 'code' because it's a primitive and you chose
        // the non-beans generator.
        if (message == null) {
            throw new TProtocolException("Required field 'message' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'totalPages' because it's a primitive and you
        // chose the non-beans generator.
        // alas, we cannot check 'page' because it's a primitive and you chose
        // the non-beans generator.
        if (data == null) {
            throw new TProtocolException("Required field 'data' was not present! Struct: " + toString());
        }
    }

}

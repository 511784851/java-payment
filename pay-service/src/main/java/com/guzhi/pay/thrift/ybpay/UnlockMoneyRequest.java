/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * 解除冻结多玩币的参数
 */
public class UnlockMoneyRequest implements TBase<UnlockMoneyRequest, UnlockMoneyRequest._Fields>, java.io.Serializable,
        Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("UnlockMoneyRequest");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short) 1);
    private static final TField LOCK_ORDER_ID_FIELD_DESC = new TField("lockOrderId", TType.STRING, (short) 2);
    private static final TField PAY_ORDER_ID_FIELD_DESC = new TField("payOrderId", TType.STRING, (short) 3);
    private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 4);
    private static final TField MONEY_FIELD_DESC = new TField("money", TType.STRING, (short) 5);
    private static final TField USER_IP_FIELD_DESC = new TField("userIp", TType.STRING, (short) 6);
    private static final TField UNLOCK_TYPE_FIELD_DESC = new TField("unlockType", TType.I32, (short) 7);
    private static final TField PAY_TIME_FIELD_DESC = new TField("payTime", TType.STRING, (short) 8);
    private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 9);

    /**
     * 账号
     */
    public String username;
    /**
     * 冻结订单号
     */
    public String lockOrderId;
    /**
     * 直接扣费订单号，当unlockType = 1时为必须传递
     */
    public String payOrderId;
    /**
     * 产品ID
     */
    public String product;
    /**
     * 扣除的多玩币，单位：多玩币，最小单位：1多玩币
     */
    public String money;
    /**
     * 用户客户端IP
     */
    public String userIp;
    /**
     * 解锁类型，0：返还多玩币，1：扣除多玩币
     */
    public int unlockType;
    /**
     * 扣除多玩币的时间，即扣费订单的时间
     */
    public String payTime;
    /**
     * md5校验码
     */
    public String sign;

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        /**
         * 账号
         */
        USERNAME((short) 1, "username"),
        /**
         * 冻结订单号
         */
        LOCK_ORDER_ID((short) 2, "lockOrderId"),
        /**
         * 直接扣费订单号，当unlockType = 1时为必须传递
         */
        PAY_ORDER_ID((short) 3, "payOrderId"),
        /**
         * 产品ID
         */
        PRODUCT((short) 4, "product"),
        /**
         * 扣除的多玩币，单位：多玩币，最小单位：1多玩币
         */
        MONEY((short) 5, "money"),
        /**
         * 用户客户端IP
         */
        USER_IP((short) 6, "userIp"),
        /**
         * 解锁类型，0：返还多玩币，1：扣除多玩币
         */
        UNLOCK_TYPE((short) 7, "unlockType"),
        /**
         * 扣除多玩币的时间，即扣费订单的时间
         */
        PAY_TIME((short) 8, "payTime"),
        /**
         * md5校验码
         */
        SIGN((short) 9, "sign");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // USERNAME
                return USERNAME;
            case 2: // LOCK_ORDER_ID
                return LOCK_ORDER_ID;
            case 3: // PAY_ORDER_ID
                return PAY_ORDER_ID;
            case 4: // PRODUCT
                return PRODUCT;
            case 5: // MONEY
                return MONEY;
            case 6: // USER_IP
                return USER_IP;
            case 7: // UNLOCK_TYPE
                return UNLOCK_TYPE;
            case 8: // PAY_TIME
                return PAY_TIME;
            case 9: // SIGN
                return SIGN;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __UNLOCKTYPE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.LOCK_ORDER_ID, new FieldMetaData("lockOrderId", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.PAY_ORDER_ID, new FieldMetaData("payOrderId", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.MONEY, new FieldMetaData("money", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.USER_IP, new FieldMetaData("userIp", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.UNLOCK_TYPE, new FieldMetaData("unlockType", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.PAY_TIME, new FieldMetaData("payTime", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(UnlockMoneyRequest.class, metaDataMap);
    }

    public UnlockMoneyRequest() {
    }

    public UnlockMoneyRequest(String username, String lockOrderId, String payOrderId, String product, String money,
            String userIp, int unlockType, String payTime, String sign) {
        this();
        this.username = username;
        this.lockOrderId = lockOrderId;
        this.payOrderId = payOrderId;
        this.product = product;
        this.money = money;
        this.userIp = userIp;
        this.unlockType = unlockType;
        setUnlockTypeIsSet(true);
        this.payTime = payTime;
        this.sign = sign;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UnlockMoneyRequest(UnlockMoneyRequest other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetUsername()) {
            this.username = other.username;
        }
        if (other.isSetLockOrderId()) {
            this.lockOrderId = other.lockOrderId;
        }
        if (other.isSetPayOrderId()) {
            this.payOrderId = other.payOrderId;
        }
        if (other.isSetProduct()) {
            this.product = other.product;
        }
        if (other.isSetMoney()) {
            this.money = other.money;
        }
        if (other.isSetUserIp()) {
            this.userIp = other.userIp;
        }
        this.unlockType = other.unlockType;
        if (other.isSetPayTime()) {
            this.payTime = other.payTime;
        }
        if (other.isSetSign()) {
            this.sign = other.sign;
        }
    }

    public UnlockMoneyRequest deepCopy() {
        return new UnlockMoneyRequest(this);
    }

    @Override
    public void clear() {
        this.username = null;
        this.lockOrderId = null;
        this.payOrderId = null;
        this.product = null;
        this.money = null;
        this.userIp = null;
        setUnlockTypeIsSet(false);
        this.unlockType = 0;
        this.payTime = null;
        this.sign = null;
    }

    /**
     * 账号
     */
    public String getUsername() {
        return this.username;
    }

    /**
     * 账号
     */
    public UnlockMoneyRequest setUsername(String username) {
        this.username = username;
        return this;
    }

    public void unsetUsername() {
        this.username = null;
    }

    /**
     * Returns true if field username is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetUsername() {
        return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
        if (!value) {
            this.username = null;
        }
    }

    /**
     * 冻结订单号
     */
    public String getLockOrderId() {
        return this.lockOrderId;
    }

    /**
     * 冻结订单号
     */
    public UnlockMoneyRequest setLockOrderId(String lockOrderId) {
        this.lockOrderId = lockOrderId;
        return this;
    }

    public void unsetLockOrderId() {
        this.lockOrderId = null;
    }

    /**
     * Returns true if field lockOrderId is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetLockOrderId() {
        return this.lockOrderId != null;
    }

    public void setLockOrderIdIsSet(boolean value) {
        if (!value) {
            this.lockOrderId = null;
        }
    }

    /**
     * 直接扣费订单号，当unlockType = 1时为必须传递
     */
    public String getPayOrderId() {
        return this.payOrderId;
    }

    /**
     * 直接扣费订单号，当unlockType = 1时为必须传递
     */
    public UnlockMoneyRequest setPayOrderId(String payOrderId) {
        this.payOrderId = payOrderId;
        return this;
    }

    public void unsetPayOrderId() {
        this.payOrderId = null;
    }

    /**
     * Returns true if field payOrderId is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetPayOrderId() {
        return this.payOrderId != null;
    }

    public void setPayOrderIdIsSet(boolean value) {
        if (!value) {
            this.payOrderId = null;
        }
    }

    /**
     * 产品ID
     */
    public String getProduct() {
        return this.product;
    }

    /**
     * 产品ID
     */
    public UnlockMoneyRequest setProduct(String product) {
        this.product = product;
        return this;
    }

    public void unsetProduct() {
        this.product = null;
    }

    /**
     * Returns true if field product is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetProduct() {
        return this.product != null;
    }

    public void setProductIsSet(boolean value) {
        if (!value) {
            this.product = null;
        }
    }

    /**
     * 扣除的多玩币，单位：多玩币，最小单位：1多玩币
     */
    public String getMoney() {
        return this.money;
    }

    /**
     * 扣除的多玩币，单位：多玩币，最小单位：1多玩币
     */
    public UnlockMoneyRequest setMoney(String money) {
        this.money = money;
        return this;
    }

    public void unsetMoney() {
        this.money = null;
    }

    /**
     * Returns true if field money is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetMoney() {
        return this.money != null;
    }

    public void setMoneyIsSet(boolean value) {
        if (!value) {
            this.money = null;
        }
    }

    /**
     * 用户客户端IP
     */
    public String getUserIp() {
        return this.userIp;
    }

    /**
     * 用户客户端IP
     */
    public UnlockMoneyRequest setUserIp(String userIp) {
        this.userIp = userIp;
        return this;
    }

    public void unsetUserIp() {
        this.userIp = null;
    }

    /**
     * Returns true if field userIp is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetUserIp() {
        return this.userIp != null;
    }

    public void setUserIpIsSet(boolean value) {
        if (!value) {
            this.userIp = null;
        }
    }

    /**
     * 解锁类型，0：返还多玩币，1：扣除多玩币
     */
    public int getUnlockType() {
        return this.unlockType;
    }

    /**
     * 解锁类型，0：返还多玩币，1：扣除多玩币
     */
    public UnlockMoneyRequest setUnlockType(int unlockType) {
        this.unlockType = unlockType;
        setUnlockTypeIsSet(true);
        return this;
    }

    public void unsetUnlockType() {
        __isset_bit_vector.clear(__UNLOCKTYPE_ISSET_ID);
    }

    /**
     * Returns true if field unlockType is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetUnlockType() {
        return __isset_bit_vector.get(__UNLOCKTYPE_ISSET_ID);
    }

    public void setUnlockTypeIsSet(boolean value) {
        __isset_bit_vector.set(__UNLOCKTYPE_ISSET_ID, value);
    }

    /**
     * 扣除多玩币的时间，即扣费订单的时间
     */
    public String getPayTime() {
        return this.payTime;
    }

    /**
     * 扣除多玩币的时间，即扣费订单的时间
     */
    public UnlockMoneyRequest setPayTime(String payTime) {
        this.payTime = payTime;
        return this;
    }

    public void unsetPayTime() {
        this.payTime = null;
    }

    /**
     * Returns true if field payTime is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetPayTime() {
        return this.payTime != null;
    }

    public void setPayTimeIsSet(boolean value) {
        if (!value) {
            this.payTime = null;
        }
    }

    /**
     * md5校验码
     */
    public String getSign() {
        return this.sign;
    }

    /**
     * md5校验码
     */
    public UnlockMoneyRequest setSign(String sign) {
        this.sign = sign;
        return this;
    }

    public void unsetSign() {
        this.sign = null;
    }

    /**
     * Returns true if field sign is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetSign() {
        return this.sign != null;
    }

    public void setSignIsSet(boolean value) {
        if (!value) {
            this.sign = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case USERNAME:
            if (value == null) {
                unsetUsername();
            } else {
                setUsername((String) value);
            }
            break;

        case LOCK_ORDER_ID:
            if (value == null) {
                unsetLockOrderId();
            } else {
                setLockOrderId((String) value);
            }
            break;

        case PAY_ORDER_ID:
            if (value == null) {
                unsetPayOrderId();
            } else {
                setPayOrderId((String) value);
            }
            break;

        case PRODUCT:
            if (value == null) {
                unsetProduct();
            } else {
                setProduct((String) value);
            }
            break;

        case MONEY:
            if (value == null) {
                unsetMoney();
            } else {
                setMoney((String) value);
            }
            break;

        case USER_IP:
            if (value == null) {
                unsetUserIp();
            } else {
                setUserIp((String) value);
            }
            break;

        case UNLOCK_TYPE:
            if (value == null) {
                unsetUnlockType();
            } else {
                setUnlockType((Integer) value);
            }
            break;

        case PAY_TIME:
            if (value == null) {
                unsetPayTime();
            } else {
                setPayTime((String) value);
            }
            break;

        case SIGN:
            if (value == null) {
                unsetSign();
            } else {
                setSign((String) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case USERNAME:
            return getUsername();

        case LOCK_ORDER_ID:
            return getLockOrderId();

        case PAY_ORDER_ID:
            return getPayOrderId();

        case PRODUCT:
            return getProduct();

        case MONEY:
            return getMoney();

        case USER_IP:
            return getUserIp();

        case UNLOCK_TYPE:
            return new Integer(getUnlockType());

        case PAY_TIME:
            return getPayTime();

        case SIGN:
            return getSign();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case USERNAME:
            return isSetUsername();
        case LOCK_ORDER_ID:
            return isSetLockOrderId();
        case PAY_ORDER_ID:
            return isSetPayOrderId();
        case PRODUCT:
            return isSetProduct();
        case MONEY:
            return isSetMoney();
        case USER_IP:
            return isSetUserIp();
        case UNLOCK_TYPE:
            return isSetUnlockType();
        case PAY_TIME:
            return isSetPayTime();
        case SIGN:
            return isSetSign();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof UnlockMoneyRequest)
            return this.equals((UnlockMoneyRequest) that);
        return false;
    }

    public boolean equals(UnlockMoneyRequest that) {
        if (that == null)
            return false;

        boolean this_present_username = true && this.isSetUsername();
        boolean that_present_username = true && that.isSetUsername();
        if (this_present_username || that_present_username) {
            if (!(this_present_username && that_present_username))
                return false;
            if (!this.username.equals(that.username))
                return false;
        }

        boolean this_present_lockOrderId = true && this.isSetLockOrderId();
        boolean that_present_lockOrderId = true && that.isSetLockOrderId();
        if (this_present_lockOrderId || that_present_lockOrderId) {
            if (!(this_present_lockOrderId && that_present_lockOrderId))
                return false;
            if (!this.lockOrderId.equals(that.lockOrderId))
                return false;
        }

        boolean this_present_payOrderId = true && this.isSetPayOrderId();
        boolean that_present_payOrderId = true && that.isSetPayOrderId();
        if (this_present_payOrderId || that_present_payOrderId) {
            if (!(this_present_payOrderId && that_present_payOrderId))
                return false;
            if (!this.payOrderId.equals(that.payOrderId))
                return false;
        }

        boolean this_present_product = true && this.isSetProduct();
        boolean that_present_product = true && that.isSetProduct();
        if (this_present_product || that_present_product) {
            if (!(this_present_product && that_present_product))
                return false;
            if (!this.product.equals(that.product))
                return false;
        }

        boolean this_present_money = true && this.isSetMoney();
        boolean that_present_money = true && that.isSetMoney();
        if (this_present_money || that_present_money) {
            if (!(this_present_money && that_present_money))
                return false;
            if (!this.money.equals(that.money))
                return false;
        }

        boolean this_present_userIp = true && this.isSetUserIp();
        boolean that_present_userIp = true && that.isSetUserIp();
        if (this_present_userIp || that_present_userIp) {
            if (!(this_present_userIp && that_present_userIp))
                return false;
            if (!this.userIp.equals(that.userIp))
                return false;
        }

        boolean this_present_unlockType = true;
        boolean that_present_unlockType = true;
        if (this_present_unlockType || that_present_unlockType) {
            if (!(this_present_unlockType && that_present_unlockType))
                return false;
            if (this.unlockType != that.unlockType)
                return false;
        }

        boolean this_present_payTime = true && this.isSetPayTime();
        boolean that_present_payTime = true && that.isSetPayTime();
        if (this_present_payTime || that_present_payTime) {
            if (!(this_present_payTime && that_present_payTime))
                return false;
            if (!this.payTime.equals(that.payTime))
                return false;
        }

        boolean this_present_sign = true && this.isSetSign();
        boolean that_present_sign = true && that.isSetSign();
        if (this_present_sign || that_present_sign) {
            if (!(this_present_sign && that_present_sign))
                return false;
            if (!this.sign.equals(that.sign))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(UnlockMoneyRequest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        UnlockMoneyRequest typedOther = (UnlockMoneyRequest) other;

        lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUsername()) {
            lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLockOrderId()).compareTo(typedOther.isSetLockOrderId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLockOrderId()) {
            lastComparison = TBaseHelper.compareTo(this.lockOrderId, typedOther.lockOrderId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPayOrderId()).compareTo(typedOther.isSetPayOrderId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPayOrderId()) {
            lastComparison = TBaseHelper.compareTo(this.payOrderId, typedOther.payOrderId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetProduct()) {
            lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMoney()).compareTo(typedOther.isSetMoney());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMoney()) {
            lastComparison = TBaseHelper.compareTo(this.money, typedOther.money);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUserIp()).compareTo(typedOther.isSetUserIp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserIp()) {
            lastComparison = TBaseHelper.compareTo(this.userIp, typedOther.userIp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUnlockType()).compareTo(typedOther.isSetUnlockType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUnlockType()) {
            lastComparison = TBaseHelper.compareTo(this.unlockType, typedOther.unlockType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPayTime()).compareTo(typedOther.isSetPayTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPayTime()) {
            lastComparison = TBaseHelper.compareTo(this.payTime, typedOther.payTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSign()) {
            lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // USERNAME
                if (field.type == TType.STRING) {
                    this.username = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // LOCK_ORDER_ID
                if (field.type == TType.STRING) {
                    this.lockOrderId = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // PAY_ORDER_ID
                if (field.type == TType.STRING) {
                    this.payOrderId = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4: // PRODUCT
                if (field.type == TType.STRING) {
                    this.product = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 5: // MONEY
                if (field.type == TType.STRING) {
                    this.money = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 6: // USER_IP
                if (field.type == TType.STRING) {
                    this.userIp = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 7: // UNLOCK_TYPE
                if (field.type == TType.I32) {
                    this.unlockType = iprot.readI32();
                    setUnlockTypeIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 8: // PAY_TIME
                if (field.type == TType.STRING) {
                    this.payTime = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 9: // SIGN
                if (field.type == TType.STRING) {
                    this.sign = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.username != null) {
            oprot.writeFieldBegin(USERNAME_FIELD_DESC);
            oprot.writeString(this.username);
            oprot.writeFieldEnd();
        }
        if (this.lockOrderId != null) {
            oprot.writeFieldBegin(LOCK_ORDER_ID_FIELD_DESC);
            oprot.writeString(this.lockOrderId);
            oprot.writeFieldEnd();
        }
        if (this.payOrderId != null) {
            oprot.writeFieldBegin(PAY_ORDER_ID_FIELD_DESC);
            oprot.writeString(this.payOrderId);
            oprot.writeFieldEnd();
        }
        if (this.product != null) {
            oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
            oprot.writeString(this.product);
            oprot.writeFieldEnd();
        }
        if (this.money != null) {
            oprot.writeFieldBegin(MONEY_FIELD_DESC);
            oprot.writeString(this.money);
            oprot.writeFieldEnd();
        }
        if (this.userIp != null) {
            oprot.writeFieldBegin(USER_IP_FIELD_DESC);
            oprot.writeString(this.userIp);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(UNLOCK_TYPE_FIELD_DESC);
        oprot.writeI32(this.unlockType);
        oprot.writeFieldEnd();
        if (this.payTime != null) {
            oprot.writeFieldBegin(PAY_TIME_FIELD_DESC);
            oprot.writeString(this.payTime);
            oprot.writeFieldEnd();
        }
        if (this.sign != null) {
            oprot.writeFieldBegin(SIGN_FIELD_DESC);
            oprot.writeString(this.sign);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UnlockMoneyRequest(");
        boolean first = true;

        sb.append("username:");
        if (this.username == null) {
            sb.append("null");
        } else {
            sb.append(this.username);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("lockOrderId:");
        if (this.lockOrderId == null) {
            sb.append("null");
        } else {
            sb.append(this.lockOrderId);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("payOrderId:");
        if (this.payOrderId == null) {
            sb.append("null");
        } else {
            sb.append(this.payOrderId);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("product:");
        if (this.product == null) {
            sb.append("null");
        } else {
            sb.append(this.product);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("money:");
        if (this.money == null) {
            sb.append("null");
        } else {
            sb.append(this.money);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("userIp:");
        if (this.userIp == null) {
            sb.append("null");
        } else {
            sb.append(this.userIp);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("unlockType:");
        sb.append(this.unlockType);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("payTime:");
        if (this.payTime == null) {
            sb.append("null");
        } else {
            sb.append(this.payTime);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("sign:");
        if (this.sign == null) {
            sb.append("null");
        } else {
            sb.append(this.sign);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
    }

}

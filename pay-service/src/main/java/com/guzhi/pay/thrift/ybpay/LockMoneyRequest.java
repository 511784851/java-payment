/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * 冻结多玩币的参数
 */
public class LockMoneyRequest implements TBase<LockMoneyRequest, LockMoneyRequest._Fields>, java.io.Serializable,
        Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("LockMoneyRequest");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short) 1);
    private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short) 2);
    private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 3);
    private static final TField MONEY_FIELD_DESC = new TField("money", TType.STRING, (short) 4);
    private static final TField USER_IP_FIELD_DESC = new TField("userIp", TType.STRING, (short) 5);
    private static final TField SERVER_FIELD_DESC = new TField("server", TType.STRING, (short) 6);
    private static final TField LOCK_TIME_FIELD_DESC = new TField("lockTime", TType.STRING, (short) 7);
    private static final TField GOODS_NAME_FIELD_DESC = new TField("goodsName", TType.STRING, (short) 8);
    private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short) 9);
    private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 10);
    private static final TField AUTO_UNLOCK_TIME_FIELD_DESC = new TField("autoUnlockTime", TType.STRING, (short) 11);
    private static final TField CONSUME_TARGET_PRODUCT_FIELD_DESC = new TField("consumeTargetProduct", TType.STRING,
            (short) 12);

    /**
     * 账号
     */
    public String username;
    /**
     * 订单号
     */
    public String orderId;
    /**
     * 产品ID
     */
    public String product;
    /**
     * 扣除的多玩币，单位：多玩币，最小单位：1多玩币
     */
    public String money;
    /**
     * 用户客户端IP
     */
    public String userIp;
    /**
     * 产品服务器，如果没有，写空字符串""
     */
    public String server;
    /**
     * 锁定多玩币的时间，格式：gbgbMMddHHmmss
     */
    public String lockTime;
    /**
     * 商品名称，最长50字符
     */
    public String goodsName;
    /**
     * 描述，最长100个字符
     */
    public String description;
    /**
     * md5校验码
     */
    public String sign;
    /**
     * 自动解锁时间，格式：gbgbMMddHHmmss
     */
    public String autoUnlockTime;
    /**
     * 消费到哪个产品里，最长20字符，一般等于""，像开放平台、充值中心这种业务，consumeTargetProduct=游戏/应用ID，
     */
    public String consumeTargetProduct;

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        /**
         * 账号
         */
        USERNAME((short) 1, "username"),
        /**
         * 订单号
         */
        ORDER_ID((short) 2, "orderId"),
        /**
         * 产品ID
         */
        PRODUCT((short) 3, "product"),
        /**
         * 扣除的多玩币，单位：多玩币，最小单位：1多玩币
         */
        MONEY((short) 4, "money"),
        /**
         * 用户客户端IP
         */
        USER_IP((short) 5, "userIp"),
        /**
         * 产品服务器，如果没有，写空字符串""
         */
        SERVER((short) 6, "server"),
        /**
         * 锁定多玩币的时间，格式：gbgbMMddHHmmss
         */
        LOCK_TIME((short) 7, "lockTime"),
        /**
         * 商品名称，最长50字符
         */
        GOODS_NAME((short) 8, "goodsName"),
        /**
         * 描述，最长100个字符
         */
        DESCRIPTION((short) 9, "description"),
        /**
         * md5校验码
         */
        SIGN((short) 10, "sign"),
        /**
         * 自动解锁时间，格式：gbgbMMddHHmmss
         */
        AUTO_UNLOCK_TIME((short) 11, "autoUnlockTime"),
        /**
         * 消费到哪个产品里，最长20字符，一般等于""，像开放平台、充值中心这种业务，consumeTargetProduct=游戏/应用ID，
         */
        CONSUME_TARGET_PRODUCT((short) 12, "consumeTargetProduct");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // USERNAME
                return USERNAME;
            case 2: // ORDER_ID
                return ORDER_ID;
            case 3: // PRODUCT
                return PRODUCT;
            case 4: // MONEY
                return MONEY;
            case 5: // USER_IP
                return USER_IP;
            case 6: // SERVER
                return SERVER;
            case 7: // LOCK_TIME
                return LOCK_TIME;
            case 8: // GOODS_NAME
                return GOODS_NAME;
            case 9: // DESCRIPTION
                return DESCRIPTION;
            case 10: // SIGN
                return SIGN;
            case 11: // AUTO_UNLOCK_TIME
                return AUTO_UNLOCK_TIME;
            case 12: // CONSUME_TARGET_PRODUCT
                return CONSUME_TARGET_PRODUCT;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.MONEY, new FieldMetaData("money", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.USER_IP, new FieldMetaData("userIp", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.SERVER, new FieldMetaData("server", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.LOCK_TIME, new FieldMetaData("lockTime", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.GOODS_NAME, new FieldMetaData("goodsName", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.DESCRIPTION, new FieldMetaData("description", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.AUTO_UNLOCK_TIME, new FieldMetaData("autoUnlockTime", TFieldRequirementType.OPTIONAL,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.CONSUME_TARGET_PRODUCT, new FieldMetaData("consumeTargetProduct",
                TFieldRequirementType.OPTIONAL, new FieldValueMetaData(TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(LockMoneyRequest.class, metaDataMap);
    }

    public LockMoneyRequest() {
        this.consumeTargetProduct = "";

    }

    public LockMoneyRequest(String username, String orderId, String product, String money, String userIp,
            String server, String lockTime, String goodsName, String description, String sign) {
        this();
        this.username = username;
        this.orderId = orderId;
        this.product = product;
        this.money = money;
        this.userIp = userIp;
        this.server = server;
        this.lockTime = lockTime;
        this.goodsName = goodsName;
        this.description = description;
        this.sign = sign;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LockMoneyRequest(LockMoneyRequest other) {
        if (other.isSetUsername()) {
            this.username = other.username;
        }
        if (other.isSetOrderId()) {
            this.orderId = other.orderId;
        }
        if (other.isSetProduct()) {
            this.product = other.product;
        }
        if (other.isSetMoney()) {
            this.money = other.money;
        }
        if (other.isSetUserIp()) {
            this.userIp = other.userIp;
        }
        if (other.isSetServer()) {
            this.server = other.server;
        }
        if (other.isSetLockTime()) {
            this.lockTime = other.lockTime;
        }
        if (other.isSetGoodsName()) {
            this.goodsName = other.goodsName;
        }
        if (other.isSetDescription()) {
            this.description = other.description;
        }
        if (other.isSetSign()) {
            this.sign = other.sign;
        }
        if (other.isSetAutoUnlockTime()) {
            this.autoUnlockTime = other.autoUnlockTime;
        }
        if (other.isSetConsumeTargetProduct()) {
            this.consumeTargetProduct = other.consumeTargetProduct;
        }
    }

    public LockMoneyRequest deepCopy() {
        return new LockMoneyRequest(this);
    }

    @Override
    public void clear() {
        this.username = null;
        this.orderId = null;
        this.product = null;
        this.money = null;
        this.userIp = null;
        this.server = null;
        this.lockTime = null;
        this.goodsName = null;
        this.description = null;
        this.sign = null;
        this.autoUnlockTime = null;
        this.consumeTargetProduct = "";

    }

    /**
     * 账号
     */
    public String getUsername() {
        return this.username;
    }

    /**
     * 账号
     */
    public LockMoneyRequest setUsername(String username) {
        this.username = username;
        return this;
    }

    public void unsetUsername() {
        this.username = null;
    }

    /**
     * Returns true if field username is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetUsername() {
        return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
        if (!value) {
            this.username = null;
        }
    }

    /**
     * 订单号
     */
    public String getOrderId() {
        return this.orderId;
    }

    /**
     * 订单号
     */
    public LockMoneyRequest setOrderId(String orderId) {
        this.orderId = orderId;
        return this;
    }

    public void unsetOrderId() {
        this.orderId = null;
    }

    /**
     * Returns true if field orderId is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetOrderId() {
        return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
        if (!value) {
            this.orderId = null;
        }
    }

    /**
     * 产品ID
     */
    public String getProduct() {
        return this.product;
    }

    /**
     * 产品ID
     */
    public LockMoneyRequest setProduct(String product) {
        this.product = product;
        return this;
    }

    public void unsetProduct() {
        this.product = null;
    }

    /**
     * Returns true if field product is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetProduct() {
        return this.product != null;
    }

    public void setProductIsSet(boolean value) {
        if (!value) {
            this.product = null;
        }
    }

    /**
     * 扣除的多玩币，单位：多玩币，最小单位：1多玩币
     */
    public String getMoney() {
        return this.money;
    }

    /**
     * 扣除的多玩币，单位：多玩币，最小单位：1多玩币
     */
    public LockMoneyRequest setMoney(String money) {
        this.money = money;
        return this;
    }

    public void unsetMoney() {
        this.money = null;
    }

    /**
     * Returns true if field money is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetMoney() {
        return this.money != null;
    }

    public void setMoneyIsSet(boolean value) {
        if (!value) {
            this.money = null;
        }
    }

    /**
     * 用户客户端IP
     */
    public String getUserIp() {
        return this.userIp;
    }

    /**
     * 用户客户端IP
     */
    public LockMoneyRequest setUserIp(String userIp) {
        this.userIp = userIp;
        return this;
    }

    public void unsetUserIp() {
        this.userIp = null;
    }

    /**
     * Returns true if field userIp is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetUserIp() {
        return this.userIp != null;
    }

    public void setUserIpIsSet(boolean value) {
        if (!value) {
            this.userIp = null;
        }
    }

    /**
     * 产品服务器，如果没有，写空字符串""
     */
    public String getServer() {
        return this.server;
    }

    /**
     * 产品服务器，如果没有，写空字符串""
     */
    public LockMoneyRequest setServer(String server) {
        this.server = server;
        return this;
    }

    public void unsetServer() {
        this.server = null;
    }

    /**
     * Returns true if field server is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetServer() {
        return this.server != null;
    }

    public void setServerIsSet(boolean value) {
        if (!value) {
            this.server = null;
        }
    }

    /**
     * 锁定多玩币的时间，格式：gbgbMMddHHmmss
     */
    public String getLockTime() {
        return this.lockTime;
    }

    /**
     * 锁定多玩币的时间，格式：gbgbMMddHHmmss
     */
    public LockMoneyRequest setLockTime(String lockTime) {
        this.lockTime = lockTime;
        return this;
    }

    public void unsetLockTime() {
        this.lockTime = null;
    }

    /**
     * Returns true if field lockTime is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetLockTime() {
        return this.lockTime != null;
    }

    public void setLockTimeIsSet(boolean value) {
        if (!value) {
            this.lockTime = null;
        }
    }

    /**
     * 商品名称，最长50字符
     */
    public String getGoodsName() {
        return this.goodsName;
    }

    /**
     * 商品名称，最长50字符
     */
    public LockMoneyRequest setGoodsName(String goodsName) {
        this.goodsName = goodsName;
        return this;
    }

    public void unsetGoodsName() {
        this.goodsName = null;
    }

    /**
     * Returns true if field goodsName is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetGoodsName() {
        return this.goodsName != null;
    }

    public void setGoodsNameIsSet(boolean value) {
        if (!value) {
            this.goodsName = null;
        }
    }

    /**
     * 描述，最长100个字符
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * 描述，最长100个字符
     */
    public LockMoneyRequest setDescription(String description) {
        this.description = description;
        return this;
    }

    public void unsetDescription() {
        this.description = null;
    }

    /**
     * Returns true if field description is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetDescription() {
        return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
        if (!value) {
            this.description = null;
        }
    }

    /**
     * md5校验码
     */
    public String getSign() {
        return this.sign;
    }

    /**
     * md5校验码
     */
    public LockMoneyRequest setSign(String sign) {
        this.sign = sign;
        return this;
    }

    public void unsetSign() {
        this.sign = null;
    }

    /**
     * Returns true if field sign is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetSign() {
        return this.sign != null;
    }

    public void setSignIsSet(boolean value) {
        if (!value) {
            this.sign = null;
        }
    }

    /**
     * 自动解锁时间，格式：gbgbMMddHHmmss
     */
    public String getAutoUnlockTime() {
        return this.autoUnlockTime;
    }

    /**
     * 自动解锁时间，格式：gbgbMMddHHmmss
     */
    public LockMoneyRequest setAutoUnlockTime(String autoUnlockTime) {
        this.autoUnlockTime = autoUnlockTime;
        return this;
    }

    public void unsetAutoUnlockTime() {
        this.autoUnlockTime = null;
    }

    /**
     * Returns true if field autoUnlockTime is set (has been asigned a value)
     * and false otherwise
     */
    public boolean isSetAutoUnlockTime() {
        return this.autoUnlockTime != null;
    }

    public void setAutoUnlockTimeIsSet(boolean value) {
        if (!value) {
            this.autoUnlockTime = null;
        }
    }

    /**
     * 消费到哪个产品里，最长20字符，一般等于""，像开放平台、充值中心这种业务，consumeTargetProduct=游戏/应用ID，
     */
    public String getConsumeTargetProduct() {
        return this.consumeTargetProduct;
    }

    /**
     * 消费到哪个产品里，最长20字符，一般等于""，像开放平台、充值中心这种业务，consumeTargetProduct=游戏/应用ID，
     */
    public LockMoneyRequest setConsumeTargetProduct(String consumeTargetProduct) {
        this.consumeTargetProduct = consumeTargetProduct;
        return this;
    }

    public void unsetConsumeTargetProduct() {
        this.consumeTargetProduct = null;
    }

    /**
     * Returns true if field consumeTargetProduct is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSetConsumeTargetProduct() {
        return this.consumeTargetProduct != null;
    }

    public void setConsumeTargetProductIsSet(boolean value) {
        if (!value) {
            this.consumeTargetProduct = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case USERNAME:
            if (value == null) {
                unsetUsername();
            } else {
                setUsername((String) value);
            }
            break;

        case ORDER_ID:
            if (value == null) {
                unsetOrderId();
            } else {
                setOrderId((String) value);
            }
            break;

        case PRODUCT:
            if (value == null) {
                unsetProduct();
            } else {
                setProduct((String) value);
            }
            break;

        case MONEY:
            if (value == null) {
                unsetMoney();
            } else {
                setMoney((String) value);
            }
            break;

        case USER_IP:
            if (value == null) {
                unsetUserIp();
            } else {
                setUserIp((String) value);
            }
            break;

        case SERVER:
            if (value == null) {
                unsetServer();
            } else {
                setServer((String) value);
            }
            break;

        case LOCK_TIME:
            if (value == null) {
                unsetLockTime();
            } else {
                setLockTime((String) value);
            }
            break;

        case GOODS_NAME:
            if (value == null) {
                unsetGoodsName();
            } else {
                setGoodsName((String) value);
            }
            break;

        case DESCRIPTION:
            if (value == null) {
                unsetDescription();
            } else {
                setDescription((String) value);
            }
            break;

        case SIGN:
            if (value == null) {
                unsetSign();
            } else {
                setSign((String) value);
            }
            break;

        case AUTO_UNLOCK_TIME:
            if (value == null) {
                unsetAutoUnlockTime();
            } else {
                setAutoUnlockTime((String) value);
            }
            break;

        case CONSUME_TARGET_PRODUCT:
            if (value == null) {
                unsetConsumeTargetProduct();
            } else {
                setConsumeTargetProduct((String) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case USERNAME:
            return getUsername();

        case ORDER_ID:
            return getOrderId();

        case PRODUCT:
            return getProduct();

        case MONEY:
            return getMoney();

        case USER_IP:
            return getUserIp();

        case SERVER:
            return getServer();

        case LOCK_TIME:
            return getLockTime();

        case GOODS_NAME:
            return getGoodsName();

        case DESCRIPTION:
            return getDescription();

        case SIGN:
            return getSign();

        case AUTO_UNLOCK_TIME:
            return getAutoUnlockTime();

        case CONSUME_TARGET_PRODUCT:
            return getConsumeTargetProduct();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case USERNAME:
            return isSetUsername();
        case ORDER_ID:
            return isSetOrderId();
        case PRODUCT:
            return isSetProduct();
        case MONEY:
            return isSetMoney();
        case USER_IP:
            return isSetUserIp();
        case SERVER:
            return isSetServer();
        case LOCK_TIME:
            return isSetLockTime();
        case GOODS_NAME:
            return isSetGoodsName();
        case DESCRIPTION:
            return isSetDescription();
        case SIGN:
            return isSetSign();
        case AUTO_UNLOCK_TIME:
            return isSetAutoUnlockTime();
        case CONSUME_TARGET_PRODUCT:
            return isSetConsumeTargetProduct();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof LockMoneyRequest)
            return this.equals((LockMoneyRequest) that);
        return false;
    }

    public boolean equals(LockMoneyRequest that) {
        if (that == null)
            return false;

        boolean this_present_username = true && this.isSetUsername();
        boolean that_present_username = true && that.isSetUsername();
        if (this_present_username || that_present_username) {
            if (!(this_present_username && that_present_username))
                return false;
            if (!this.username.equals(that.username))
                return false;
        }

        boolean this_present_orderId = true && this.isSetOrderId();
        boolean that_present_orderId = true && that.isSetOrderId();
        if (this_present_orderId || that_present_orderId) {
            if (!(this_present_orderId && that_present_orderId))
                return false;
            if (!this.orderId.equals(that.orderId))
                return false;
        }

        boolean this_present_product = true && this.isSetProduct();
        boolean that_present_product = true && that.isSetProduct();
        if (this_present_product || that_present_product) {
            if (!(this_present_product && that_present_product))
                return false;
            if (!this.product.equals(that.product))
                return false;
        }

        boolean this_present_money = true && this.isSetMoney();
        boolean that_present_money = true && that.isSetMoney();
        if (this_present_money || that_present_money) {
            if (!(this_present_money && that_present_money))
                return false;
            if (!this.money.equals(that.money))
                return false;
        }

        boolean this_present_userIp = true && this.isSetUserIp();
        boolean that_present_userIp = true && that.isSetUserIp();
        if (this_present_userIp || that_present_userIp) {
            if (!(this_present_userIp && that_present_userIp))
                return false;
            if (!this.userIp.equals(that.userIp))
                return false;
        }

        boolean this_present_server = true && this.isSetServer();
        boolean that_present_server = true && that.isSetServer();
        if (this_present_server || that_present_server) {
            if (!(this_present_server && that_present_server))
                return false;
            if (!this.server.equals(that.server))
                return false;
        }

        boolean this_present_lockTime = true && this.isSetLockTime();
        boolean that_present_lockTime = true && that.isSetLockTime();
        if (this_present_lockTime || that_present_lockTime) {
            if (!(this_present_lockTime && that_present_lockTime))
                return false;
            if (!this.lockTime.equals(that.lockTime))
                return false;
        }

        boolean this_present_goodsName = true && this.isSetGoodsName();
        boolean that_present_goodsName = true && that.isSetGoodsName();
        if (this_present_goodsName || that_present_goodsName) {
            if (!(this_present_goodsName && that_present_goodsName))
                return false;
            if (!this.goodsName.equals(that.goodsName))
                return false;
        }

        boolean this_present_description = true && this.isSetDescription();
        boolean that_present_description = true && that.isSetDescription();
        if (this_present_description || that_present_description) {
            if (!(this_present_description && that_present_description))
                return false;
            if (!this.description.equals(that.description))
                return false;
        }

        boolean this_present_sign = true && this.isSetSign();
        boolean that_present_sign = true && that.isSetSign();
        if (this_present_sign || that_present_sign) {
            if (!(this_present_sign && that_present_sign))
                return false;
            if (!this.sign.equals(that.sign))
                return false;
        }

        boolean this_present_autoUnlockTime = true && this.isSetAutoUnlockTime();
        boolean that_present_autoUnlockTime = true && that.isSetAutoUnlockTime();
        if (this_present_autoUnlockTime || that_present_autoUnlockTime) {
            if (!(this_present_autoUnlockTime && that_present_autoUnlockTime))
                return false;
            if (!this.autoUnlockTime.equals(that.autoUnlockTime))
                return false;
        }

        boolean this_present_consumeTargetProduct = true && this.isSetConsumeTargetProduct();
        boolean that_present_consumeTargetProduct = true && that.isSetConsumeTargetProduct();
        if (this_present_consumeTargetProduct || that_present_consumeTargetProduct) {
            if (!(this_present_consumeTargetProduct && that_present_consumeTargetProduct))
                return false;
            if (!this.consumeTargetProduct.equals(that.consumeTargetProduct))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(LockMoneyRequest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        LockMoneyRequest typedOther = (LockMoneyRequest) other;

        lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUsername()) {
            lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOrderId()) {
            lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetProduct()) {
            lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMoney()).compareTo(typedOther.isSetMoney());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMoney()) {
            lastComparison = TBaseHelper.compareTo(this.money, typedOther.money);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUserIp()).compareTo(typedOther.isSetUserIp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserIp()) {
            lastComparison = TBaseHelper.compareTo(this.userIp, typedOther.userIp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetServer()).compareTo(typedOther.isSetServer());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetServer()) {
            lastComparison = TBaseHelper.compareTo(this.server, typedOther.server);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLockTime()).compareTo(typedOther.isSetLockTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLockTime()) {
            lastComparison = TBaseHelper.compareTo(this.lockTime, typedOther.lockTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGoodsName()).compareTo(typedOther.isSetGoodsName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGoodsName()) {
            lastComparison = TBaseHelper.compareTo(this.goodsName, typedOther.goodsName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDescription()) {
            lastComparison = TBaseHelper.compareTo(this.description, typedOther.description);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSign()) {
            lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAutoUnlockTime()).compareTo(typedOther.isSetAutoUnlockTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAutoUnlockTime()) {
            lastComparison = TBaseHelper.compareTo(this.autoUnlockTime, typedOther.autoUnlockTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetConsumeTargetProduct()).compareTo(typedOther.isSetConsumeTargetProduct());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetConsumeTargetProduct()) {
            lastComparison = TBaseHelper.compareTo(this.consumeTargetProduct, typedOther.consumeTargetProduct);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // USERNAME
                if (field.type == TType.STRING) {
                    this.username = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // ORDER_ID
                if (field.type == TType.STRING) {
                    this.orderId = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // PRODUCT
                if (field.type == TType.STRING) {
                    this.product = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4: // MONEY
                if (field.type == TType.STRING) {
                    this.money = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 5: // USER_IP
                if (field.type == TType.STRING) {
                    this.userIp = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 6: // SERVER
                if (field.type == TType.STRING) {
                    this.server = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 7: // LOCK_TIME
                if (field.type == TType.STRING) {
                    this.lockTime = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 8: // GOODS_NAME
                if (field.type == TType.STRING) {
                    this.goodsName = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 9: // DESCRIPTION
                if (field.type == TType.STRING) {
                    this.description = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 10: // SIGN
                if (field.type == TType.STRING) {
                    this.sign = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 11: // AUTO_UNLOCK_TIME
                if (field.type == TType.STRING) {
                    this.autoUnlockTime = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 12: // CONSUME_TARGET_PRODUCT
                if (field.type == TType.STRING) {
                    this.consumeTargetProduct = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.username != null) {
            oprot.writeFieldBegin(USERNAME_FIELD_DESC);
            oprot.writeString(this.username);
            oprot.writeFieldEnd();
        }
        if (this.orderId != null) {
            oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
            oprot.writeString(this.orderId);
            oprot.writeFieldEnd();
        }
        if (this.product != null) {
            oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
            oprot.writeString(this.product);
            oprot.writeFieldEnd();
        }
        if (this.money != null) {
            oprot.writeFieldBegin(MONEY_FIELD_DESC);
            oprot.writeString(this.money);
            oprot.writeFieldEnd();
        }
        if (this.userIp != null) {
            oprot.writeFieldBegin(USER_IP_FIELD_DESC);
            oprot.writeString(this.userIp);
            oprot.writeFieldEnd();
        }
        if (this.server != null) {
            oprot.writeFieldBegin(SERVER_FIELD_DESC);
            oprot.writeString(this.server);
            oprot.writeFieldEnd();
        }
        if (this.lockTime != null) {
            oprot.writeFieldBegin(LOCK_TIME_FIELD_DESC);
            oprot.writeString(this.lockTime);
            oprot.writeFieldEnd();
        }
        if (this.goodsName != null) {
            oprot.writeFieldBegin(GOODS_NAME_FIELD_DESC);
            oprot.writeString(this.goodsName);
            oprot.writeFieldEnd();
        }
        if (this.description != null) {
            oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
            oprot.writeString(this.description);
            oprot.writeFieldEnd();
        }
        if (this.sign != null) {
            oprot.writeFieldBegin(SIGN_FIELD_DESC);
            oprot.writeString(this.sign);
            oprot.writeFieldEnd();
        }
        if (this.autoUnlockTime != null) {
            if (isSetAutoUnlockTime()) {
                oprot.writeFieldBegin(AUTO_UNLOCK_TIME_FIELD_DESC);
                oprot.writeString(this.autoUnlockTime);
                oprot.writeFieldEnd();
            }
        }
        if (this.consumeTargetProduct != null) {
            if (isSetConsumeTargetProduct()) {
                oprot.writeFieldBegin(CONSUME_TARGET_PRODUCT_FIELD_DESC);
                oprot.writeString(this.consumeTargetProduct);
                oprot.writeFieldEnd();
            }
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("LockMoneyRequest(");
        boolean first = true;

        sb.append("username:");
        if (this.username == null) {
            sb.append("null");
        } else {
            sb.append(this.username);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("orderId:");
        if (this.orderId == null) {
            sb.append("null");
        } else {
            sb.append(this.orderId);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("product:");
        if (this.product == null) {
            sb.append("null");
        } else {
            sb.append(this.product);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("money:");
        if (this.money == null) {
            sb.append("null");
        } else {
            sb.append(this.money);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("userIp:");
        if (this.userIp == null) {
            sb.append("null");
        } else {
            sb.append(this.userIp);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("server:");
        if (this.server == null) {
            sb.append("null");
        } else {
            sb.append(this.server);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("lockTime:");
        if (this.lockTime == null) {
            sb.append("null");
        } else {
            sb.append(this.lockTime);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("goodsName:");
        if (this.goodsName == null) {
            sb.append("null");
        } else {
            sb.append(this.goodsName);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("description:");
        if (this.description == null) {
            sb.append("null");
        } else {
            sb.append(this.description);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("sign:");
        if (this.sign == null) {
            sb.append("null");
        } else {
            sb.append(this.sign);
        }
        first = false;
        if (isSetAutoUnlockTime()) {
            if (!first)
                sb.append(", ");
            sb.append("autoUnlockTime:");
            if (this.autoUnlockTime == null) {
                sb.append("null");
            } else {
                sb.append(this.autoUnlockTime);
            }
            first = false;
        }
        if (isSetConsumeTargetProduct()) {
            if (!first)
                sb.append(", ");
            sb.append("consumeTargetProduct:");
            if (this.consumeTargetProduct == null) {
                sb.append("null");
            } else {
                sb.append(this.consumeTargetProduct);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
    }

}

package com.guzhi.pay.thrift.udb.gen;

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class VerifyAppTokenReq2 implements TBase<VerifyAppTokenReq2, VerifyAppTokenReq2._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("VerifyAppTokenReq2");

  private static final TField CONTEXT_FIELD_DESC = new TField("context", TType.STRING, (short)1);
  private static final TField APPID_FIELD_DESC = new TField("appid", TType.STRING, (short)2);
  private static final TField gbUID_FIELD_DESC = new TField("gbuid", TType.I32, (short)3);
  private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)4);
  private static final TField EXTRA_FIELD_DESC = new TField("extra", TType.STRING, (short)5);
  private static final TField EXTRA2_FIELD_DESC = new TField("extra2", TType.STRING, (short)6);
  private static final TField ENCODING_TYPE_FIELD_DESC = new TField("encoding_type", TType.I32, (short)7);

  public String context;
  public String appid;
  public int gbuid;
  public String token;
  public String extra;
  public String extra2;
  /**
   * 
   * @see TokenEncodingType
   */
  public TokenEncodingType encoding_type;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CONTEXT((short)1, "context"),
    APPID((short)2, "appid"),
    gbUID((short)3, "gbuid"),
    TOKEN((short)4, "token"),
    EXTRA((short)5, "extra"),
    EXTRA2((short)6, "extra2"),
    /**
     * 
     * @see TokenEncodingType
     */
    ENCODING_TYPE((short)7, "encoding_type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTEXT
          return CONTEXT;
        case 2: // APPID
          return APPID;
        case 3: // gbUID
          return gbUID;
        case 4: // TOKEN
          return TOKEN;
        case 5: // EXTRA
          return EXTRA;
        case 6: // EXTRA2
          return EXTRA2;
        case 7: // ENCODING_TYPE
          return ENCODING_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __gbUID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTEXT, new FieldMetaData("context", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.APPID, new FieldMetaData("appid", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.gbUID, new FieldMetaData("gbuid", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXTRA, new FieldMetaData("extra", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXTRA2, new FieldMetaData("extra2", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ENCODING_TYPE, new FieldMetaData("encoding_type", TFieldRequirementType.OPTIONAL, 
        new EnumMetaData(TType.ENUM, TokenEncodingType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(VerifyAppTokenReq2.class, metaDataMap);
  }

  public VerifyAppTokenReq2() {
    this.encoding_type = TokenEncodingType.BASE64;

  }

  public VerifyAppTokenReq2(
    String context,
    String appid,
    int gbuid,
    String token,
    String extra,
    String extra2)
  {
    this();
    this.context = context;
    this.appid = appid;
    this.gbuid = gbuid;
    setgbuidIsSet(true);
    this.token = token;
    this.extra = extra;
    this.extra2 = extra2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VerifyAppTokenReq2(VerifyAppTokenReq2 other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetContext()) {
      this.context = other.context;
    }
    if (other.isSetAppid()) {
      this.appid = other.appid;
    }
    this.gbuid = other.gbuid;
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetExtra()) {
      this.extra = other.extra;
    }
    if (other.isSetExtra2()) {
      this.extra2 = other.extra2;
    }
    if (other.isSetEncoding_type()) {
      this.encoding_type = other.encoding_type;
    }
  }

  public VerifyAppTokenReq2 deepCopy() {
    return new VerifyAppTokenReq2(this);
  }

  @Override
  public void clear() {
    this.context = null;
    this.appid = null;
    setgbuidIsSet(false);
    this.gbuid = 0;
    this.token = null;
    this.extra = null;
    this.extra2 = null;
    this.encoding_type = TokenEncodingType.BASE64;

  }

  public String getContext() {
    return this.context;
  }

  public VerifyAppTokenReq2 setContext(String context) {
    this.context = context;
    return this;
  }

  public void unsetContext() {
    this.context = null;
  }

  /** Returns true if field context is set (has been asigned a value) and false otherwise */
  public boolean isSetContext() {
    return this.context != null;
  }

  public void setContextIsSet(boolean value) {
    if (!value) {
      this.context = null;
    }
  }

  public String getAppid() {
    return this.appid;
  }

  public VerifyAppTokenReq2 setAppid(String appid) {
    this.appid = appid;
    return this;
  }

  public void unsetAppid() {
    this.appid = null;
  }

  /** Returns true if field appid is set (has been asigned a value) and false otherwise */
  public boolean isSetAppid() {
    return this.appid != null;
  }

  public void setAppidIsSet(boolean value) {
    if (!value) {
      this.appid = null;
    }
  }

  public int getgbuid() {
    return this.gbuid;
  }

  public VerifyAppTokenReq2 setgbuid(int gbuid) {
    this.gbuid = gbuid;
    setgbuidIsSet(true);
    return this;
  }

  public void unsetgbuid() {
    __isset_bit_vector.clear(__gbUID_ISSET_ID);
  }

  /** Returns true if field gbuid is set (has been asigned a value) and false otherwise */
  public boolean isSetgbuid() {
    return __isset_bit_vector.get(__gbUID_ISSET_ID);
  }

  public void setgbuidIsSet(boolean value) {
    __isset_bit_vector.set(__gbUID_ISSET_ID, value);
  }

  public String getToken() {
    return this.token;
  }

  public VerifyAppTokenReq2 setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been asigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public String getExtra() {
    return this.extra;
  }

  public VerifyAppTokenReq2 setExtra(String extra) {
    this.extra = extra;
    return this;
  }

  public void unsetExtra() {
    this.extra = null;
  }

  /** Returns true if field extra is set (has been asigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.extra = null;
    }
  }

  public String getExtra2() {
    return this.extra2;
  }

  public VerifyAppTokenReq2 setExtra2(String extra2) {
    this.extra2 = extra2;
    return this;
  }

  public void unsetExtra2() {
    this.extra2 = null;
  }

  /** Returns true if field extra2 is set (has been asigned a value) and false otherwise */
  public boolean isSetExtra2() {
    return this.extra2 != null;
  }

  public void setExtra2IsSet(boolean value) {
    if (!value) {
      this.extra2 = null;
    }
  }

  /**
   * 
   * @see TokenEncodingType
   */
  public TokenEncodingType getEncoding_type() {
    return this.encoding_type;
  }

  /**
   * 
   * @see TokenEncodingType
   */
  public VerifyAppTokenReq2 setEncoding_type(TokenEncodingType encoding_type) {
    this.encoding_type = encoding_type;
    return this;
  }

  public void unsetEncoding_type() {
    this.encoding_type = null;
  }

  /** Returns true if field encoding_type is set (has been asigned a value) and false otherwise */
  public boolean isSetEncoding_type() {
    return this.encoding_type != null;
  }

  public void setEncoding_typeIsSet(boolean value) {
    if (!value) {
      this.encoding_type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTEXT:
      if (value == null) {
        unsetContext();
      } else {
        setContext((String)value);
      }
      break;

    case APPID:
      if (value == null) {
        unsetAppid();
      } else {
        setAppid((String)value);
      }
      break;

    case gbUID:
      if (value == null) {
        unsetgbuid();
      } else {
        setgbuid((Integer)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case EXTRA:
      if (value == null) {
        unsetExtra();
      } else {
        setExtra((String)value);
      }
      break;

    case EXTRA2:
      if (value == null) {
        unsetExtra2();
      } else {
        setExtra2((String)value);
      }
      break;

    case ENCODING_TYPE:
      if (value == null) {
        unsetEncoding_type();
      } else {
        setEncoding_type((TokenEncodingType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTEXT:
      return getContext();

    case APPID:
      return getAppid();

    case gbUID:
      return new Integer(getgbuid());

    case TOKEN:
      return getToken();

    case EXTRA:
      return getExtra();

    case EXTRA2:
      return getExtra2();

    case ENCODING_TYPE:
      return getEncoding_type();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTEXT:
      return isSetContext();
    case APPID:
      return isSetAppid();
    case gbUID:
      return isSetgbuid();
    case TOKEN:
      return isSetToken();
    case EXTRA:
      return isSetExtra();
    case EXTRA2:
      return isSetExtra2();
    case ENCODING_TYPE:
      return isSetEncoding_type();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VerifyAppTokenReq2)
      return this.equals((VerifyAppTokenReq2)that);
    return false;
  }

  public boolean equals(VerifyAppTokenReq2 that) {
    if (that == null)
      return false;

    boolean this_present_context = true && this.isSetContext();
    boolean that_present_context = true && that.isSetContext();
    if (this_present_context || that_present_context) {
      if (!(this_present_context && that_present_context))
        return false;
      if (!this.context.equals(that.context))
        return false;
    }

    boolean this_present_appid = true && this.isSetAppid();
    boolean that_present_appid = true && that.isSetAppid();
    if (this_present_appid || that_present_appid) {
      if (!(this_present_appid && that_present_appid))
        return false;
      if (!this.appid.equals(that.appid))
        return false;
    }

    boolean this_present_gbuid = true;
    boolean that_present_gbuid = true;
    if (this_present_gbuid || that_present_gbuid) {
      if (!(this_present_gbuid && that_present_gbuid))
        return false;
      if (this.gbuid != that.gbuid)
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_extra = true && this.isSetExtra();
    boolean that_present_extra = true && that.isSetExtra();
    if (this_present_extra || that_present_extra) {
      if (!(this_present_extra && that_present_extra))
        return false;
      if (!this.extra.equals(that.extra))
        return false;
    }

    boolean this_present_extra2 = true && this.isSetExtra2();
    boolean that_present_extra2 = true && that.isSetExtra2();
    if (this_present_extra2 || that_present_extra2) {
      if (!(this_present_extra2 && that_present_extra2))
        return false;
      if (!this.extra2.equals(that.extra2))
        return false;
    }

    boolean this_present_encoding_type = true && this.isSetEncoding_type();
    boolean that_present_encoding_type = true && that.isSetEncoding_type();
    if (this_present_encoding_type || that_present_encoding_type) {
      if (!(this_present_encoding_type && that_present_encoding_type))
        return false;
      if (!this.encoding_type.equals(that.encoding_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(VerifyAppTokenReq2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    VerifyAppTokenReq2 typedOther = (VerifyAppTokenReq2)other;

    lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContext()) {      lastComparison = TBaseHelper.compareTo(this.context, typedOther.context);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppid()).compareTo(typedOther.isSetAppid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppid()) {      lastComparison = TBaseHelper.compareTo(this.appid, typedOther.appid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetgbuid()).compareTo(typedOther.isSetgbuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetgbuid()) {      lastComparison = TBaseHelper.compareTo(this.gbuid, typedOther.gbuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {      lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtra()).compareTo(typedOther.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {      lastComparison = TBaseHelper.compareTo(this.extra, typedOther.extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtra2()).compareTo(typedOther.isSetExtra2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra2()) {      lastComparison = TBaseHelper.compareTo(this.extra2, typedOther.extra2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncoding_type()).compareTo(typedOther.isSetEncoding_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoding_type()) {      lastComparison = TBaseHelper.compareTo(this.encoding_type, typedOther.encoding_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CONTEXT
          if (field.type == TType.STRING) {
            this.context = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // APPID
          if (field.type == TType.STRING) {
            this.appid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // gbUID
          if (field.type == TType.I32) {
            this.gbuid = iprot.readI32();
            setgbuidIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TOKEN
          if (field.type == TType.STRING) {
            this.token = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // EXTRA
          if (field.type == TType.STRING) {
            this.extra = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // EXTRA2
          if (field.type == TType.STRING) {
            this.extra2 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // ENCODING_TYPE
          if (field.type == TType.I32) {
            this.encoding_type = TokenEncodingType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.context != null) {
      oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
      oprot.writeString(this.context);
      oprot.writeFieldEnd();
    }
    if (this.appid != null) {
      oprot.writeFieldBegin(APPID_FIELD_DESC);
      oprot.writeString(this.appid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(gbUID_FIELD_DESC);
    oprot.writeI32(this.gbuid);
    oprot.writeFieldEnd();
    if (this.token != null) {
      oprot.writeFieldBegin(TOKEN_FIELD_DESC);
      oprot.writeString(this.token);
      oprot.writeFieldEnd();
    }
    if (this.extra != null) {
      oprot.writeFieldBegin(EXTRA_FIELD_DESC);
      oprot.writeString(this.extra);
      oprot.writeFieldEnd();
    }
    if (this.extra2 != null) {
      oprot.writeFieldBegin(EXTRA2_FIELD_DESC);
      oprot.writeString(this.extra2);
      oprot.writeFieldEnd();
    }
    if (this.encoding_type != null) {
      if (isSetEncoding_type()) {
        oprot.writeFieldBegin(ENCODING_TYPE_FIELD_DESC);
        oprot.writeI32(this.encoding_type.getValue());
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VerifyAppTokenReq2(");
    boolean first = true;

    sb.append("context:");
    if (this.context == null) {
      sb.append("null");
    } else {
      sb.append(this.context);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appid:");
    if (this.appid == null) {
      sb.append("null");
    } else {
      sb.append(this.appid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gbuid:");
    sb.append(this.gbuid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extra:");
    if (this.extra == null) {
      sb.append("null");
    } else {
      sb.append(this.extra);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extra2:");
    if (this.extra2 == null) {
      sb.append("null");
    } else {
      sb.append(this.extra2);
    }
    first = false;
    if (isSetEncoding_type()) {
      if (!first) sb.append(", ");
      sb.append("encoding_type:");
      if (this.encoding_type == null) {
        sb.append("null");
      } else {
        sb.append(this.encoding_type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}


/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * 原始订单信息，扣费的时候要传入原始订单信息，原因：
 * （1）有些系统生成订单是一个独立的服务，在这里传入原始订单信息，防止调用方因程序bug导致扣费的参数和原始订单不一致；
 * （2）分清责任，调用方保证参数的正确性，如果参数传输错误，调用方对此负责；
 * （3）更好的做法是，调用放提供一个查询接口给充值系统查询原始订单信息。公司购买的IDC多种多样，各个IDC之间的网络不太稳定，这样做的效率较低；
 */
public class OriginalOrder implements TBase<OriginalOrder, OriginalOrder._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("OriginalOrder");

    private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short) 1);
    private static final TField MONEY_FIELD_DESC = new TField("money", TType.STRING, (short) 2);
    private static final TField MONEY_TYPE_FIELD_DESC = new TField("moneyType", TType.I32, (short) 3);

    /**
     * 订单ID
     */
    public String orderId;
    /**
     * 扣除的多玩币，单位：元，最小单位：0.01元
     */
    public String money;
    /**
     * 货币类型
     */
    public int moneyType;

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        /**
         * 订单ID
         */
        ORDER_ID((short) 1, "orderId"),
        /**
         * 扣除的多玩币，单位：元，最小单位：0.01元
         */
        MONEY((short) 2, "money"),
        /**
         * 货币类型
         */
        MONEY_TYPE((short) 3, "moneyType");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // ORDER_ID
                return ORDER_ID;
            case 2: // MONEY
                return MONEY;
            case 3: // MONEY_TYPE
                return MONEY_TYPE;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __MONEYTYPE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.MONEY, new FieldMetaData("money", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.MONEY_TYPE, new FieldMetaData("moneyType", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(OriginalOrder.class, metaDataMap);
    }

    public OriginalOrder() {
    }

    public OriginalOrder(String orderId, String money, int moneyType) {
        this();
        this.orderId = orderId;
        this.money = money;
        this.moneyType = moneyType;
        setMoneyTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OriginalOrder(OriginalOrder other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetOrderId()) {
            this.orderId = other.orderId;
        }
        if (other.isSetMoney()) {
            this.money = other.money;
        }
        this.moneyType = other.moneyType;
    }

    public OriginalOrder deepCopy() {
        return new OriginalOrder(this);
    }

    @Override
    public void clear() {
        this.orderId = null;
        this.money = null;
        setMoneyTypeIsSet(false);
        this.moneyType = 0;
    }

    /**
     * 订单ID
     */
    public String getOrderId() {
        return this.orderId;
    }

    /**
     * 订单ID
     */
    public OriginalOrder setOrderId(String orderId) {
        this.orderId = orderId;
        return this;
    }

    public void unsetOrderId() {
        this.orderId = null;
    }

    /**
     * Returns true if field orderId is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetOrderId() {
        return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
        if (!value) {
            this.orderId = null;
        }
    }

    /**
     * 扣除的多玩币，单位：元，最小单位：0.01元
     */
    public String getMoney() {
        return this.money;
    }

    /**
     * 扣除的多玩币，单位：元，最小单位：0.01元
     */
    public OriginalOrder setMoney(String money) {
        this.money = money;
        return this;
    }

    public void unsetMoney() {
        this.money = null;
    }

    /**
     * Returns true if field money is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetMoney() {
        return this.money != null;
    }

    public void setMoneyIsSet(boolean value) {
        if (!value) {
            this.money = null;
        }
    }

    /**
     * 货币类型
     */
    public int getMoneyType() {
        return this.moneyType;
    }

    /**
     * 货币类型
     */
    public OriginalOrder setMoneyType(int moneyType) {
        this.moneyType = moneyType;
        setMoneyTypeIsSet(true);
        return this;
    }

    public void unsetMoneyType() {
        __isset_bit_vector.clear(__MONEYTYPE_ISSET_ID);
    }

    /**
     * Returns true if field moneyType is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetMoneyType() {
        return __isset_bit_vector.get(__MONEYTYPE_ISSET_ID);
    }

    public void setMoneyTypeIsSet(boolean value) {
        __isset_bit_vector.set(__MONEYTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case ORDER_ID:
            if (value == null) {
                unsetOrderId();
            } else {
                setOrderId((String) value);
            }
            break;

        case MONEY:
            if (value == null) {
                unsetMoney();
            } else {
                setMoney((String) value);
            }
            break;

        case MONEY_TYPE:
            if (value == null) {
                unsetMoneyType();
            } else {
                setMoneyType((Integer) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case ORDER_ID:
            return getOrderId();

        case MONEY:
            return getMoney();

        case MONEY_TYPE:
            return new Integer(getMoneyType());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case ORDER_ID:
            return isSetOrderId();
        case MONEY:
            return isSetMoney();
        case MONEY_TYPE:
            return isSetMoneyType();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof OriginalOrder)
            return this.equals((OriginalOrder) that);
        return false;
    }

    public boolean equals(OriginalOrder that) {
        if (that == null)
            return false;

        boolean this_present_orderId = true && this.isSetOrderId();
        boolean that_present_orderId = true && that.isSetOrderId();
        if (this_present_orderId || that_present_orderId) {
            if (!(this_present_orderId && that_present_orderId))
                return false;
            if (!this.orderId.equals(that.orderId))
                return false;
        }

        boolean this_present_money = true && this.isSetMoney();
        boolean that_present_money = true && that.isSetMoney();
        if (this_present_money || that_present_money) {
            if (!(this_present_money && that_present_money))
                return false;
            if (!this.money.equals(that.money))
                return false;
        }

        boolean this_present_moneyType = true;
        boolean that_present_moneyType = true;
        if (this_present_moneyType || that_present_moneyType) {
            if (!(this_present_moneyType && that_present_moneyType))
                return false;
            if (this.moneyType != that.moneyType)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(OriginalOrder other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        OriginalOrder typedOther = (OriginalOrder) other;

        lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOrderId()) {
            lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMoney()).compareTo(typedOther.isSetMoney());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMoney()) {
            lastComparison = TBaseHelper.compareTo(this.money, typedOther.money);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMoneyType()).compareTo(typedOther.isSetMoneyType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMoneyType()) {
            lastComparison = TBaseHelper.compareTo(this.moneyType, typedOther.moneyType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // ORDER_ID
                if (field.type == TType.STRING) {
                    this.orderId = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // MONEY
                if (field.type == TType.STRING) {
                    this.money = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // MONEY_TYPE
                if (field.type == TType.I32) {
                    this.moneyType = iprot.readI32();
                    setMoneyTypeIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        if (!isSetMoneyType()) {
            throw new TProtocolException("Required field 'moneyType' was not found in serialized data! Struct: "
                    + toString());
        }
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.orderId != null) {
            oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
            oprot.writeString(this.orderId);
            oprot.writeFieldEnd();
        }
        if (this.money != null) {
            oprot.writeFieldBegin(MONEY_FIELD_DESC);
            oprot.writeString(this.money);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MONEY_TYPE_FIELD_DESC);
        oprot.writeI32(this.moneyType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("OriginalOrder(");
        boolean first = true;

        sb.append("orderId:");
        if (this.orderId == null) {
            sb.append("null");
        } else {
            sb.append(this.orderId);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("money:");
        if (this.money == null) {
            sb.append("null");
        } else {
            sb.append(this.money);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("moneyType:");
        sb.append(this.moneyType);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        if (orderId == null) {
            throw new TProtocolException("Required field 'orderId' was not present! Struct: " + toString());
        }
        if (money == null) {
            throw new TProtocolException("Required field 'money' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'moneyType' because it's a primitive and you
        // chose the non-beans generator.
    }

}

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * 增加佣金的参数
 */
public class AddCommissionRequest implements TBase<AddCommissionRequest, AddCommissionRequest._Fields>,
        java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("AddCommissionRequest");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short) 1);
    private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short) 2);
    private static final TField gb_CHANNEL_ID_FIELD_DESC = new TField("gbChannelId", TType.I64, (short) 3);
    private static final TField MONEY_FIELD_DESC = new TField("money", TType.STRING, (short) 4);
    private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 5);
    private static final TField ADD_TIME_FIELD_DESC = new TField("addTime", TType.STRING, (short) 6);
    private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short) 7);
    private static final TField FROM_USER_FIELD_DESC = new TField("fromUser", TType.STRING, (short) 8);
    private static final TField TOTAL_MONEY_FIELD_DESC = new TField("totalMoney", TType.STRING, (short) 9);
    private static final TField GOODS_NAME_FIELD_DESC = new TField("goodsName", TType.STRING, (short) 10);
    private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 11);
    private static final TField EFFECTIVE_TIME_FIELD_DESC = new TField("effectiveTime", TType.STRING, (short) 12);

    /**
     * 账号
     */
    public String username;
    /**
     * 订单号
     */
    public String orderId;
    /**
     * gb频道ID
     */
    public long gbChannelId;
    /**
     * 增加的佣金，单位：元，最小单位：0.01元
     */
    public String money;
    /**
     * 产品名称
     */
    public String product;
    /**
     * 增加佣金的时间
     */
    public String addTime;
    /**
     * 描述，最长100个字符
     */
    public String description;
    /**
     * 佣金从哪个账号的消费得来
     */
    public String fromUser;
    /**
     * 产生佣金的物品的总价值（元），必须大于等于money
     */
    public String totalMoney;
    /**
     * 产生佣金的物品名称
     */
    public String goodsName;
    /**
     * md5校验码
     */
    public String sign;
    /**
     * 生效时间，格式: gbgbMMddHHmmss
     */
    public String effectiveTime;

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        /**
         * 账号
         */
        USERNAME((short) 1, "username"),
        /**
         * 订单号
         */
        ORDER_ID((short) 2, "orderId"),
        /**
         * gb频道ID
         */
        gb_CHANNEL_ID((short) 3, "gbChannelId"),
        /**
         * 增加的佣金，单位：元，最小单位：0.01元
         */
        MONEY((short) 4, "money"),
        /**
         * 产品名称
         */
        PRODUCT((short) 5, "product"),
        /**
         * 增加佣金的时间
         */
        ADD_TIME((short) 6, "addTime"),
        /**
         * 描述，最长100个字符
         */
        DESCRIPTION((short) 7, "description"),
        /**
         * 佣金从哪个账号的消费得来
         */
        FROM_USER((short) 8, "fromUser"),
        /**
         * 产生佣金的物品的总价值（元），必须大于等于money
         */
        TOTAL_MONEY((short) 9, "totalMoney"),
        /**
         * 产生佣金的物品名称
         */
        GOODS_NAME((short) 10, "goodsName"),
        /**
         * md5校验码
         */
        SIGN((short) 11, "sign"),
        /**
         * 生效时间，格式: gbgbMMddHHmmss
         */
        EFFECTIVE_TIME((short) 12, "effectiveTime");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // USERNAME
                return USERNAME;
            case 2: // ORDER_ID
                return ORDER_ID;
            case 3: // gb_CHANNEL_ID
                return gb_CHANNEL_ID;
            case 4: // MONEY
                return MONEY;
            case 5: // PRODUCT
                return PRODUCT;
            case 6: // ADD_TIME
                return ADD_TIME;
            case 7: // DESCRIPTION
                return DESCRIPTION;
            case 8: // FROM_USER
                return FROM_USER;
            case 9: // TOTAL_MONEY
                return TOTAL_MONEY;
            case 10: // GOODS_NAME
                return GOODS_NAME;
            case 11: // SIGN
                return SIGN;
            case 12: // EFFECTIVE_TIME
                return EFFECTIVE_TIME;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __gbCHANNELID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.gb_CHANNEL_ID, new FieldMetaData("gbChannelId", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.I64)));
        tmpMap.put(_Fields.MONEY, new FieldMetaData("money", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.ADD_TIME, new FieldMetaData("addTime", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.DESCRIPTION, new FieldMetaData("description", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.FROM_USER, new FieldMetaData("fromUser", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.TOTAL_MONEY, new FieldMetaData("totalMoney", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.GOODS_NAME, new FieldMetaData("goodsName", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.EFFECTIVE_TIME, new FieldMetaData("effectiveTime", TFieldRequirementType.OPTIONAL,
                new FieldValueMetaData(TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(AddCommissionRequest.class, metaDataMap);
    }

    public AddCommissionRequest() {
    }

    public AddCommissionRequest(String username, String orderId, long gbChannelId, String money, String product,
            String addTime, String description, String fromUser, String totalMoney, String goodsName, String sign) {
        this();
        this.username = username;
        this.orderId = orderId;
        this.gbChannelId = gbChannelId;
        setgbChannelIdIsSet(true);
        this.money = money;
        this.product = product;
        this.addTime = addTime;
        this.description = description;
        this.fromUser = fromUser;
        this.totalMoney = totalMoney;
        this.goodsName = goodsName;
        this.sign = sign;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddCommissionRequest(AddCommissionRequest other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetUsername()) {
            this.username = other.username;
        }
        if (other.isSetOrderId()) {
            this.orderId = other.orderId;
        }
        this.gbChannelId = other.gbChannelId;
        if (other.isSetMoney()) {
            this.money = other.money;
        }
        if (other.isSetProduct()) {
            this.product = other.product;
        }
        if (other.isSetAddTime()) {
            this.addTime = other.addTime;
        }
        if (other.isSetDescription()) {
            this.description = other.description;
        }
        if (other.isSetFromUser()) {
            this.fromUser = other.fromUser;
        }
        if (other.isSetTotalMoney()) {
            this.totalMoney = other.totalMoney;
        }
        if (other.isSetGoodsName()) {
            this.goodsName = other.goodsName;
        }
        if (other.isSetSign()) {
            this.sign = other.sign;
        }
        if (other.isSetEffectiveTime()) {
            this.effectiveTime = other.effectiveTime;
        }
    }

    public AddCommissionRequest deepCopy() {
        return new AddCommissionRequest(this);
    }

    @Override
    public void clear() {
        this.username = null;
        this.orderId = null;
        setgbChannelIdIsSet(false);
        this.gbChannelId = 0;
        this.money = null;
        this.product = null;
        this.addTime = null;
        this.description = null;
        this.fromUser = null;
        this.totalMoney = null;
        this.goodsName = null;
        this.sign = null;
        this.effectiveTime = null;
    }

    /**
     * 账号
     */
    public String getUsername() {
        return this.username;
    }

    /**
     * 账号
     */
    public AddCommissionRequest setUsername(String username) {
        this.username = username;
        return this;
    }

    public void unsetUsername() {
        this.username = null;
    }

    /**
     * Returns true if field username is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetUsername() {
        return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
        if (!value) {
            this.username = null;
        }
    }

    /**
     * 订单号
     */
    public String getOrderId() {
        return this.orderId;
    }

    /**
     * 订单号
     */
    public AddCommissionRequest setOrderId(String orderId) {
        this.orderId = orderId;
        return this;
    }

    public void unsetOrderId() {
        this.orderId = null;
    }

    /**
     * Returns true if field orderId is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetOrderId() {
        return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
        if (!value) {
            this.orderId = null;
        }
    }

    /**
     * gb频道ID
     */
    public long getgbChannelId() {
        return this.gbChannelId;
    }

    /**
     * gb频道ID
     */
    public AddCommissionRequest setgbChannelId(long gbChannelId) {
        this.gbChannelId = gbChannelId;
        setgbChannelIdIsSet(true);
        return this;
    }

    public void unsetgbChannelId() {
        __isset_bit_vector.clear(__gbCHANNELID_ISSET_ID);
    }

    /**
     * Returns true if field gbChannelId is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetgbChannelId() {
        return __isset_bit_vector.get(__gbCHANNELID_ISSET_ID);
    }

    public void setgbChannelIdIsSet(boolean value) {
        __isset_bit_vector.set(__gbCHANNELID_ISSET_ID, value);
    }

    /**
     * 增加的佣金，单位：元，最小单位：0.01元
     */
    public String getMoney() {
        return this.money;
    }

    /**
     * 增加的佣金，单位：元，最小单位：0.01元
     */
    public AddCommissionRequest setMoney(String money) {
        this.money = money;
        return this;
    }

    public void unsetMoney() {
        this.money = null;
    }

    /**
     * Returns true if field money is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetMoney() {
        return this.money != null;
    }

    public void setMoneyIsSet(boolean value) {
        if (!value) {
            this.money = null;
        }
    }

    /**
     * 产品名称
     */
    public String getProduct() {
        return this.product;
    }

    /**
     * 产品名称
     */
    public AddCommissionRequest setProduct(String product) {
        this.product = product;
        return this;
    }

    public void unsetProduct() {
        this.product = null;
    }

    /**
     * Returns true if field product is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetProduct() {
        return this.product != null;
    }

    public void setProductIsSet(boolean value) {
        if (!value) {
            this.product = null;
        }
    }

    /**
     * 增加佣金的时间
     */
    public String getAddTime() {
        return this.addTime;
    }

    /**
     * 增加佣金的时间
     */
    public AddCommissionRequest setAddTime(String addTime) {
        this.addTime = addTime;
        return this;
    }

    public void unsetAddTime() {
        this.addTime = null;
    }

    /**
     * Returns true if field addTime is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetAddTime() {
        return this.addTime != null;
    }

    public void setAddTimeIsSet(boolean value) {
        if (!value) {
            this.addTime = null;
        }
    }

    /**
     * 描述，最长100个字符
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * 描述，最长100个字符
     */
    public AddCommissionRequest setDescription(String description) {
        this.description = description;
        return this;
    }

    public void unsetDescription() {
        this.description = null;
    }

    /**
     * Returns true if field description is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetDescription() {
        return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
        if (!value) {
            this.description = null;
        }
    }

    /**
     * 佣金从哪个账号的消费得来
     */
    public String getFromUser() {
        return this.fromUser;
    }

    /**
     * 佣金从哪个账号的消费得来
     */
    public AddCommissionRequest setFromUser(String fromUser) {
        this.fromUser = fromUser;
        return this;
    }

    public void unsetFromUser() {
        this.fromUser = null;
    }

    /**
     * Returns true if field fromUser is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetFromUser() {
        return this.fromUser != null;
    }

    public void setFromUserIsSet(boolean value) {
        if (!value) {
            this.fromUser = null;
        }
    }

    /**
     * 产生佣金的物品的总价值（元），必须大于等于money
     */
    public String getTotalMoney() {
        return this.totalMoney;
    }

    /**
     * 产生佣金的物品的总价值（元），必须大于等于money
     */
    public AddCommissionRequest setTotalMoney(String totalMoney) {
        this.totalMoney = totalMoney;
        return this;
    }

    public void unsetTotalMoney() {
        this.totalMoney = null;
    }

    /**
     * Returns true if field totalMoney is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetTotalMoney() {
        return this.totalMoney != null;
    }

    public void setTotalMoneyIsSet(boolean value) {
        if (!value) {
            this.totalMoney = null;
        }
    }

    /**
     * 产生佣金的物品名称
     */
    public String getGoodsName() {
        return this.goodsName;
    }

    /**
     * 产生佣金的物品名称
     */
    public AddCommissionRequest setGoodsName(String goodsName) {
        this.goodsName = goodsName;
        return this;
    }

    public void unsetGoodsName() {
        this.goodsName = null;
    }

    /**
     * Returns true if field goodsName is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetGoodsName() {
        return this.goodsName != null;
    }

    public void setGoodsNameIsSet(boolean value) {
        if (!value) {
            this.goodsName = null;
        }
    }

    /**
     * md5校验码
     */
    public String getSign() {
        return this.sign;
    }

    /**
     * md5校验码
     */
    public AddCommissionRequest setSign(String sign) {
        this.sign = sign;
        return this;
    }

    public void unsetSign() {
        this.sign = null;
    }

    /**
     * Returns true if field sign is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetSign() {
        return this.sign != null;
    }

    public void setSignIsSet(boolean value) {
        if (!value) {
            this.sign = null;
        }
    }

    /**
     * 生效时间，格式: gbgbMMddHHmmss
     */
    public String getEffectiveTime() {
        return this.effectiveTime;
    }

    /**
     * 生效时间，格式: gbgbMMddHHmmss
     */
    public AddCommissionRequest setEffectiveTime(String effectiveTime) {
        this.effectiveTime = effectiveTime;
        return this;
    }

    public void unsetEffectiveTime() {
        this.effectiveTime = null;
    }

    /**
     * Returns true if field effectiveTime is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetEffectiveTime() {
        return this.effectiveTime != null;
    }

    public void setEffectiveTimeIsSet(boolean value) {
        if (!value) {
            this.effectiveTime = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case USERNAME:
            if (value == null) {
                unsetUsername();
            } else {
                setUsername((String) value);
            }
            break;

        case ORDER_ID:
            if (value == null) {
                unsetOrderId();
            } else {
                setOrderId((String) value);
            }
            break;

        case gb_CHANNEL_ID:
            if (value == null) {
                unsetgbChannelId();
            } else {
                setgbChannelId((Long) value);
            }
            break;

        case MONEY:
            if (value == null) {
                unsetMoney();
            } else {
                setMoney((String) value);
            }
            break;

        case PRODUCT:
            if (value == null) {
                unsetProduct();
            } else {
                setProduct((String) value);
            }
            break;

        case ADD_TIME:
            if (value == null) {
                unsetAddTime();
            } else {
                setAddTime((String) value);
            }
            break;

        case DESCRIPTION:
            if (value == null) {
                unsetDescription();
            } else {
                setDescription((String) value);
            }
            break;

        case FROM_USER:
            if (value == null) {
                unsetFromUser();
            } else {
                setFromUser((String) value);
            }
            break;

        case TOTAL_MONEY:
            if (value == null) {
                unsetTotalMoney();
            } else {
                setTotalMoney((String) value);
            }
            break;

        case GOODS_NAME:
            if (value == null) {
                unsetGoodsName();
            } else {
                setGoodsName((String) value);
            }
            break;

        case SIGN:
            if (value == null) {
                unsetSign();
            } else {
                setSign((String) value);
            }
            break;

        case EFFECTIVE_TIME:
            if (value == null) {
                unsetEffectiveTime();
            } else {
                setEffectiveTime((String) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case USERNAME:
            return getUsername();

        case ORDER_ID:
            return getOrderId();

        case gb_CHANNEL_ID:
            return new Long(getgbChannelId());

        case MONEY:
            return getMoney();

        case PRODUCT:
            return getProduct();

        case ADD_TIME:
            return getAddTime();

        case DESCRIPTION:
            return getDescription();

        case FROM_USER:
            return getFromUser();

        case TOTAL_MONEY:
            return getTotalMoney();

        case GOODS_NAME:
            return getGoodsName();

        case SIGN:
            return getSign();

        case EFFECTIVE_TIME:
            return getEffectiveTime();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case USERNAME:
            return isSetUsername();
        case ORDER_ID:
            return isSetOrderId();
        case gb_CHANNEL_ID:
            return isSetgbChannelId();
        case MONEY:
            return isSetMoney();
        case PRODUCT:
            return isSetProduct();
        case ADD_TIME:
            return isSetAddTime();
        case DESCRIPTION:
            return isSetDescription();
        case FROM_USER:
            return isSetFromUser();
        case TOTAL_MONEY:
            return isSetTotalMoney();
        case GOODS_NAME:
            return isSetGoodsName();
        case SIGN:
            return isSetSign();
        case EFFECTIVE_TIME:
            return isSetEffectiveTime();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof AddCommissionRequest)
            return this.equals((AddCommissionRequest) that);
        return false;
    }

    public boolean equals(AddCommissionRequest that) {
        if (that == null)
            return false;

        boolean this_present_username = true && this.isSetUsername();
        boolean that_present_username = true && that.isSetUsername();
        if (this_present_username || that_present_username) {
            if (!(this_present_username && that_present_username))
                return false;
            if (!this.username.equals(that.username))
                return false;
        }

        boolean this_present_orderId = true && this.isSetOrderId();
        boolean that_present_orderId = true && that.isSetOrderId();
        if (this_present_orderId || that_present_orderId) {
            if (!(this_present_orderId && that_present_orderId))
                return false;
            if (!this.orderId.equals(that.orderId))
                return false;
        }

        boolean this_present_gbChannelId = true;
        boolean that_present_gbChannelId = true;
        if (this_present_gbChannelId || that_present_gbChannelId) {
            if (!(this_present_gbChannelId && that_present_gbChannelId))
                return false;
            if (this.gbChannelId != that.gbChannelId)
                return false;
        }

        boolean this_present_money = true && this.isSetMoney();
        boolean that_present_money = true && that.isSetMoney();
        if (this_present_money || that_present_money) {
            if (!(this_present_money && that_present_money))
                return false;
            if (!this.money.equals(that.money))
                return false;
        }

        boolean this_present_product = true && this.isSetProduct();
        boolean that_present_product = true && that.isSetProduct();
        if (this_present_product || that_present_product) {
            if (!(this_present_product && that_present_product))
                return false;
            if (!this.product.equals(that.product))
                return false;
        }

        boolean this_present_addTime = true && this.isSetAddTime();
        boolean that_present_addTime = true && that.isSetAddTime();
        if (this_present_addTime || that_present_addTime) {
            if (!(this_present_addTime && that_present_addTime))
                return false;
            if (!this.addTime.equals(that.addTime))
                return false;
        }

        boolean this_present_description = true && this.isSetDescription();
        boolean that_present_description = true && that.isSetDescription();
        if (this_present_description || that_present_description) {
            if (!(this_present_description && that_present_description))
                return false;
            if (!this.description.equals(that.description))
                return false;
        }

        boolean this_present_fromUser = true && this.isSetFromUser();
        boolean that_present_fromUser = true && that.isSetFromUser();
        if (this_present_fromUser || that_present_fromUser) {
            if (!(this_present_fromUser && that_present_fromUser))
                return false;
            if (!this.fromUser.equals(that.fromUser))
                return false;
        }

        boolean this_present_totalMoney = true && this.isSetTotalMoney();
        boolean that_present_totalMoney = true && that.isSetTotalMoney();
        if (this_present_totalMoney || that_present_totalMoney) {
            if (!(this_present_totalMoney && that_present_totalMoney))
                return false;
            if (!this.totalMoney.equals(that.totalMoney))
                return false;
        }

        boolean this_present_goodsName = true && this.isSetGoodsName();
        boolean that_present_goodsName = true && that.isSetGoodsName();
        if (this_present_goodsName || that_present_goodsName) {
            if (!(this_present_goodsName && that_present_goodsName))
                return false;
            if (!this.goodsName.equals(that.goodsName))
                return false;
        }

        boolean this_present_sign = true && this.isSetSign();
        boolean that_present_sign = true && that.isSetSign();
        if (this_present_sign || that_present_sign) {
            if (!(this_present_sign && that_present_sign))
                return false;
            if (!this.sign.equals(that.sign))
                return false;
        }

        boolean this_present_effectiveTime = true && this.isSetEffectiveTime();
        boolean that_present_effectiveTime = true && that.isSetEffectiveTime();
        if (this_present_effectiveTime || that_present_effectiveTime) {
            if (!(this_present_effectiveTime && that_present_effectiveTime))
                return false;
            if (!this.effectiveTime.equals(that.effectiveTime))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(AddCommissionRequest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        AddCommissionRequest typedOther = (AddCommissionRequest) other;

        lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUsername()) {
            lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOrderId()) {
            lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetgbChannelId()).compareTo(typedOther.isSetgbChannelId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetgbChannelId()) {
            lastComparison = TBaseHelper.compareTo(this.gbChannelId, typedOther.gbChannelId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMoney()).compareTo(typedOther.isSetMoney());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMoney()) {
            lastComparison = TBaseHelper.compareTo(this.money, typedOther.money);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetProduct()) {
            lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAddTime()).compareTo(typedOther.isSetAddTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAddTime()) {
            lastComparison = TBaseHelper.compareTo(this.addTime, typedOther.addTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDescription()) {
            lastComparison = TBaseHelper.compareTo(this.description, typedOther.description);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFromUser()).compareTo(typedOther.isSetFromUser());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFromUser()) {
            lastComparison = TBaseHelper.compareTo(this.fromUser, typedOther.fromUser);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTotalMoney()).compareTo(typedOther.isSetTotalMoney());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTotalMoney()) {
            lastComparison = TBaseHelper.compareTo(this.totalMoney, typedOther.totalMoney);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGoodsName()).compareTo(typedOther.isSetGoodsName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGoodsName()) {
            lastComparison = TBaseHelper.compareTo(this.goodsName, typedOther.goodsName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSign()) {
            lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetEffectiveTime()).compareTo(typedOther.isSetEffectiveTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEffectiveTime()) {
            lastComparison = TBaseHelper.compareTo(this.effectiveTime, typedOther.effectiveTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // USERNAME
                if (field.type == TType.STRING) {
                    this.username = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // ORDER_ID
                if (field.type == TType.STRING) {
                    this.orderId = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // gb_CHANNEL_ID
                if (field.type == TType.I64) {
                    this.gbChannelId = iprot.readI64();
                    setgbChannelIdIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4: // MONEY
                if (field.type == TType.STRING) {
                    this.money = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 5: // PRODUCT
                if (field.type == TType.STRING) {
                    this.product = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 6: // ADD_TIME
                if (field.type == TType.STRING) {
                    this.addTime = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 7: // DESCRIPTION
                if (field.type == TType.STRING) {
                    this.description = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 8: // FROM_USER
                if (field.type == TType.STRING) {
                    this.fromUser = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 9: // TOTAL_MONEY
                if (field.type == TType.STRING) {
                    this.totalMoney = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 10: // GOODS_NAME
                if (field.type == TType.STRING) {
                    this.goodsName = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 11: // SIGN
                if (field.type == TType.STRING) {
                    this.sign = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 12: // EFFECTIVE_TIME
                if (field.type == TType.STRING) {
                    this.effectiveTime = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        if (!isSetgbChannelId()) {
            throw new TProtocolException("Required field 'gbChannelId' was not found in serialized data! Struct: "
                    + toString());
        }
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.username != null) {
            oprot.writeFieldBegin(USERNAME_FIELD_DESC);
            oprot.writeString(this.username);
            oprot.writeFieldEnd();
        }
        if (this.orderId != null) {
            oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
            oprot.writeString(this.orderId);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(gb_CHANNEL_ID_FIELD_DESC);
        oprot.writeI64(this.gbChannelId);
        oprot.writeFieldEnd();
        if (this.money != null) {
            oprot.writeFieldBegin(MONEY_FIELD_DESC);
            oprot.writeString(this.money);
            oprot.writeFieldEnd();
        }
        if (this.product != null) {
            oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
            oprot.writeString(this.product);
            oprot.writeFieldEnd();
        }
        if (this.addTime != null) {
            oprot.writeFieldBegin(ADD_TIME_FIELD_DESC);
            oprot.writeString(this.addTime);
            oprot.writeFieldEnd();
        }
        if (this.description != null) {
            oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
            oprot.writeString(this.description);
            oprot.writeFieldEnd();
        }
        if (this.fromUser != null) {
            oprot.writeFieldBegin(FROM_USER_FIELD_DESC);
            oprot.writeString(this.fromUser);
            oprot.writeFieldEnd();
        }
        if (this.totalMoney != null) {
            oprot.writeFieldBegin(TOTAL_MONEY_FIELD_DESC);
            oprot.writeString(this.totalMoney);
            oprot.writeFieldEnd();
        }
        if (this.goodsName != null) {
            oprot.writeFieldBegin(GOODS_NAME_FIELD_DESC);
            oprot.writeString(this.goodsName);
            oprot.writeFieldEnd();
        }
        if (this.sign != null) {
            oprot.writeFieldBegin(SIGN_FIELD_DESC);
            oprot.writeString(this.sign);
            oprot.writeFieldEnd();
        }
        if (this.effectiveTime != null) {
            if (isSetEffectiveTime()) {
                oprot.writeFieldBegin(EFFECTIVE_TIME_FIELD_DESC);
                oprot.writeString(this.effectiveTime);
                oprot.writeFieldEnd();
            }
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("AddCommissionRequest(");
        boolean first = true;

        sb.append("username:");
        if (this.username == null) {
            sb.append("null");
        } else {
            sb.append(this.username);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("orderId:");
        if (this.orderId == null) {
            sb.append("null");
        } else {
            sb.append(this.orderId);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("gbChannelId:");
        sb.append(this.gbChannelId);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("money:");
        if (this.money == null) {
            sb.append("null");
        } else {
            sb.append(this.money);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("product:");
        if (this.product == null) {
            sb.append("null");
        } else {
            sb.append(this.product);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("addTime:");
        if (this.addTime == null) {
            sb.append("null");
        } else {
            sb.append(this.addTime);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("description:");
        if (this.description == null) {
            sb.append("null");
        } else {
            sb.append(this.description);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("fromUser:");
        if (this.fromUser == null) {
            sb.append("null");
        } else {
            sb.append(this.fromUser);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("totalMoney:");
        if (this.totalMoney == null) {
            sb.append("null");
        } else {
            sb.append(this.totalMoney);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("goodsName:");
        if (this.goodsName == null) {
            sb.append("null");
        } else {
            sb.append(this.goodsName);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("sign:");
        if (this.sign == null) {
            sb.append("null");
        } else {
            sb.append(this.sign);
        }
        first = false;
        if (isSetEffectiveTime()) {
            if (!first)
                sb.append(", ");
            sb.append("effectiveTime:");
            if (this.effectiveTime == null) {
                sb.append("null");
            } else {
                sb.append(this.effectiveTime);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        if (username == null) {
            throw new TProtocolException("Required field 'username' was not present! Struct: " + toString());
        }
        if (orderId == null) {
            throw new TProtocolException("Required field 'orderId' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'gbChannelId' because it's a primitive and you
        // chose the non-beans generator.
        if (money == null) {
            throw new TProtocolException("Required field 'money' was not present! Struct: " + toString());
        }
        if (product == null) {
            throw new TProtocolException("Required field 'product' was not present! Struct: " + toString());
        }
        if (addTime == null) {
            throw new TProtocolException("Required field 'addTime' was not present! Struct: " + toString());
        }
        if (description == null) {
            throw new TProtocolException("Required field 'description' was not present! Struct: " + toString());
        }
        if (fromUser == null) {
            throw new TProtocolException("Required field 'fromUser' was not present! Struct: " + toString());
        }
        if (totalMoney == null) {
            throw new TProtocolException("Required field 'totalMoney' was not present! Struct: " + toString());
        }
        if (goodsName == null) {
            throw new TProtocolException("Required field 'goodsName' was not present! Struct: " + toString());
        }
        if (sign == null) {
            throw new TProtocolException("Required field 'sign' was not present! Struct: " + toString());
        }
    }

}

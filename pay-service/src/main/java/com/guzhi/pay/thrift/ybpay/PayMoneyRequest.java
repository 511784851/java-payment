/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * 扣除多玩币的参数
 */
public class PayMoneyRequest implements TBase<PayMoneyRequest, PayMoneyRequest._Fields>, java.io.Serializable,
        Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("PayMoneyRequest");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short) 1);
    private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short) 2);
    private static final TField gb_CHANNEL_ID_FIELD_DESC = new TField("gbChannelId", TType.I64, (short) 3);
    private static final TField MONEY_TYPE_FIELD_DESC = new TField("moneyType", TType.I32, (short) 4);
    private static final TField MONEY_FIELD_DESC = new TField("money", TType.STRING, (short) 5);
    private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 6);
    private static final TField SERVER_FIELD_DESC = new TField("server", TType.STRING, (short) 7);
    private static final TField PAY_TIME_FIELD_DESC = new TField("payTime", TType.STRING, (short) 8);
    private static final TField USER_IP_FIELD_DESC = new TField("userIp", TType.STRING, (short) 9);
    private static final TField GOODS_NAME_FIELD_DESC = new TField("goodsName", TType.STRING, (short) 10);
    private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short) 11);
    private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 12);
    private static final TField CALLBACK_ADDR_FIELD_DESC = new TField("callbackAddr", TType.STRING, (short) 13);

    /**
     * 账号
     */
    public String username;
    /**
     * 订单号
     */
    public String orderId;
    /**
     * gb频道ID
     */
    public long gbChannelId;
    /**
     * 货币类型
     */
    public int moneyType;
    /**
     * 扣除的多玩币，单位：元，最小单位：0.01元
     */
    public String money;
    /**
     * 产品名称
     */
    public String product;
    /**
     * 产品服务器，如果没有，写空字符串""
     */
    public String server;
    /**
     * 扣除多玩币的时间
     */
    public String payTime;
    /**
     * 用户客户端IP
     */
    public String userIp;
    /**
     * 商品名称，最长50字符
     */
    public String goodsName;
    /**
     * 描述，最长100个字符
     */
    public String description;
    /**
     * md5校验码
     */
    public String sign;
    /**
     * 回调地址(格式"host:port")
     */
    public String callbackAddr;

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        /**
         * 账号
         */
        USERNAME((short) 1, "username"),
        /**
         * 订单号
         */
        ORDER_ID((short) 2, "orderId"),
        /**
         * gb频道ID
         */
        gb_CHANNEL_ID((short) 3, "gbChannelId"),
        /**
         * 货币类型
         */
        MONEY_TYPE((short) 4, "moneyType"),
        /**
         * 扣除的多玩币，单位：元，最小单位：0.01元
         */
        MONEY((short) 5, "money"),
        /**
         * 产品名称
         */
        PRODUCT((short) 6, "product"),
        /**
         * 产品服务器，如果没有，写空字符串""
         */
        SERVER((short) 7, "server"),
        /**
         * 扣除多玩币的时间
         */
        PAY_TIME((short) 8, "payTime"),
        /**
         * 用户客户端IP
         */
        USER_IP((short) 9, "userIp"),
        /**
         * 商品名称，最长50字符
         */
        GOODS_NAME((short) 10, "goodsName"),
        /**
         * 描述，最长100个字符
         */
        DESCRIPTION((short) 11, "description"),
        /**
         * md5校验码
         */
        SIGN((short) 12, "sign"),
        /**
         * 回调地址(格式"host:port")
         */
        CALLBACK_ADDR((short) 13, "callbackAddr");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // USERNAME
                return USERNAME;
            case 2: // ORDER_ID
                return ORDER_ID;
            case 3: // gb_CHANNEL_ID
                return gb_CHANNEL_ID;
            case 4: // MONEY_TYPE
                return MONEY_TYPE;
            case 5: // MONEY
                return MONEY;
            case 6: // PRODUCT
                return PRODUCT;
            case 7: // SERVER
                return SERVER;
            case 8: // PAY_TIME
                return PAY_TIME;
            case 9: // USER_IP
                return USER_IP;
            case 10: // GOODS_NAME
                return GOODS_NAME;
            case 11: // DESCRIPTION
                return DESCRIPTION;
            case 12: // SIGN
                return SIGN;
            case 13: // CALLBACK_ADDR
                return CALLBACK_ADDR;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __gbCHANNELID_ISSET_ID = 0;
    private static final int __MONEYTYPE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.gb_CHANNEL_ID, new FieldMetaData("gbChannelId", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I64)));
        tmpMap.put(_Fields.MONEY_TYPE, new FieldMetaData("moneyType", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.MONEY, new FieldMetaData("money", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.SERVER, new FieldMetaData("server", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.PAY_TIME, new FieldMetaData("payTime", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.USER_IP, new FieldMetaData("userIp", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.GOODS_NAME, new FieldMetaData("goodsName", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.DESCRIPTION, new FieldMetaData("description", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.CALLBACK_ADDR, new FieldMetaData("callbackAddr", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(PayMoneyRequest.class, metaDataMap);
    }

    public PayMoneyRequest() {
    }

    public PayMoneyRequest(String username, String orderId, long gbChannelId, int moneyType, String money,
            String product, String server, String payTime, String userIp, String goodsName, String description,
            String sign, String callbackAddr) {
        this();
        this.username = username;
        this.orderId = orderId;
        this.gbChannelId = gbChannelId;
        setgbChannelIdIsSet(true);
        this.moneyType = moneyType;
        setMoneyTypeIsSet(true);
        this.money = money;
        this.product = product;
        this.server = server;
        this.payTime = payTime;
        this.userIp = userIp;
        this.goodsName = goodsName;
        this.description = description;
        this.sign = sign;
        this.callbackAddr = callbackAddr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PayMoneyRequest(PayMoneyRequest other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetUsername()) {
            this.username = other.username;
        }
        if (other.isSetOrderId()) {
            this.orderId = other.orderId;
        }
        this.gbChannelId = other.gbChannelId;
        this.moneyType = other.moneyType;
        if (other.isSetMoney()) {
            this.money = other.money;
        }
        if (other.isSetProduct()) {
            this.product = other.product;
        }
        if (other.isSetServer()) {
            this.server = other.server;
        }
        if (other.isSetPayTime()) {
            this.payTime = other.payTime;
        }
        if (other.isSetUserIp()) {
            this.userIp = other.userIp;
        }
        if (other.isSetGoodsName()) {
            this.goodsName = other.goodsName;
        }
        if (other.isSetDescription()) {
            this.description = other.description;
        }
        if (other.isSetSign()) {
            this.sign = other.sign;
        }
        if (other.isSetCallbackAddr()) {
            this.callbackAddr = other.callbackAddr;
        }
    }

    public PayMoneyRequest deepCopy() {
        return new PayMoneyRequest(this);
    }

    @Override
    public void clear() {
        this.username = null;
        this.orderId = null;
        setgbChannelIdIsSet(false);
        this.gbChannelId = 0;
        setMoneyTypeIsSet(false);
        this.moneyType = 0;
        this.money = null;
        this.product = null;
        this.server = null;
        this.payTime = null;
        this.userIp = null;
        this.goodsName = null;
        this.description = null;
        this.sign = null;
        this.callbackAddr = null;
    }

    /**
     * 账号
     */
    public String getUsername() {
        return this.username;
    }

    /**
     * 账号
     */
    public PayMoneyRequest setUsername(String username) {
        this.username = username;
        return this;
    }

    public void unsetUsername() {
        this.username = null;
    }

    /**
     * Returns true if field username is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetUsername() {
        return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
        if (!value) {
            this.username = null;
        }
    }

    /**
     * 订单号
     */
    public String getOrderId() {
        return this.orderId;
    }

    /**
     * 订单号
     */
    public PayMoneyRequest setOrderId(String orderId) {
        this.orderId = orderId;
        return this;
    }

    public void unsetOrderId() {
        this.orderId = null;
    }

    /**
     * Returns true if field orderId is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetOrderId() {
        return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
        if (!value) {
            this.orderId = null;
        }
    }

    /**
     * gb频道ID
     */
    public long getgbChannelId() {
        return this.gbChannelId;
    }

    /**
     * gb频道ID
     */
    public PayMoneyRequest setgbChannelId(long gbChannelId) {
        this.gbChannelId = gbChannelId;
        setgbChannelIdIsSet(true);
        return this;
    }

    public void unsetgbChannelId() {
        __isset_bit_vector.clear(__gbCHANNELID_ISSET_ID);
    }

    /**
     * Returns true if field gbChannelId is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetgbChannelId() {
        return __isset_bit_vector.get(__gbCHANNELID_ISSET_ID);
    }

    public void setgbChannelIdIsSet(boolean value) {
        __isset_bit_vector.set(__gbCHANNELID_ISSET_ID, value);
    }

    /**
     * 货币类型
     */
    public int getMoneyType() {
        return this.moneyType;
    }

    /**
     * 货币类型
     */
    public PayMoneyRequest setMoneyType(int moneyType) {
        this.moneyType = moneyType;
        setMoneyTypeIsSet(true);
        return this;
    }

    public void unsetMoneyType() {
        __isset_bit_vector.clear(__MONEYTYPE_ISSET_ID);
    }

    /**
     * Returns true if field moneyType is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetMoneyType() {
        return __isset_bit_vector.get(__MONEYTYPE_ISSET_ID);
    }

    public void setMoneyTypeIsSet(boolean value) {
        __isset_bit_vector.set(__MONEYTYPE_ISSET_ID, value);
    }

    /**
     * 扣除的多玩币，单位：元，最小单位：0.01元
     */
    public String getMoney() {
        return this.money;
    }

    /**
     * 扣除的多玩币，单位：元，最小单位：0.01元
     */
    public PayMoneyRequest setMoney(String money) {
        this.money = money;
        return this;
    }

    public void unsetMoney() {
        this.money = null;
    }

    /**
     * Returns true if field money is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetMoney() {
        return this.money != null;
    }

    public void setMoneyIsSet(boolean value) {
        if (!value) {
            this.money = null;
        }
    }

    /**
     * 产品名称
     */
    public String getProduct() {
        return this.product;
    }

    /**
     * 产品名称
     */
    public PayMoneyRequest setProduct(String product) {
        this.product = product;
        return this;
    }

    public void unsetProduct() {
        this.product = null;
    }

    /**
     * Returns true if field product is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetProduct() {
        return this.product != null;
    }

    public void setProductIsSet(boolean value) {
        if (!value) {
            this.product = null;
        }
    }

    /**
     * 产品服务器，如果没有，写空字符串""
     */
    public String getServer() {
        return this.server;
    }

    /**
     * 产品服务器，如果没有，写空字符串""
     */
    public PayMoneyRequest setServer(String server) {
        this.server = server;
        return this;
    }

    public void unsetServer() {
        this.server = null;
    }

    /**
     * Returns true if field server is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetServer() {
        return this.server != null;
    }

    public void setServerIsSet(boolean value) {
        if (!value) {
            this.server = null;
        }
    }

    /**
     * 扣除多玩币的时间
     */
    public String getPayTime() {
        return this.payTime;
    }

    /**
     * 扣除多玩币的时间
     */
    public PayMoneyRequest setPayTime(String payTime) {
        this.payTime = payTime;
        return this;
    }

    public void unsetPayTime() {
        this.payTime = null;
    }

    /**
     * Returns true if field payTime is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetPayTime() {
        return this.payTime != null;
    }

    public void setPayTimeIsSet(boolean value) {
        if (!value) {
            this.payTime = null;
        }
    }

    /**
     * 用户客户端IP
     */
    public String getUserIp() {
        return this.userIp;
    }

    /**
     * 用户客户端IP
     */
    public PayMoneyRequest setUserIp(String userIp) {
        this.userIp = userIp;
        return this;
    }

    public void unsetUserIp() {
        this.userIp = null;
    }

    /**
     * Returns true if field userIp is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetUserIp() {
        return this.userIp != null;
    }

    public void setUserIpIsSet(boolean value) {
        if (!value) {
            this.userIp = null;
        }
    }

    /**
     * 商品名称，最长50字符
     */
    public String getGoodsName() {
        return this.goodsName;
    }

    /**
     * 商品名称，最长50字符
     */
    public PayMoneyRequest setGoodsName(String goodsName) {
        this.goodsName = goodsName;
        return this;
    }

    public void unsetGoodsName() {
        this.goodsName = null;
    }

    /**
     * Returns true if field goodsName is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetGoodsName() {
        return this.goodsName != null;
    }

    public void setGoodsNameIsSet(boolean value) {
        if (!value) {
            this.goodsName = null;
        }
    }

    /**
     * 描述，最长100个字符
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * 描述，最长100个字符
     */
    public PayMoneyRequest setDescription(String description) {
        this.description = description;
        return this;
    }

    public void unsetDescription() {
        this.description = null;
    }

    /**
     * Returns true if field description is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetDescription() {
        return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
        if (!value) {
            this.description = null;
        }
    }

    /**
     * md5校验码
     */
    public String getSign() {
        return this.sign;
    }

    /**
     * md5校验码
     */
    public PayMoneyRequest setSign(String sign) {
        this.sign = sign;
        return this;
    }

    public void unsetSign() {
        this.sign = null;
    }

    /**
     * Returns true if field sign is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetSign() {
        return this.sign != null;
    }

    public void setSignIsSet(boolean value) {
        if (!value) {
            this.sign = null;
        }
    }

    /**
     * 回调地址(格式"host:port")
     */
    public String getCallbackAddr() {
        return this.callbackAddr;
    }

    /**
     * 回调地址(格式"host:port")
     */
    public PayMoneyRequest setCallbackAddr(String callbackAddr) {
        this.callbackAddr = callbackAddr;
        return this;
    }

    public void unsetCallbackAddr() {
        this.callbackAddr = null;
    }

    /**
     * Returns true if field callbackAddr is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetCallbackAddr() {
        return this.callbackAddr != null;
    }

    public void setCallbackAddrIsSet(boolean value) {
        if (!value) {
            this.callbackAddr = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case USERNAME:
            if (value == null) {
                unsetUsername();
            } else {
                setUsername((String) value);
            }
            break;

        case ORDER_ID:
            if (value == null) {
                unsetOrderId();
            } else {
                setOrderId((String) value);
            }
            break;

        case gb_CHANNEL_ID:
            if (value == null) {
                unsetgbChannelId();
            } else {
                setgbChannelId((Long) value);
            }
            break;

        case MONEY_TYPE:
            if (value == null) {
                unsetMoneyType();
            } else {
                setMoneyType((Integer) value);
            }
            break;

        case MONEY:
            if (value == null) {
                unsetMoney();
            } else {
                setMoney((String) value);
            }
            break;

        case PRODUCT:
            if (value == null) {
                unsetProduct();
            } else {
                setProduct((String) value);
            }
            break;

        case SERVER:
            if (value == null) {
                unsetServer();
            } else {
                setServer((String) value);
            }
            break;

        case PAY_TIME:
            if (value == null) {
                unsetPayTime();
            } else {
                setPayTime((String) value);
            }
            break;

        case USER_IP:
            if (value == null) {
                unsetUserIp();
            } else {
                setUserIp((String) value);
            }
            break;

        case GOODS_NAME:
            if (value == null) {
                unsetGoodsName();
            } else {
                setGoodsName((String) value);
            }
            break;

        case DESCRIPTION:
            if (value == null) {
                unsetDescription();
            } else {
                setDescription((String) value);
            }
            break;

        case SIGN:
            if (value == null) {
                unsetSign();
            } else {
                setSign((String) value);
            }
            break;

        case CALLBACK_ADDR:
            if (value == null) {
                unsetCallbackAddr();
            } else {
                setCallbackAddr((String) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case USERNAME:
            return getUsername();

        case ORDER_ID:
            return getOrderId();

        case gb_CHANNEL_ID:
            return new Long(getgbChannelId());

        case MONEY_TYPE:
            return new Integer(getMoneyType());

        case MONEY:
            return getMoney();

        case PRODUCT:
            return getProduct();

        case SERVER:
            return getServer();

        case PAY_TIME:
            return getPayTime();

        case USER_IP:
            return getUserIp();

        case GOODS_NAME:
            return getGoodsName();

        case DESCRIPTION:
            return getDescription();

        case SIGN:
            return getSign();

        case CALLBACK_ADDR:
            return getCallbackAddr();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case USERNAME:
            return isSetUsername();
        case ORDER_ID:
            return isSetOrderId();
        case gb_CHANNEL_ID:
            return isSetgbChannelId();
        case MONEY_TYPE:
            return isSetMoneyType();
        case MONEY:
            return isSetMoney();
        case PRODUCT:
            return isSetProduct();
        case SERVER:
            return isSetServer();
        case PAY_TIME:
            return isSetPayTime();
        case USER_IP:
            return isSetUserIp();
        case GOODS_NAME:
            return isSetGoodsName();
        case DESCRIPTION:
            return isSetDescription();
        case SIGN:
            return isSetSign();
        case CALLBACK_ADDR:
            return isSetCallbackAddr();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof PayMoneyRequest)
            return this.equals((PayMoneyRequest) that);
        return false;
    }

    public boolean equals(PayMoneyRequest that) {
        if (that == null)
            return false;

        boolean this_present_username = true && this.isSetUsername();
        boolean that_present_username = true && that.isSetUsername();
        if (this_present_username || that_present_username) {
            if (!(this_present_username && that_present_username))
                return false;
            if (!this.username.equals(that.username))
                return false;
        }

        boolean this_present_orderId = true && this.isSetOrderId();
        boolean that_present_orderId = true && that.isSetOrderId();
        if (this_present_orderId || that_present_orderId) {
            if (!(this_present_orderId && that_present_orderId))
                return false;
            if (!this.orderId.equals(that.orderId))
                return false;
        }

        boolean this_present_gbChannelId = true;
        boolean that_present_gbChannelId = true;
        if (this_present_gbChannelId || that_present_gbChannelId) {
            if (!(this_present_gbChannelId && that_present_gbChannelId))
                return false;
            if (this.gbChannelId != that.gbChannelId)
                return false;
        }

        boolean this_present_moneyType = true;
        boolean that_present_moneyType = true;
        if (this_present_moneyType || that_present_moneyType) {
            if (!(this_present_moneyType && that_present_moneyType))
                return false;
            if (this.moneyType != that.moneyType)
                return false;
        }

        boolean this_present_money = true && this.isSetMoney();
        boolean that_present_money = true && that.isSetMoney();
        if (this_present_money || that_present_money) {
            if (!(this_present_money && that_present_money))
                return false;
            if (!this.money.equals(that.money))
                return false;
        }

        boolean this_present_product = true && this.isSetProduct();
        boolean that_present_product = true && that.isSetProduct();
        if (this_present_product || that_present_product) {
            if (!(this_present_product && that_present_product))
                return false;
            if (!this.product.equals(that.product))
                return false;
        }

        boolean this_present_server = true && this.isSetServer();
        boolean that_present_server = true && that.isSetServer();
        if (this_present_server || that_present_server) {
            if (!(this_present_server && that_present_server))
                return false;
            if (!this.server.equals(that.server))
                return false;
        }

        boolean this_present_payTime = true && this.isSetPayTime();
        boolean that_present_payTime = true && that.isSetPayTime();
        if (this_present_payTime || that_present_payTime) {
            if (!(this_present_payTime && that_present_payTime))
                return false;
            if (!this.payTime.equals(that.payTime))
                return false;
        }

        boolean this_present_userIp = true && this.isSetUserIp();
        boolean that_present_userIp = true && that.isSetUserIp();
        if (this_present_userIp || that_present_userIp) {
            if (!(this_present_userIp && that_present_userIp))
                return false;
            if (!this.userIp.equals(that.userIp))
                return false;
        }

        boolean this_present_goodsName = true && this.isSetGoodsName();
        boolean that_present_goodsName = true && that.isSetGoodsName();
        if (this_present_goodsName || that_present_goodsName) {
            if (!(this_present_goodsName && that_present_goodsName))
                return false;
            if (!this.goodsName.equals(that.goodsName))
                return false;
        }

        boolean this_present_description = true && this.isSetDescription();
        boolean that_present_description = true && that.isSetDescription();
        if (this_present_description || that_present_description) {
            if (!(this_present_description && that_present_description))
                return false;
            if (!this.description.equals(that.description))
                return false;
        }

        boolean this_present_sign = true && this.isSetSign();
        boolean that_present_sign = true && that.isSetSign();
        if (this_present_sign || that_present_sign) {
            if (!(this_present_sign && that_present_sign))
                return false;
            if (!this.sign.equals(that.sign))
                return false;
        }

        boolean this_present_callbackAddr = true && this.isSetCallbackAddr();
        boolean that_present_callbackAddr = true && that.isSetCallbackAddr();
        if (this_present_callbackAddr || that_present_callbackAddr) {
            if (!(this_present_callbackAddr && that_present_callbackAddr))
                return false;
            if (!this.callbackAddr.equals(that.callbackAddr))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(PayMoneyRequest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        PayMoneyRequest typedOther = (PayMoneyRequest) other;

        lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUsername()) {
            lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOrderId()) {
            lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetgbChannelId()).compareTo(typedOther.isSetgbChannelId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetgbChannelId()) {
            lastComparison = TBaseHelper.compareTo(this.gbChannelId, typedOther.gbChannelId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMoneyType()).compareTo(typedOther.isSetMoneyType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMoneyType()) {
            lastComparison = TBaseHelper.compareTo(this.moneyType, typedOther.moneyType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMoney()).compareTo(typedOther.isSetMoney());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMoney()) {
            lastComparison = TBaseHelper.compareTo(this.money, typedOther.money);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetProduct()) {
            lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetServer()).compareTo(typedOther.isSetServer());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetServer()) {
            lastComparison = TBaseHelper.compareTo(this.server, typedOther.server);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPayTime()).compareTo(typedOther.isSetPayTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPayTime()) {
            lastComparison = TBaseHelper.compareTo(this.payTime, typedOther.payTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUserIp()).compareTo(typedOther.isSetUserIp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserIp()) {
            lastComparison = TBaseHelper.compareTo(this.userIp, typedOther.userIp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGoodsName()).compareTo(typedOther.isSetGoodsName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGoodsName()) {
            lastComparison = TBaseHelper.compareTo(this.goodsName, typedOther.goodsName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDescription()) {
            lastComparison = TBaseHelper.compareTo(this.description, typedOther.description);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSign()) {
            lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCallbackAddr()).compareTo(typedOther.isSetCallbackAddr());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCallbackAddr()) {
            lastComparison = TBaseHelper.compareTo(this.callbackAddr, typedOther.callbackAddr);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // USERNAME
                if (field.type == TType.STRING) {
                    this.username = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // ORDER_ID
                if (field.type == TType.STRING) {
                    this.orderId = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // gb_CHANNEL_ID
                if (field.type == TType.I64) {
                    this.gbChannelId = iprot.readI64();
                    setgbChannelIdIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4: // MONEY_TYPE
                if (field.type == TType.I32) {
                    this.moneyType = iprot.readI32();
                    setMoneyTypeIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 5: // MONEY
                if (field.type == TType.STRING) {
                    this.money = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 6: // PRODUCT
                if (field.type == TType.STRING) {
                    this.product = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 7: // SERVER
                if (field.type == TType.STRING) {
                    this.server = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 8: // PAY_TIME
                if (field.type == TType.STRING) {
                    this.payTime = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 9: // USER_IP
                if (field.type == TType.STRING) {
                    this.userIp = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 10: // GOODS_NAME
                if (field.type == TType.STRING) {
                    this.goodsName = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 11: // DESCRIPTION
                if (field.type == TType.STRING) {
                    this.description = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 12: // SIGN
                if (field.type == TType.STRING) {
                    this.sign = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 13: // CALLBACK_ADDR
                if (field.type == TType.STRING) {
                    this.callbackAddr = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.username != null) {
            oprot.writeFieldBegin(USERNAME_FIELD_DESC);
            oprot.writeString(this.username);
            oprot.writeFieldEnd();
        }
        if (this.orderId != null) {
            oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
            oprot.writeString(this.orderId);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(gb_CHANNEL_ID_FIELD_DESC);
        oprot.writeI64(this.gbChannelId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MONEY_TYPE_FIELD_DESC);
        oprot.writeI32(this.moneyType);
        oprot.writeFieldEnd();
        if (this.money != null) {
            oprot.writeFieldBegin(MONEY_FIELD_DESC);
            oprot.writeString(this.money);
            oprot.writeFieldEnd();
        }
        if (this.product != null) {
            oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
            oprot.writeString(this.product);
            oprot.writeFieldEnd();
        }
        if (this.server != null) {
            oprot.writeFieldBegin(SERVER_FIELD_DESC);
            oprot.writeString(this.server);
            oprot.writeFieldEnd();
        }
        if (this.payTime != null) {
            oprot.writeFieldBegin(PAY_TIME_FIELD_DESC);
            oprot.writeString(this.payTime);
            oprot.writeFieldEnd();
        }
        if (this.userIp != null) {
            oprot.writeFieldBegin(USER_IP_FIELD_DESC);
            oprot.writeString(this.userIp);
            oprot.writeFieldEnd();
        }
        if (this.goodsName != null) {
            oprot.writeFieldBegin(GOODS_NAME_FIELD_DESC);
            oprot.writeString(this.goodsName);
            oprot.writeFieldEnd();
        }
        if (this.description != null) {
            oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
            oprot.writeString(this.description);
            oprot.writeFieldEnd();
        }
        if (this.sign != null) {
            oprot.writeFieldBegin(SIGN_FIELD_DESC);
            oprot.writeString(this.sign);
            oprot.writeFieldEnd();
        }
        if (this.callbackAddr != null) {
            oprot.writeFieldBegin(CALLBACK_ADDR_FIELD_DESC);
            oprot.writeString(this.callbackAddr);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PayMoneyRequest(");
        boolean first = true;

        sb.append("username:");
        if (this.username == null) {
            sb.append("null");
        } else {
            sb.append(this.username);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("orderId:");
        if (this.orderId == null) {
            sb.append("null");
        } else {
            sb.append(this.orderId);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("gbChannelId:");
        sb.append(this.gbChannelId);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("moneyType:");
        sb.append(this.moneyType);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("money:");
        if (this.money == null) {
            sb.append("null");
        } else {
            sb.append(this.money);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("product:");
        if (this.product == null) {
            sb.append("null");
        } else {
            sb.append(this.product);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("server:");
        if (this.server == null) {
            sb.append("null");
        } else {
            sb.append(this.server);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("payTime:");
        if (this.payTime == null) {
            sb.append("null");
        } else {
            sb.append(this.payTime);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("userIp:");
        if (this.userIp == null) {
            sb.append("null");
        } else {
            sb.append(this.userIp);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("goodsName:");
        if (this.goodsName == null) {
            sb.append("null");
        } else {
            sb.append(this.goodsName);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("description:");
        if (this.description == null) {
            sb.append("null");
        } else {
            sb.append(this.description);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("sign:");
        if (this.sign == null) {
            sb.append("null");
        } else {
            sb.append(this.sign);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("callbackAddr:");
        if (this.callbackAddr == null) {
            sb.append("null");
        } else {
            sb.append(this.callbackAddr);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
    }

}

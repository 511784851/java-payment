/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * 查询条件
 * 2013/2/27新增
 * 2013/3/6 修改
 */
public class QueryCriteria implements TBase<QueryCriteria, QueryCriteria._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("QueryCriteria");

    private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 1);
    private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 2);
    private static final TField gbUID_FIELD_DESC = new TField("gbuid", TType.I64, (short) 3);
    private static final TField PAGE_FIELD_DESC = new TField("page", TType.I32, (short) 4);
    private static final TField PAGE_SIZE_FIELD_DESC = new TField("pageSize", TType.I32, (short) 5);
    private static final TField START_DATE_FIELD_DESC = new TField("startDate", TType.STRING, (short) 6);
    private static final TField END_DATE_FIELD_DESC = new TField("endDate", TType.STRING, (short) 7);
    private static final TField FORMAT_FIELD_DESC = new TField("format", TType.STRING, (short) 8);
    private static final TField GAME_ID_FIELD_DESC = new TField("gameId", TType.STRING, (short) 9);
    private static final TField CLASSIFICATION_FIELD_DESC = new TField("classification", TType.I32, (short) 10);
    private static final TField BATCH_ID_FIELD_DESC = new TField("batchId", TType.STRING, (short) 11);
    private static final TField MONEY_TYPE_FIELD_DESC = new TField("moneyType", TType.I32, (short) 12);

    /**
     * 应用ID，比如gb音乐叫gbMUSIC
     */
    public String product;
    /**
     * 校验码，HMacSha1
     */
    public String sign;
    /**
     * 账号
     */
    public long gbuid;
    /**
     * 第几页，最小值是1
     */
    public int page;
    /**
     * 最大返回数量，不能超过200
     */
    public int pageSize;
    /**
     * 开始日期
     */
    public String startDate;
    /**
     * 结束日期
     */
    public String endDate;
    /**
     * 返回数据格式，默认为“json”
     */
    public String format;
    /**
     * 要查询的游戏ID
     */
    public String gameId;
    /**
     * 类别
     */
    public int classification;
    /**
     * 批次ID
     */
    public String batchId;
    /**
     * 货币类型, 2013/6/9新增
     */
    public int moneyType;

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        /**
         * 应用ID，比如gb音乐叫gbMUSIC
         */
        PRODUCT((short) 1, "product"),
        /**
         * 校验码，HMacSha1
         */
        SIGN((short) 2, "sign"),
        /**
         * 账号
         */
        gbUID((short) 3, "gbuid"),
        /**
         * 第几页，最小值是1
         */
        PAGE((short) 4, "page"),
        /**
         * 最大返回数量，不能超过200
         */
        PAGE_SIZE((short) 5, "pageSize"),
        /**
         * 开始日期
         */
        START_DATE((short) 6, "startDate"),
        /**
         * 结束日期
         */
        END_DATE((short) 7, "endDate"),
        /**
         * 返回数据格式，默认为“json”
         */
        FORMAT((short) 8, "format"),
        /**
         * 要查询的游戏ID
         */
        GAME_ID((short) 9, "gameId"),
        /**
         * 类别
         */
        CLASSIFICATION((short) 10, "classification"),
        /**
         * 批次ID
         */
        BATCH_ID((short) 11, "batchId"),
        /**
         * 货币类型, 2013/6/9新增
         */
        MONEY_TYPE((short) 12, "moneyType");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // PRODUCT
                return PRODUCT;
            case 2: // SIGN
                return SIGN;
            case 3: // gbUID
                return gbUID;
            case 4: // PAGE
                return PAGE;
            case 5: // PAGE_SIZE
                return PAGE_SIZE;
            case 6: // START_DATE
                return START_DATE;
            case 7: // END_DATE
                return END_DATE;
            case 8: // FORMAT
                return FORMAT;
            case 9: // GAME_ID
                return GAME_ID;
            case 10: // CLASSIFICATION
                return CLASSIFICATION;
            case 11: // BATCH_ID
                return BATCH_ID;
            case 12: // MONEY_TYPE
                return MONEY_TYPE;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __gbUID_ISSET_ID = 0;
    private static final int __PAGE_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private static final int __CLASSIFICATION_ISSET_ID = 3;
    private static final int __MONEYTYPE_ISSET_ID = 4;
    private BitSet __isset_bit_vector = new BitSet(5);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.gbUID, new FieldMetaData("gbuid", TFieldRequirementType.OPTIONAL, new FieldValueMetaData(
                TType.I64)));
        tmpMap.put(_Fields.PAGE, new FieldMetaData("page", TFieldRequirementType.OPTIONAL, new FieldValueMetaData(
                TType.I32)));
        tmpMap.put(_Fields.PAGE_SIZE, new FieldMetaData("pageSize", TFieldRequirementType.OPTIONAL,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.START_DATE, new FieldMetaData("startDate", TFieldRequirementType.OPTIONAL,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.END_DATE, new FieldMetaData("endDate", TFieldRequirementType.OPTIONAL,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.FORMAT, new FieldMetaData("format", TFieldRequirementType.OPTIONAL, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.GAME_ID, new FieldMetaData("gameId", TFieldRequirementType.OPTIONAL, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.CLASSIFICATION, new FieldMetaData("classification", TFieldRequirementType.OPTIONAL,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.BATCH_ID, new FieldMetaData("batchId", TFieldRequirementType.OPTIONAL,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.MONEY_TYPE, new FieldMetaData("moneyType", TFieldRequirementType.OPTIONAL,
                new FieldValueMetaData(TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(QueryCriteria.class, metaDataMap);
    }

    public QueryCriteria() {
        this.gbuid = 0L;

        this.page = 1;

        this.pageSize = 20;

        this.startDate = "";

        this.endDate = "";

        this.format = "json";

        this.gameId = "";

        this.classification = 1;

        this.batchId = "";

        this.moneyType = 0;

    }

    public QueryCriteria(String product, String sign) {
        this();
        this.product = product;
        this.sign = sign;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryCriteria(QueryCriteria other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetProduct()) {
            this.product = other.product;
        }
        if (other.isSetSign()) {
            this.sign = other.sign;
        }
        this.gbuid = other.gbuid;
        this.page = other.page;
        this.pageSize = other.pageSize;
        if (other.isSetStartDate()) {
            this.startDate = other.startDate;
        }
        if (other.isSetEndDate()) {
            this.endDate = other.endDate;
        }
        if (other.isSetFormat()) {
            this.format = other.format;
        }
        if (other.isSetGameId()) {
            this.gameId = other.gameId;
        }
        this.classification = other.classification;
        if (other.isSetBatchId()) {
            this.batchId = other.batchId;
        }
        this.moneyType = other.moneyType;
    }

    public QueryCriteria deepCopy() {
        return new QueryCriteria(this);
    }

    @Override
    public void clear() {
        this.product = null;
        this.sign = null;
        this.gbuid = 0L;

        this.page = 1;

        this.pageSize = 20;

        this.startDate = "";

        this.endDate = "";

        this.format = "json";

        this.gameId = "";

        this.classification = 1;

        this.batchId = "";

        this.moneyType = 0;

    }

    /**
     * 应用ID，比如gb音乐叫gbMUSIC
     */
    public String getProduct() {
        return this.product;
    }

    /**
     * 应用ID，比如gb音乐叫gbMUSIC
     */
    public QueryCriteria setProduct(String product) {
        this.product = product;
        return this;
    }

    public void unsetProduct() {
        this.product = null;
    }

    /**
     * Returns true if field product is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetProduct() {
        return this.product != null;
    }

    public void setProductIsSet(boolean value) {
        if (!value) {
            this.product = null;
        }
    }

    /**
     * 校验码，HMacSha1
     */
    public String getSign() {
        return this.sign;
    }

    /**
     * 校验码，HMacSha1
     */
    public QueryCriteria setSign(String sign) {
        this.sign = sign;
        return this;
    }

    public void unsetSign() {
        this.sign = null;
    }

    /**
     * Returns true if field sign is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetSign() {
        return this.sign != null;
    }

    public void setSignIsSet(boolean value) {
        if (!value) {
            this.sign = null;
        }
    }

    /**
     * 账号
     */
    public long getgbuid() {
        return this.gbuid;
    }

    /**
     * 账号
     */
    public QueryCriteria setgbuid(long gbuid) {
        this.gbuid = gbuid;
        setgbuidIsSet(true);
        return this;
    }

    public void unsetgbuid() {
        __isset_bit_vector.clear(__gbUID_ISSET_ID);
    }

    /**
     * Returns true if field gbuid is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetgbuid() {
        return __isset_bit_vector.get(__gbUID_ISSET_ID);
    }

    public void setgbuidIsSet(boolean value) {
        __isset_bit_vector.set(__gbUID_ISSET_ID, value);
    }

    /**
     * 第几页，最小值是1
     */
    public int getPage() {
        return this.page;
    }

    /**
     * 第几页，最小值是1
     */
    public QueryCriteria setPage(int page) {
        this.page = page;
        setPageIsSet(true);
        return this;
    }

    public void unsetPage() {
        __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /**
     * Returns true if field page is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetPage() {
        return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
        __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    /**
     * 最大返回数量，不能超过200
     */
    public int getPageSize() {
        return this.pageSize;
    }

    /**
     * 最大返回数量，不能超过200
     */
    public QueryCriteria setPageSize(int pageSize) {
        this.pageSize = pageSize;
        setPageSizeIsSet(true);
        return this;
    }

    public void unsetPageSize() {
        __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
    }

    /**
     * Returns true if field pageSize is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetPageSize() {
        return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
        __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
    }

    /**
     * 开始日期
     */
    public String getStartDate() {
        return this.startDate;
    }

    /**
     * 开始日期
     */
    public QueryCriteria setStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }

    public void unsetStartDate() {
        this.startDate = null;
    }

    /**
     * Returns true if field startDate is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetStartDate() {
        return this.startDate != null;
    }

    public void setStartDateIsSet(boolean value) {
        if (!value) {
            this.startDate = null;
        }
    }

    /**
     * 结束日期
     */
    public String getEndDate() {
        return this.endDate;
    }

    /**
     * 结束日期
     */
    public QueryCriteria setEndDate(String endDate) {
        this.endDate = endDate;
        return this;
    }

    public void unsetEndDate() {
        this.endDate = null;
    }

    /**
     * Returns true if field endDate is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetEndDate() {
        return this.endDate != null;
    }

    public void setEndDateIsSet(boolean value) {
        if (!value) {
            this.endDate = null;
        }
    }

    /**
     * 返回数据格式，默认为“json”
     */
    public String getFormat() {
        return this.format;
    }

    /**
     * 返回数据格式，默认为“json”
     */
    public QueryCriteria setFormat(String format) {
        this.format = format;
        return this;
    }

    public void unsetFormat() {
        this.format = null;
    }

    /**
     * Returns true if field format is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetFormat() {
        return this.format != null;
    }

    public void setFormatIsSet(boolean value) {
        if (!value) {
            this.format = null;
        }
    }

    /**
     * 要查询的游戏ID
     */
    public String getGameId() {
        return this.gameId;
    }

    /**
     * 要查询的游戏ID
     */
    public QueryCriteria setGameId(String gameId) {
        this.gameId = gameId;
        return this;
    }

    public void unsetGameId() {
        this.gameId = null;
    }

    /**
     * Returns true if field gameId is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetGameId() {
        return this.gameId != null;
    }

    public void setGameIdIsSet(boolean value) {
        if (!value) {
            this.gameId = null;
        }
    }

    /**
     * 类别
     */
    public int getClassification() {
        return this.classification;
    }

    /**
     * 类别
     */
    public QueryCriteria setClassification(int classification) {
        this.classification = classification;
        setClassificationIsSet(true);
        return this;
    }

    public void unsetClassification() {
        __isset_bit_vector.clear(__CLASSIFICATION_ISSET_ID);
    }

    /**
     * Returns true if field classification is set (has been asigned a value)
     * and false otherwise
     */
    public boolean isSetClassification() {
        return __isset_bit_vector.get(__CLASSIFICATION_ISSET_ID);
    }

    public void setClassificationIsSet(boolean value) {
        __isset_bit_vector.set(__CLASSIFICATION_ISSET_ID, value);
    }

    /**
     * 批次ID
     */
    public String getBatchId() {
        return this.batchId;
    }

    /**
     * 批次ID
     */
    public QueryCriteria setBatchId(String batchId) {
        this.batchId = batchId;
        return this;
    }

    public void unsetBatchId() {
        this.batchId = null;
    }

    /**
     * Returns true if field batchId is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetBatchId() {
        return this.batchId != null;
    }

    public void setBatchIdIsSet(boolean value) {
        if (!value) {
            this.batchId = null;
        }
    }

    /**
     * 货币类型, 2013/6/9新增
     */
    public int getMoneyType() {
        return this.moneyType;
    }

    /**
     * 货币类型, 2013/6/9新增
     */
    public QueryCriteria setMoneyType(int moneyType) {
        this.moneyType = moneyType;
        setMoneyTypeIsSet(true);
        return this;
    }

    public void unsetMoneyType() {
        __isset_bit_vector.clear(__MONEYTYPE_ISSET_ID);
    }

    /**
     * Returns true if field moneyType is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetMoneyType() {
        return __isset_bit_vector.get(__MONEYTYPE_ISSET_ID);
    }

    public void setMoneyTypeIsSet(boolean value) {
        __isset_bit_vector.set(__MONEYTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case PRODUCT:
            if (value == null) {
                unsetProduct();
            } else {
                setProduct((String) value);
            }
            break;

        case SIGN:
            if (value == null) {
                unsetSign();
            } else {
                setSign((String) value);
            }
            break;

        case gbUID:
            if (value == null) {
                unsetgbuid();
            } else {
                setgbuid((Long) value);
            }
            break;

        case PAGE:
            if (value == null) {
                unsetPage();
            } else {
                setPage((Integer) value);
            }
            break;

        case PAGE_SIZE:
            if (value == null) {
                unsetPageSize();
            } else {
                setPageSize((Integer) value);
            }
            break;

        case START_DATE:
            if (value == null) {
                unsetStartDate();
            } else {
                setStartDate((String) value);
            }
            break;

        case END_DATE:
            if (value == null) {
                unsetEndDate();
            } else {
                setEndDate((String) value);
            }
            break;

        case FORMAT:
            if (value == null) {
                unsetFormat();
            } else {
                setFormat((String) value);
            }
            break;

        case GAME_ID:
            if (value == null) {
                unsetGameId();
            } else {
                setGameId((String) value);
            }
            break;

        case CLASSIFICATION:
            if (value == null) {
                unsetClassification();
            } else {
                setClassification((Integer) value);
            }
            break;

        case BATCH_ID:
            if (value == null) {
                unsetBatchId();
            } else {
                setBatchId((String) value);
            }
            break;

        case MONEY_TYPE:
            if (value == null) {
                unsetMoneyType();
            } else {
                setMoneyType((Integer) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case PRODUCT:
            return getProduct();

        case SIGN:
            return getSign();

        case gbUID:
            return new Long(getgbuid());

        case PAGE:
            return new Integer(getPage());

        case PAGE_SIZE:
            return new Integer(getPageSize());

        case START_DATE:
            return getStartDate();

        case END_DATE:
            return getEndDate();

        case FORMAT:
            return getFormat();

        case GAME_ID:
            return getGameId();

        case CLASSIFICATION:
            return new Integer(getClassification());

        case BATCH_ID:
            return getBatchId();

        case MONEY_TYPE:
            return new Integer(getMoneyType());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case PRODUCT:
            return isSetProduct();
        case SIGN:
            return isSetSign();
        case gbUID:
            return isSetgbuid();
        case PAGE:
            return isSetPage();
        case PAGE_SIZE:
            return isSetPageSize();
        case START_DATE:
            return isSetStartDate();
        case END_DATE:
            return isSetEndDate();
        case FORMAT:
            return isSetFormat();
        case GAME_ID:
            return isSetGameId();
        case CLASSIFICATION:
            return isSetClassification();
        case BATCH_ID:
            return isSetBatchId();
        case MONEY_TYPE:
            return isSetMoneyType();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof QueryCriteria)
            return this.equals((QueryCriteria) that);
        return false;
    }

    public boolean equals(QueryCriteria that) {
        if (that == null)
            return false;

        boolean this_present_product = true && this.isSetProduct();
        boolean that_present_product = true && that.isSetProduct();
        if (this_present_product || that_present_product) {
            if (!(this_present_product && that_present_product))
                return false;
            if (!this.product.equals(that.product))
                return false;
        }

        boolean this_present_sign = true && this.isSetSign();
        boolean that_present_sign = true && that.isSetSign();
        if (this_present_sign || that_present_sign) {
            if (!(this_present_sign && that_present_sign))
                return false;
            if (!this.sign.equals(that.sign))
                return false;
        }

        boolean this_present_gbuid = true && this.isSetgbuid();
        boolean that_present_gbuid = true && that.isSetgbuid();
        if (this_present_gbuid || that_present_gbuid) {
            if (!(this_present_gbuid && that_present_gbuid))
                return false;
            if (this.gbuid != that.gbuid)
                return false;
        }

        boolean this_present_page = true && this.isSetPage();
        boolean that_present_page = true && that.isSetPage();
        if (this_present_page || that_present_page) {
            if (!(this_present_page && that_present_page))
                return false;
            if (this.page != that.page)
                return false;
        }

        boolean this_present_pageSize = true && this.isSetPageSize();
        boolean that_present_pageSize = true && that.isSetPageSize();
        if (this_present_pageSize || that_present_pageSize) {
            if (!(this_present_pageSize && that_present_pageSize))
                return false;
            if (this.pageSize != that.pageSize)
                return false;
        }

        boolean this_present_startDate = true && this.isSetStartDate();
        boolean that_present_startDate = true && that.isSetStartDate();
        if (this_present_startDate || that_present_startDate) {
            if (!(this_present_startDate && that_present_startDate))
                return false;
            if (!this.startDate.equals(that.startDate))
                return false;
        }

        boolean this_present_endDate = true && this.isSetEndDate();
        boolean that_present_endDate = true && that.isSetEndDate();
        if (this_present_endDate || that_present_endDate) {
            if (!(this_present_endDate && that_present_endDate))
                return false;
            if (!this.endDate.equals(that.endDate))
                return false;
        }

        boolean this_present_format = true && this.isSetFormat();
        boolean that_present_format = true && that.isSetFormat();
        if (this_present_format || that_present_format) {
            if (!(this_present_format && that_present_format))
                return false;
            if (!this.format.equals(that.format))
                return false;
        }

        boolean this_present_gameId = true && this.isSetGameId();
        boolean that_present_gameId = true && that.isSetGameId();
        if (this_present_gameId || that_present_gameId) {
            if (!(this_present_gameId && that_present_gameId))
                return false;
            if (!this.gameId.equals(that.gameId))
                return false;
        }

        boolean this_present_classification = true && this.isSetClassification();
        boolean that_present_classification = true && that.isSetClassification();
        if (this_present_classification || that_present_classification) {
            if (!(this_present_classification && that_present_classification))
                return false;
            if (this.classification != that.classification)
                return false;
        }

        boolean this_present_batchId = true && this.isSetBatchId();
        boolean that_present_batchId = true && that.isSetBatchId();
        if (this_present_batchId || that_present_batchId) {
            if (!(this_present_batchId && that_present_batchId))
                return false;
            if (!this.batchId.equals(that.batchId))
                return false;
        }

        boolean this_present_moneyType = true && this.isSetMoneyType();
        boolean that_present_moneyType = true && that.isSetMoneyType();
        if (this_present_moneyType || that_present_moneyType) {
            if (!(this_present_moneyType && that_present_moneyType))
                return false;
            if (this.moneyType != that.moneyType)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(QueryCriteria other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        QueryCriteria typedOther = (QueryCriteria) other;

        lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetProduct()) {
            lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSign()) {
            lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetgbuid()).compareTo(typedOther.isSetgbuid());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetgbuid()) {
            lastComparison = TBaseHelper.compareTo(this.gbuid, typedOther.gbuid);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPage()) {
            lastComparison = TBaseHelper.compareTo(this.page, typedOther.page);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPageSize()) {
            lastComparison = TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(typedOther.isSetStartDate());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStartDate()) {
            lastComparison = TBaseHelper.compareTo(this.startDate, typedOther.startDate);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEndDate()) {
            lastComparison = TBaseHelper.compareTo(this.endDate, typedOther.endDate);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFormat()).compareTo(typedOther.isSetFormat());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFormat()) {
            lastComparison = TBaseHelper.compareTo(this.format, typedOther.format);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGameId()).compareTo(typedOther.isSetGameId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGameId()) {
            lastComparison = TBaseHelper.compareTo(this.gameId, typedOther.gameId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetClassification()).compareTo(typedOther.isSetClassification());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetClassification()) {
            lastComparison = TBaseHelper.compareTo(this.classification, typedOther.classification);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetBatchId()).compareTo(typedOther.isSetBatchId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBatchId()) {
            lastComparison = TBaseHelper.compareTo(this.batchId, typedOther.batchId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMoneyType()).compareTo(typedOther.isSetMoneyType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMoneyType()) {
            lastComparison = TBaseHelper.compareTo(this.moneyType, typedOther.moneyType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // PRODUCT
                if (field.type == TType.STRING) {
                    this.product = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // SIGN
                if (field.type == TType.STRING) {
                    this.sign = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // gbUID
                if (field.type == TType.I64) {
                    this.gbuid = iprot.readI64();
                    setgbuidIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4: // PAGE
                if (field.type == TType.I32) {
                    this.page = iprot.readI32();
                    setPageIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 5: // PAGE_SIZE
                if (field.type == TType.I32) {
                    this.pageSize = iprot.readI32();
                    setPageSizeIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 6: // START_DATE
                if (field.type == TType.STRING) {
                    this.startDate = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 7: // END_DATE
                if (field.type == TType.STRING) {
                    this.endDate = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 8: // FORMAT
                if (field.type == TType.STRING) {
                    this.format = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 9: // GAME_ID
                if (field.type == TType.STRING) {
                    this.gameId = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 10: // CLASSIFICATION
                if (field.type == TType.I32) {
                    this.classification = iprot.readI32();
                    setClassificationIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 11: // BATCH_ID
                if (field.type == TType.STRING) {
                    this.batchId = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 12: // MONEY_TYPE
                if (field.type == TType.I32) {
                    this.moneyType = iprot.readI32();
                    setMoneyTypeIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.product != null) {
            oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
            oprot.writeString(this.product);
            oprot.writeFieldEnd();
        }
        if (this.sign != null) {
            oprot.writeFieldBegin(SIGN_FIELD_DESC);
            oprot.writeString(this.sign);
            oprot.writeFieldEnd();
        }
        if (isSetgbuid()) {
            oprot.writeFieldBegin(gbUID_FIELD_DESC);
            oprot.writeI64(this.gbuid);
            oprot.writeFieldEnd();
        }
        if (isSetPage()) {
            oprot.writeFieldBegin(PAGE_FIELD_DESC);
            oprot.writeI32(this.page);
            oprot.writeFieldEnd();
        }
        if (isSetPageSize()) {
            oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
            oprot.writeI32(this.pageSize);
            oprot.writeFieldEnd();
        }
        if (this.startDate != null) {
            if (isSetStartDate()) {
                oprot.writeFieldBegin(START_DATE_FIELD_DESC);
                oprot.writeString(this.startDate);
                oprot.writeFieldEnd();
            }
        }
        if (this.endDate != null) {
            if (isSetEndDate()) {
                oprot.writeFieldBegin(END_DATE_FIELD_DESC);
                oprot.writeString(this.endDate);
                oprot.writeFieldEnd();
            }
        }
        if (this.format != null) {
            if (isSetFormat()) {
                oprot.writeFieldBegin(FORMAT_FIELD_DESC);
                oprot.writeString(this.format);
                oprot.writeFieldEnd();
            }
        }
        if (this.gameId != null) {
            if (isSetGameId()) {
                oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
                oprot.writeString(this.gameId);
                oprot.writeFieldEnd();
            }
        }
        if (isSetClassification()) {
            oprot.writeFieldBegin(CLASSIFICATION_FIELD_DESC);
            oprot.writeI32(this.classification);
            oprot.writeFieldEnd();
        }
        if (this.batchId != null) {
            if (isSetBatchId()) {
                oprot.writeFieldBegin(BATCH_ID_FIELD_DESC);
                oprot.writeString(this.batchId);
                oprot.writeFieldEnd();
            }
        }
        if (isSetMoneyType()) {
            oprot.writeFieldBegin(MONEY_TYPE_FIELD_DESC);
            oprot.writeI32(this.moneyType);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("QueryCriteria(");
        boolean first = true;

        sb.append("product:");
        if (this.product == null) {
            sb.append("null");
        } else {
            sb.append(this.product);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("sign:");
        if (this.sign == null) {
            sb.append("null");
        } else {
            sb.append(this.sign);
        }
        first = false;
        if (isSetgbuid()) {
            if (!first)
                sb.append(", ");
            sb.append("gbuid:");
            sb.append(this.gbuid);
            first = false;
        }
        if (isSetPage()) {
            if (!first)
                sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
        }
        if (isSetPageSize()) {
            if (!first)
                sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
        }
        if (isSetStartDate()) {
            if (!first)
                sb.append(", ");
            sb.append("startDate:");
            if (this.startDate == null) {
                sb.append("null");
            } else {
                sb.append(this.startDate);
            }
            first = false;
        }
        if (isSetEndDate()) {
            if (!first)
                sb.append(", ");
            sb.append("endDate:");
            if (this.endDate == null) {
                sb.append("null");
            } else {
                sb.append(this.endDate);
            }
            first = false;
        }
        if (isSetFormat()) {
            if (!first)
                sb.append(", ");
            sb.append("format:");
            if (this.format == null) {
                sb.append("null");
            } else {
                sb.append(this.format);
            }
            first = false;
        }
        if (isSetGameId()) {
            if (!first)
                sb.append(", ");
            sb.append("gameId:");
            if (this.gameId == null) {
                sb.append("null");
            } else {
                sb.append(this.gameId);
            }
            first = false;
        }
        if (isSetClassification()) {
            if (!first)
                sb.append(", ");
            sb.append("classification:");
            sb.append(this.classification);
            first = false;
        }
        if (isSetBatchId()) {
            if (!first)
                sb.append(", ");
            sb.append("batchId:");
            if (this.batchId == null) {
                sb.append("null");
            } else {
                sb.append(this.batchId);
            }
            first = false;
        }
        if (isSetMoneyType()) {
            if (!first)
                sb.append(", ");
            sb.append("moneyType:");
            sb.append(this.moneyType);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        if (product == null) {
            throw new TProtocolException("Required field 'product' was not present! Struct: " + toString());
        }
        if (sign == null) {
            throw new TProtocolException("Required field 'sign' was not present! Struct: " + toString());
        }
    }

}

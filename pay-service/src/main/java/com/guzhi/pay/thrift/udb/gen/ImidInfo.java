/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.udb.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ImidInfo implements TBase<ImidInfo, ImidInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ImidInfo");

  private static final TField IMID_FIELD_DESC = new TField("imid", TType.I32, (short)1);
  private static final TField UID_FIELD_DESC = new TField("uid", TType.I32, (short)2);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("create_time", TType.STRING, (short)3);

  public int imid;
  public int uid;
  public String create_time;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    IMID((short)1, "imid"),
    UID((short)2, "uid"),
    CREATE_TIME((short)3, "create_time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMID
          return IMID;
        case 2: // UID
          return UID;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IMID_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMID, new FieldMetaData("imid", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("create_time", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ImidInfo.class, metaDataMap);
  }

  public ImidInfo() {
  }

  public ImidInfo(
    int imid,
    int uid,
    String create_time)
  {
    this();
    this.imid = imid;
    setImidIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.create_time = create_time;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImidInfo(ImidInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.imid = other.imid;
    this.uid = other.uid;
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
  }

  public ImidInfo deepCopy() {
    return new ImidInfo(this);
  }

  @Override
  public void clear() {
    setImidIsSet(false);
    this.imid = 0;
    setUidIsSet(false);
    this.uid = 0;
    this.create_time = null;
  }

  public int getImid() {
    return this.imid;
  }

  public ImidInfo setImid(int imid) {
    this.imid = imid;
    setImidIsSet(true);
    return this;
  }

  public void unsetImid() {
    __isset_bit_vector.clear(__IMID_ISSET_ID);
  }

  /** Returns true if field imid is set (has been asigned a value) and false otherwise */
  public boolean isSetImid() {
    return __isset_bit_vector.get(__IMID_ISSET_ID);
  }

  public void setImidIsSet(boolean value) {
    __isset_bit_vector.set(__IMID_ISSET_ID, value);
  }

  public int getUid() {
    return this.uid;
  }

  public ImidInfo setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bit_vector.clear(__UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been asigned a value) and false otherwise */
  public boolean isSetUid() {
    return __isset_bit_vector.get(__UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bit_vector.set(__UID_ISSET_ID, value);
  }

  public String getCreate_time() {
    return this.create_time;
  }

  public ImidInfo setCreate_time(String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been asigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IMID:
      if (value == null) {
        unsetImid();
      } else {
        setImid((Integer)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IMID:
      return new Integer(getImid());

    case UID:
      return new Integer(getUid());

    case CREATE_TIME:
      return getCreate_time();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IMID:
      return isSetImid();
    case UID:
      return isSetUid();
    case CREATE_TIME:
      return isSetCreate_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ImidInfo)
      return this.equals((ImidInfo)that);
    return false;
  }

  public boolean equals(ImidInfo that) {
    if (that == null)
      return false;

    boolean this_present_imid = true;
    boolean that_present_imid = true;
    if (this_present_imid || that_present_imid) {
      if (!(this_present_imid && that_present_imid))
        return false;
      if (this.imid != that.imid)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ImidInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ImidInfo typedOther = (ImidInfo)other;

    lastComparison = Boolean.valueOf(isSetImid()).compareTo(typedOther.isSetImid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImid()) {
      lastComparison = TBaseHelper.compareTo(this.imid, typedOther.imid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(typedOther.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = TBaseHelper.compareTo(this.create_time, typedOther.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // IMID
          if (field.type == TType.I32) {
            this.imid = iprot.readI32();
            setImidIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // UID
          if (field.type == TType.I32) {
            this.uid = iprot.readI32();
            setUidIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.create_time = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(IMID_FIELD_DESC);
    oprot.writeI32(this.imid);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UID_FIELD_DESC);
    oprot.writeI32(this.uid);
    oprot.writeFieldEnd();
    if (this.create_time != null) {
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeString(this.create_time);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ImidInfo(");
    boolean first = true;

    sb.append("imid:");
    sb.append(this.imid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("create_time:");
    if (this.create_time == null) {
      sb.append("null");
    } else {
      sb.append(this.create_time);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}


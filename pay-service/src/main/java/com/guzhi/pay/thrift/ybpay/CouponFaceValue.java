/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * 创建优惠券/折扣券的数量和面值
 * 2013/3/8 新增
 */
public class CouponFaceValue implements TBase<CouponFaceValue, CouponFaceValue._Fields>, java.io.Serializable,
        Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("CouponFaceValue");

    private static final TField FACE_VALUE_FIELD_DESC = new TField("faceValue", TType.STRING, (short) 1);
    private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short) 2);
    private static final TField COUPON_NAME_FIELD_DESC = new TField("couponName", TType.STRING, (short) 3);

    /**
     * 面值，可以是数值，也可以是表达式，最小精确到 0.01
     */
    public String faceValue;
    /**
     * 数量
     */
    public int count;
    /**
     * 优惠券名称（例如XX优惠券，XX8折卡）
     */
    public String couponName;

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        /**
         * 面值，可以是数值，也可以是表达式，最小精确到 0.01
         */
        FACE_VALUE((short) 1, "faceValue"),
        /**
         * 数量
         */
        COUNT((short) 2, "count"),
        /**
         * 优惠券名称（例如XX优惠券，XX8折卡）
         */
        COUPON_NAME((short) 3, "couponName");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // FACE_VALUE
                return FACE_VALUE;
            case 2: // COUNT
                return COUNT;
            case 3: // COUPON_NAME
                return COUPON_NAME;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.FACE_VALUE, new FieldMetaData("faceValue", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                TType.I32)));
        tmpMap.put(_Fields.COUPON_NAME, new FieldMetaData("couponName", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(CouponFaceValue.class, metaDataMap);
    }

    public CouponFaceValue() {
    }

    public CouponFaceValue(String faceValue, int count, String couponName) {
        this();
        this.faceValue = faceValue;
        this.count = count;
        setCountIsSet(true);
        this.couponName = couponName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CouponFaceValue(CouponFaceValue other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetFaceValue()) {
            this.faceValue = other.faceValue;
        }
        this.count = other.count;
        if (other.isSetCouponName()) {
            this.couponName = other.couponName;
        }
    }

    public CouponFaceValue deepCopy() {
        return new CouponFaceValue(this);
    }

    @Override
    public void clear() {
        this.faceValue = null;
        setCountIsSet(false);
        this.count = 0;
        this.couponName = null;
    }

    /**
     * 面值，可以是数值，也可以是表达式，最小精确到 0.01
     */
    public String getFaceValue() {
        return this.faceValue;
    }

    /**
     * 面值，可以是数值，也可以是表达式，最小精确到 0.01
     */
    public CouponFaceValue setFaceValue(String faceValue) {
        this.faceValue = faceValue;
        return this;
    }

    public void unsetFaceValue() {
        this.faceValue = null;
    }

    /**
     * Returns true if field faceValue is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetFaceValue() {
        return this.faceValue != null;
    }

    public void setFaceValueIsSet(boolean value) {
        if (!value) {
            this.faceValue = null;
        }
    }

    /**
     * 数量
     */
    public int getCount() {
        return this.count;
    }

    /**
     * 数量
     */
    public CouponFaceValue setCount(int count) {
        this.count = count;
        setCountIsSet(true);
        return this;
    }

    public void unsetCount() {
        __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /**
     * Returns true if field count is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetCount() {
        return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
        __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    /**
     * 优惠券名称（例如XX优惠券，XX8折卡）
     */
    public String getCouponName() {
        return this.couponName;
    }

    /**
     * 优惠券名称（例如XX优惠券，XX8折卡）
     */
    public CouponFaceValue setCouponName(String couponName) {
        this.couponName = couponName;
        return this;
    }

    public void unsetCouponName() {
        this.couponName = null;
    }

    /**
     * Returns true if field couponName is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetCouponName() {
        return this.couponName != null;
    }

    public void setCouponNameIsSet(boolean value) {
        if (!value) {
            this.couponName = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case FACE_VALUE:
            if (value == null) {
                unsetFaceValue();
            } else {
                setFaceValue((String) value);
            }
            break;

        case COUNT:
            if (value == null) {
                unsetCount();
            } else {
                setCount((Integer) value);
            }
            break;

        case COUPON_NAME:
            if (value == null) {
                unsetCouponName();
            } else {
                setCouponName((String) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case FACE_VALUE:
            return getFaceValue();

        case COUNT:
            return new Integer(getCount());

        case COUPON_NAME:
            return getCouponName();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case FACE_VALUE:
            return isSetFaceValue();
        case COUNT:
            return isSetCount();
        case COUPON_NAME:
            return isSetCouponName();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof CouponFaceValue)
            return this.equals((CouponFaceValue) that);
        return false;
    }

    public boolean equals(CouponFaceValue that) {
        if (that == null)
            return false;

        boolean this_present_faceValue = true && this.isSetFaceValue();
        boolean that_present_faceValue = true && that.isSetFaceValue();
        if (this_present_faceValue || that_present_faceValue) {
            if (!(this_present_faceValue && that_present_faceValue))
                return false;
            if (!this.faceValue.equals(that.faceValue))
                return false;
        }

        boolean this_present_count = true;
        boolean that_present_count = true;
        if (this_present_count || that_present_count) {
            if (!(this_present_count && that_present_count))
                return false;
            if (this.count != that.count)
                return false;
        }

        boolean this_present_couponName = true && this.isSetCouponName();
        boolean that_present_couponName = true && that.isSetCouponName();
        if (this_present_couponName || that_present_couponName) {
            if (!(this_present_couponName && that_present_couponName))
                return false;
            if (!this.couponName.equals(that.couponName))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(CouponFaceValue other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        CouponFaceValue typedOther = (CouponFaceValue) other;

        lastComparison = Boolean.valueOf(isSetFaceValue()).compareTo(typedOther.isSetFaceValue());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFaceValue()) {
            lastComparison = TBaseHelper.compareTo(this.faceValue, typedOther.faceValue);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCount()) {
            lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCouponName()).compareTo(typedOther.isSetCouponName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCouponName()) {
            lastComparison = TBaseHelper.compareTo(this.couponName, typedOther.couponName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // FACE_VALUE
                if (field.type == TType.STRING) {
                    this.faceValue = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // COUNT
                if (field.type == TType.I32) {
                    this.count = iprot.readI32();
                    setCountIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // COUPON_NAME
                if (field.type == TType.STRING) {
                    this.couponName = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        if (!isSetCount()) {
            throw new TProtocolException("Required field 'count' was not found in serialized data! Struct: "
                    + toString());
        }
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.faceValue != null) {
            oprot.writeFieldBegin(FACE_VALUE_FIELD_DESC);
            oprot.writeString(this.faceValue);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(this.count);
        oprot.writeFieldEnd();
        if (this.couponName != null) {
            oprot.writeFieldBegin(COUPON_NAME_FIELD_DESC);
            oprot.writeString(this.couponName);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("CouponFaceValue(");
        boolean first = true;

        sb.append("faceValue:");
        if (this.faceValue == null) {
            sb.append("null");
        } else {
            sb.append(this.faceValue);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("count:");
        sb.append(this.count);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("couponName:");
        if (this.couponName == null) {
            sb.append("null");
        } else {
            sb.append(this.couponName);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        if (faceValue == null) {
            throw new TProtocolException("Required field 'faceValue' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'count' because it's a primitive and you chose
        // the non-beans generator.
        if (couponName == null) {
            throw new TProtocolException("Required field 'couponName' was not present! Struct: " + toString());
        }
    }

}

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * token参数
 * 2013/4/28 新增
 */
public class PayMoneyToken implements TBase<PayMoneyToken, PayMoneyToken._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("PayMoneyToken");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short) 1);
    private static final TField TOKEN_SOURCE_FIELD_DESC = new TField("tokenSource", TType.STRING, (short) 2);
    private static final TField TOKEN_TYPE_FIELD_DESC = new TField("tokenType", TType.STRING, (short) 3);

    /**
     * token值
     */
    public String token;
    /**
     * token来源
     */
    public String tokenSource;
    /**
     * token类型，mobile=移动端
     */
    public String tokenType;

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        /**
         * token值
         */
        TOKEN((short) 1, "token"),
        /**
         * token来源
         */
        TOKEN_SOURCE((short) 2, "tokenSource"),
        /**
         * token类型，mobile=移动端
         */
        TOKEN_TYPE((short) 3, "tokenType");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // TOKEN
                return TOKEN;
            case 2: // TOKEN_SOURCE
                return TOKEN_SOURCE;
            case 3: // TOKEN_TYPE
                return TOKEN_TYPE;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.TOKEN_SOURCE, new FieldMetaData("tokenSource", TFieldRequirementType.OPTIONAL,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.TOKEN_TYPE, new FieldMetaData("tokenType", TFieldRequirementType.OPTIONAL,
                new FieldValueMetaData(TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(PayMoneyToken.class, metaDataMap);
    }

    public PayMoneyToken() {
        this.tokenSource = "udb";

        this.tokenType = "mobile";

    }

    public PayMoneyToken(String token) {
        this();
        this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PayMoneyToken(PayMoneyToken other) {
        if (other.isSetToken()) {
            this.token = other.token;
        }
        if (other.isSetTokenSource()) {
            this.tokenSource = other.tokenSource;
        }
        if (other.isSetTokenType()) {
            this.tokenType = other.tokenType;
        }
    }

    public PayMoneyToken deepCopy() {
        return new PayMoneyToken(this);
    }

    @Override
    public void clear() {
        this.token = null;
        this.tokenSource = "udb";

        this.tokenType = "mobile";

    }

    /**
     * token值
     */
    public String getToken() {
        return this.token;
    }

    /**
     * token值
     */
    public PayMoneyToken setToken(String token) {
        this.token = token;
        return this;
    }

    public void unsetToken() {
        this.token = null;
    }

    /**
     * Returns true if field token is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetToken() {
        return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
        if (!value) {
            this.token = null;
        }
    }

    /**
     * token来源
     */
    public String getTokenSource() {
        return this.tokenSource;
    }

    /**
     * token来源
     */
    public PayMoneyToken setTokenSource(String tokenSource) {
        this.tokenSource = tokenSource;
        return this;
    }

    public void unsetTokenSource() {
        this.tokenSource = null;
    }

    /**
     * Returns true if field tokenSource is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetTokenSource() {
        return this.tokenSource != null;
    }

    public void setTokenSourceIsSet(boolean value) {
        if (!value) {
            this.tokenSource = null;
        }
    }

    /**
     * token类型，mobile=移动端
     */
    public String getTokenType() {
        return this.tokenType;
    }

    /**
     * token类型，mobile=移动端
     */
    public PayMoneyToken setTokenType(String tokenType) {
        this.tokenType = tokenType;
        return this;
    }

    public void unsetTokenType() {
        this.tokenType = null;
    }

    /**
     * Returns true if field tokenType is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetTokenType() {
        return this.tokenType != null;
    }

    public void setTokenTypeIsSet(boolean value) {
        if (!value) {
            this.tokenType = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case TOKEN:
            if (value == null) {
                unsetToken();
            } else {
                setToken((String) value);
            }
            break;

        case TOKEN_SOURCE:
            if (value == null) {
                unsetTokenSource();
            } else {
                setTokenSource((String) value);
            }
            break;

        case TOKEN_TYPE:
            if (value == null) {
                unsetTokenType();
            } else {
                setTokenType((String) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case TOKEN:
            return getToken();

        case TOKEN_SOURCE:
            return getTokenSource();

        case TOKEN_TYPE:
            return getTokenType();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case TOKEN:
            return isSetToken();
        case TOKEN_SOURCE:
            return isSetTokenSource();
        case TOKEN_TYPE:
            return isSetTokenType();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof PayMoneyToken)
            return this.equals((PayMoneyToken) that);
        return false;
    }

    public boolean equals(PayMoneyToken that) {
        if (that == null)
            return false;

        boolean this_present_token = true && this.isSetToken();
        boolean that_present_token = true && that.isSetToken();
        if (this_present_token || that_present_token) {
            if (!(this_present_token && that_present_token))
                return false;
            if (!this.token.equals(that.token))
                return false;
        }

        boolean this_present_tokenSource = true && this.isSetTokenSource();
        boolean that_present_tokenSource = true && that.isSetTokenSource();
        if (this_present_tokenSource || that_present_tokenSource) {
            if (!(this_present_tokenSource && that_present_tokenSource))
                return false;
            if (!this.tokenSource.equals(that.tokenSource))
                return false;
        }

        boolean this_present_tokenType = true && this.isSetTokenType();
        boolean that_present_tokenType = true && that.isSetTokenType();
        if (this_present_tokenType || that_present_tokenType) {
            if (!(this_present_tokenType && that_present_tokenType))
                return false;
            if (!this.tokenType.equals(that.tokenType))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(PayMoneyToken other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        PayMoneyToken typedOther = (PayMoneyToken) other;

        lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetToken()) {
            lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTokenSource()).compareTo(typedOther.isSetTokenSource());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTokenSource()) {
            lastComparison = TBaseHelper.compareTo(this.tokenSource, typedOther.tokenSource);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTokenType()).compareTo(typedOther.isSetTokenType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTokenType()) {
            lastComparison = TBaseHelper.compareTo(this.tokenType, typedOther.tokenType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // TOKEN
                if (field.type == TType.STRING) {
                    this.token = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // TOKEN_SOURCE
                if (field.type == TType.STRING) {
                    this.tokenSource = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // TOKEN_TYPE
                if (field.type == TType.STRING) {
                    this.tokenType = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.token != null) {
            oprot.writeFieldBegin(TOKEN_FIELD_DESC);
            oprot.writeString(this.token);
            oprot.writeFieldEnd();
        }
        if (this.tokenSource != null) {
            if (isSetTokenSource()) {
                oprot.writeFieldBegin(TOKEN_SOURCE_FIELD_DESC);
                oprot.writeString(this.tokenSource);
                oprot.writeFieldEnd();
            }
        }
        if (this.tokenType != null) {
            if (isSetTokenType()) {
                oprot.writeFieldBegin(TOKEN_TYPE_FIELD_DESC);
                oprot.writeString(this.tokenType);
                oprot.writeFieldEnd();
            }
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PayMoneyToken(");
        boolean first = true;

        sb.append("token:");
        if (this.token == null) {
            sb.append("null");
        } else {
            sb.append(this.token);
        }
        first = false;
        if (isSetTokenSource()) {
            if (!first)
                sb.append(", ");
            sb.append("tokenSource:");
            if (this.tokenSource == null) {
                sb.append("null");
            } else {
                sb.append(this.tokenSource);
            }
            first = false;
        }
        if (isSetTokenType()) {
            if (!first)
                sb.append(", ");
            sb.append("tokenType:");
            if (this.tokenType == null) {
                sb.append("null");
            } else {
                sb.append(this.tokenType);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
    }

}

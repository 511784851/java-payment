/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * 调用的结果
 * code: 返回码，int(32bit)
 * info: 返回信息或相应数据(string，最长255个UTF-8字符)
 */
public class PaymentResult implements TBase<PaymentResult, PaymentResult._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("PaymentResult");

    private static final TField CODE_FIELD_DESC = new TField("code", TType.I32, (short) 1);
    private static final TField INFO_FIELD_DESC = new TField("info", TType.STRING, (short) 2);

    /**
     * 返回码
     */
    public int code;
    /**
     * 返回信息或相应数据，最长255个UTF-8字符
     */
    public String info;

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        /**
         * 返回码
         */
        CODE((short) 1, "code"),
        /**
         * 返回信息或相应数据，最长255个UTF-8字符
         */
        INFO((short) 2, "info");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // CODE
                return CODE;
            case 2: // INFO
                return INFO;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __CODE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.CODE, new FieldMetaData("code", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.I32)));
        tmpMap.put(_Fields.INFO, new FieldMetaData("info", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(PaymentResult.class, metaDataMap);
    }

    public PaymentResult() {
    }

    public PaymentResult(int code, String info) {
        this();
        this.code = code;
        setCodeIsSet(true);
        this.info = info;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PaymentResult(PaymentResult other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        this.code = other.code;
        if (other.isSetInfo()) {
            this.info = other.info;
        }
    }

    public PaymentResult deepCopy() {
        return new PaymentResult(this);
    }

    @Override
    public void clear() {
        setCodeIsSet(false);
        this.code = 0;
        this.info = null;
    }

    /**
     * 返回码
     */
    public int getCode() {
        return this.code;
    }

    /**
     * 返回码
     */
    public PaymentResult setCode(int code) {
        this.code = code;
        setCodeIsSet(true);
        return this;
    }

    public void unsetCode() {
        __isset_bit_vector.clear(__CODE_ISSET_ID);
    }

    /**
     * Returns true if field code is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetCode() {
        return __isset_bit_vector.get(__CODE_ISSET_ID);
    }

    public void setCodeIsSet(boolean value) {
        __isset_bit_vector.set(__CODE_ISSET_ID, value);
    }

    /**
     * 返回信息或相应数据，最长255个UTF-8字符
     */
    public String getInfo() {
        return this.info;
    }

    /**
     * 返回信息或相应数据，最长255个UTF-8字符
     */
    public PaymentResult setInfo(String info) {
        this.info = info;
        return this;
    }

    public void unsetInfo() {
        this.info = null;
    }

    /**
     * Returns true if field info is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetInfo() {
        return this.info != null;
    }

    public void setInfoIsSet(boolean value) {
        if (!value) {
            this.info = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case CODE:
            if (value == null) {
                unsetCode();
            } else {
                setCode((Integer) value);
            }
            break;

        case INFO:
            if (value == null) {
                unsetInfo();
            } else {
                setInfo((String) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case CODE:
            return new Integer(getCode());

        case INFO:
            return getInfo();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case CODE:
            return isSetCode();
        case INFO:
            return isSetInfo();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof PaymentResult)
            return this.equals((PaymentResult) that);
        return false;
    }

    public boolean equals(PaymentResult that) {
        if (that == null)
            return false;

        boolean this_present_code = true;
        boolean that_present_code = true;
        if (this_present_code || that_present_code) {
            if (!(this_present_code && that_present_code))
                return false;
            if (this.code != that.code)
                return false;
        }

        boolean this_present_info = true && this.isSetInfo();
        boolean that_present_info = true && that.isSetInfo();
        if (this_present_info || that_present_info) {
            if (!(this_present_info && that_present_info))
                return false;
            if (!this.info.equals(that.info))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(PaymentResult other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        PaymentResult typedOther = (PaymentResult) other;

        lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCode()) {
            lastComparison = TBaseHelper.compareTo(this.code, typedOther.code);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetInfo()).compareTo(typedOther.isSetInfo());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInfo()) {
            lastComparison = TBaseHelper.compareTo(this.info, typedOther.info);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // CODE
                if (field.type == TType.I32) {
                    this.code = iprot.readI32();
                    setCodeIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // INFO
                if (field.type == TType.STRING) {
                    this.info = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeI32(this.code);
        oprot.writeFieldEnd();
        if (this.info != null) {
            oprot.writeFieldBegin(INFO_FIELD_DESC);
            oprot.writeString(this.info);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PaymentResult(");
        boolean first = true;

        sb.append("code:");
        sb.append(this.code);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("info:");
        if (this.info == null) {
            sb.append("null");
        } else {
            sb.append(this.info);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
    }

}

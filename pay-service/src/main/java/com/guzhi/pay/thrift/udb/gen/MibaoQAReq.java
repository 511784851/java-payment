/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.udb.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class MibaoQAReq implements TBase<MibaoQAReq, MibaoQAReq._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MibaoQAReq");

  private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRING, (short)1);
  private static final TField QUESTION1_FIELD_DESC = new TField("question1", TType.STRING, (short)2);
  private static final TField ANSWER1_FIELD_DESC = new TField("answer1", TType.STRING, (short)3);
  private static final TField QUESTION2_FIELD_DESC = new TField("question2", TType.STRING, (short)4);
  private static final TField ANSWER2_FIELD_DESC = new TField("answer2", TType.STRING, (short)5);
  private static final TField QUESTION3_FIELD_DESC = new TField("question3", TType.STRING, (short)6);
  private static final TField ANSWER3_FIELD_DESC = new TField("answer3", TType.STRING, (short)7);

  public String request;
  public String question1;
  public String answer1;
  public String question2;
  public String answer2;
  public String question3;
  public String answer3;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    REQUEST((short)1, "request"),
    QUESTION1((short)2, "question1"),
    ANSWER1((short)3, "answer1"),
    QUESTION2((short)4, "question2"),
    ANSWER2((short)5, "answer2"),
    QUESTION3((short)6, "question3"),
    ANSWER3((short)7, "answer3");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST
          return REQUEST;
        case 2: // QUESTION1
          return QUESTION1;
        case 3: // ANSWER1
          return ANSWER1;
        case 4: // QUESTION2
          return QUESTION2;
        case 5: // ANSWER2
          return ANSWER2;
        case 6: // QUESTION3
          return QUESTION3;
        case 7: // ANSWER3
          return ANSWER3;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.QUESTION1, new FieldMetaData("question1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ANSWER1, new FieldMetaData("answer1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.QUESTION2, new FieldMetaData("question2", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ANSWER2, new FieldMetaData("answer2", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.QUESTION3, new FieldMetaData("question3", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ANSWER3, new FieldMetaData("answer3", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(MibaoQAReq.class, metaDataMap);
  }

  public MibaoQAReq() {
  }

  public MibaoQAReq(
    String request,
    String question1,
    String answer1,
    String question2,
    String answer2,
    String question3,
    String answer3)
  {
    this();
    this.request = request;
    this.question1 = question1;
    this.answer1 = answer1;
    this.question2 = question2;
    this.answer2 = answer2;
    this.question3 = question3;
    this.answer3 = answer3;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MibaoQAReq(MibaoQAReq other) {
    if (other.isSetRequest()) {
      this.request = other.request;
    }
    if (other.isSetQuestion1()) {
      this.question1 = other.question1;
    }
    if (other.isSetAnswer1()) {
      this.answer1 = other.answer1;
    }
    if (other.isSetQuestion2()) {
      this.question2 = other.question2;
    }
    if (other.isSetAnswer2()) {
      this.answer2 = other.answer2;
    }
    if (other.isSetQuestion3()) {
      this.question3 = other.question3;
    }
    if (other.isSetAnswer3()) {
      this.answer3 = other.answer3;
    }
  }

  public MibaoQAReq deepCopy() {
    return new MibaoQAReq(this);
  }

  @Override
  public void clear() {
    this.request = null;
    this.question1 = null;
    this.answer1 = null;
    this.question2 = null;
    this.answer2 = null;
    this.question3 = null;
    this.answer3 = null;
  }

  public String getRequest() {
    return this.request;
  }

  public MibaoQAReq setRequest(String request) {
    this.request = request;
    return this;
  }

  public void unsetRequest() {
    this.request = null;
  }

  /** Returns true if field request is set (has been asigned a value) and false otherwise */
  public boolean isSetRequest() {
    return this.request != null;
  }

  public void setRequestIsSet(boolean value) {
    if (!value) {
      this.request = null;
    }
  }

  public String getQuestion1() {
    return this.question1;
  }

  public MibaoQAReq setQuestion1(String question1) {
    this.question1 = question1;
    return this;
  }

  public void unsetQuestion1() {
    this.question1 = null;
  }

  /** Returns true if field question1 is set (has been asigned a value) and false otherwise */
  public boolean isSetQuestion1() {
    return this.question1 != null;
  }

  public void setQuestion1IsSet(boolean value) {
    if (!value) {
      this.question1 = null;
    }
  }

  public String getAnswer1() {
    return this.answer1;
  }

  public MibaoQAReq setAnswer1(String answer1) {
    this.answer1 = answer1;
    return this;
  }

  public void unsetAnswer1() {
    this.answer1 = null;
  }

  /** Returns true if field answer1 is set (has been asigned a value) and false otherwise */
  public boolean isSetAnswer1() {
    return this.answer1 != null;
  }

  public void setAnswer1IsSet(boolean value) {
    if (!value) {
      this.answer1 = null;
    }
  }

  public String getQuestion2() {
    return this.question2;
  }

  public MibaoQAReq setQuestion2(String question2) {
    this.question2 = question2;
    return this;
  }

  public void unsetQuestion2() {
    this.question2 = null;
  }

  /** Returns true if field question2 is set (has been asigned a value) and false otherwise */
  public boolean isSetQuestion2() {
    return this.question2 != null;
  }

  public void setQuestion2IsSet(boolean value) {
    if (!value) {
      this.question2 = null;
    }
  }

  public String getAnswer2() {
    return this.answer2;
  }

  public MibaoQAReq setAnswer2(String answer2) {
    this.answer2 = answer2;
    return this;
  }

  public void unsetAnswer2() {
    this.answer2 = null;
  }

  /** Returns true if field answer2 is set (has been asigned a value) and false otherwise */
  public boolean isSetAnswer2() {
    return this.answer2 != null;
  }

  public void setAnswer2IsSet(boolean value) {
    if (!value) {
      this.answer2 = null;
    }
  }

  public String getQuestion3() {
    return this.question3;
  }

  public MibaoQAReq setQuestion3(String question3) {
    this.question3 = question3;
    return this;
  }

  public void unsetQuestion3() {
    this.question3 = null;
  }

  /** Returns true if field question3 is set (has been asigned a value) and false otherwise */
  public boolean isSetQuestion3() {
    return this.question3 != null;
  }

  public void setQuestion3IsSet(boolean value) {
    if (!value) {
      this.question3 = null;
    }
  }

  public String getAnswer3() {
    return this.answer3;
  }

  public MibaoQAReq setAnswer3(String answer3) {
    this.answer3 = answer3;
    return this;
  }

  public void unsetAnswer3() {
    this.answer3 = null;
  }

  /** Returns true if field answer3 is set (has been asigned a value) and false otherwise */
  public boolean isSetAnswer3() {
    return this.answer3 != null;
  }

  public void setAnswer3IsSet(boolean value) {
    if (!value) {
      this.answer3 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST:
      if (value == null) {
        unsetRequest();
      } else {
        setRequest((String)value);
      }
      break;

    case QUESTION1:
      if (value == null) {
        unsetQuestion1();
      } else {
        setQuestion1((String)value);
      }
      break;

    case ANSWER1:
      if (value == null) {
        unsetAnswer1();
      } else {
        setAnswer1((String)value);
      }
      break;

    case QUESTION2:
      if (value == null) {
        unsetQuestion2();
      } else {
        setQuestion2((String)value);
      }
      break;

    case ANSWER2:
      if (value == null) {
        unsetAnswer2();
      } else {
        setAnswer2((String)value);
      }
      break;

    case QUESTION3:
      if (value == null) {
        unsetQuestion3();
      } else {
        setQuestion3((String)value);
      }
      break;

    case ANSWER3:
      if (value == null) {
        unsetAnswer3();
      } else {
        setAnswer3((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST:
      return getRequest();

    case QUESTION1:
      return getQuestion1();

    case ANSWER1:
      return getAnswer1();

    case QUESTION2:
      return getQuestion2();

    case ANSWER2:
      return getAnswer2();

    case QUESTION3:
      return getQuestion3();

    case ANSWER3:
      return getAnswer3();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST:
      return isSetRequest();
    case QUESTION1:
      return isSetQuestion1();
    case ANSWER1:
      return isSetAnswer1();
    case QUESTION2:
      return isSetQuestion2();
    case ANSWER2:
      return isSetAnswer2();
    case QUESTION3:
      return isSetQuestion3();
    case ANSWER3:
      return isSetAnswer3();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MibaoQAReq)
      return this.equals((MibaoQAReq)that);
    return false;
  }

  public boolean equals(MibaoQAReq that) {
    if (that == null)
      return false;

    boolean this_present_request = true && this.isSetRequest();
    boolean that_present_request = true && that.isSetRequest();
    if (this_present_request || that_present_request) {
      if (!(this_present_request && that_present_request))
        return false;
      if (!this.request.equals(that.request))
        return false;
    }

    boolean this_present_question1 = true && this.isSetQuestion1();
    boolean that_present_question1 = true && that.isSetQuestion1();
    if (this_present_question1 || that_present_question1) {
      if (!(this_present_question1 && that_present_question1))
        return false;
      if (!this.question1.equals(that.question1))
        return false;
    }

    boolean this_present_answer1 = true && this.isSetAnswer1();
    boolean that_present_answer1 = true && that.isSetAnswer1();
    if (this_present_answer1 || that_present_answer1) {
      if (!(this_present_answer1 && that_present_answer1))
        return false;
      if (!this.answer1.equals(that.answer1))
        return false;
    }

    boolean this_present_question2 = true && this.isSetQuestion2();
    boolean that_present_question2 = true && that.isSetQuestion2();
    if (this_present_question2 || that_present_question2) {
      if (!(this_present_question2 && that_present_question2))
        return false;
      if (!this.question2.equals(that.question2))
        return false;
    }

    boolean this_present_answer2 = true && this.isSetAnswer2();
    boolean that_present_answer2 = true && that.isSetAnswer2();
    if (this_present_answer2 || that_present_answer2) {
      if (!(this_present_answer2 && that_present_answer2))
        return false;
      if (!this.answer2.equals(that.answer2))
        return false;
    }

    boolean this_present_question3 = true && this.isSetQuestion3();
    boolean that_present_question3 = true && that.isSetQuestion3();
    if (this_present_question3 || that_present_question3) {
      if (!(this_present_question3 && that_present_question3))
        return false;
      if (!this.question3.equals(that.question3))
        return false;
    }

    boolean this_present_answer3 = true && this.isSetAnswer3();
    boolean that_present_answer3 = true && that.isSetAnswer3();
    if (this_present_answer3 || that_present_answer3) {
      if (!(this_present_answer3 && that_present_answer3))
        return false;
      if (!this.answer3.equals(that.answer3))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MibaoQAReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MibaoQAReq typedOther = (MibaoQAReq)other;

    lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest()) {
      lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestion1()).compareTo(typedOther.isSetQuestion1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestion1()) {
      lastComparison = TBaseHelper.compareTo(this.question1, typedOther.question1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswer1()).compareTo(typedOther.isSetAnswer1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswer1()) {
      lastComparison = TBaseHelper.compareTo(this.answer1, typedOther.answer1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestion2()).compareTo(typedOther.isSetQuestion2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestion2()) {
      lastComparison = TBaseHelper.compareTo(this.question2, typedOther.question2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswer2()).compareTo(typedOther.isSetAnswer2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswer2()) {
      lastComparison = TBaseHelper.compareTo(this.answer2, typedOther.answer2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestion3()).compareTo(typedOther.isSetQuestion3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestion3()) {
      lastComparison = TBaseHelper.compareTo(this.question3, typedOther.question3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswer3()).compareTo(typedOther.isSetAnswer3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswer3()) {
      lastComparison = TBaseHelper.compareTo(this.answer3, typedOther.answer3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // REQUEST
          if (field.type == TType.STRING) {
            this.request = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // QUESTION1
          if (field.type == TType.STRING) {
            this.question1 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ANSWER1
          if (field.type == TType.STRING) {
            this.answer1 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // QUESTION2
          if (field.type == TType.STRING) {
            this.question2 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ANSWER2
          if (field.type == TType.STRING) {
            this.answer2 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // QUESTION3
          if (field.type == TType.STRING) {
            this.question3 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // ANSWER3
          if (field.type == TType.STRING) {
            this.answer3 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.request != null) {
      oprot.writeFieldBegin(REQUEST_FIELD_DESC);
      oprot.writeString(this.request);
      oprot.writeFieldEnd();
    }
    if (this.question1 != null) {
      oprot.writeFieldBegin(QUESTION1_FIELD_DESC);
      oprot.writeString(this.question1);
      oprot.writeFieldEnd();
    }
    if (this.answer1 != null) {
      oprot.writeFieldBegin(ANSWER1_FIELD_DESC);
      oprot.writeString(this.answer1);
      oprot.writeFieldEnd();
    }
    if (this.question2 != null) {
      oprot.writeFieldBegin(QUESTION2_FIELD_DESC);
      oprot.writeString(this.question2);
      oprot.writeFieldEnd();
    }
    if (this.answer2 != null) {
      oprot.writeFieldBegin(ANSWER2_FIELD_DESC);
      oprot.writeString(this.answer2);
      oprot.writeFieldEnd();
    }
    if (this.question3 != null) {
      oprot.writeFieldBegin(QUESTION3_FIELD_DESC);
      oprot.writeString(this.question3);
      oprot.writeFieldEnd();
    }
    if (this.answer3 != null) {
      oprot.writeFieldBegin(ANSWER3_FIELD_DESC);
      oprot.writeString(this.answer3);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MibaoQAReq(");
    boolean first = true;

    sb.append("request:");
    if (this.request == null) {
      sb.append("null");
    } else {
      sb.append(this.request);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("question1:");
    if (this.question1 == null) {
      sb.append("null");
    } else {
      sb.append(this.question1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answer1:");
    if (this.answer1 == null) {
      sb.append("null");
    } else {
      sb.append(this.answer1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("question2:");
    if (this.question2 == null) {
      sb.append("null");
    } else {
      sb.append(this.question2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answer2:");
    if (this.answer2 == null) {
      sb.append("null");
    } else {
      sb.append(this.answer2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("question3:");
    if (this.question3 == null) {
      sb.append("null");
    } else {
      sb.append(this.question3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answer3:");
    if (this.answer3 == null) {
      sb.append("null");
    } else {
      sb.append(this.answer3);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}


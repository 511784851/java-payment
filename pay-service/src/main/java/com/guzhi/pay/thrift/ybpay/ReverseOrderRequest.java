/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * 订单冲正请求
 * 2013/6/3 新增
 */
public class ReverseOrderRequest implements TBase<ReverseOrderRequest, ReverseOrderRequest._Fields>,
        java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("ReverseOrderRequest");

    private static final TField gbUID_FIELD_DESC = new TField("gbuid", TType.I64, (short) 1);
    private static final TField PRODUCT_ORDER_ID_FIELD_DESC = new TField("productOrderId", TType.STRING, (short) 2);
    private static final TField MONEY_TYPE_FIELD_DESC = new TField("moneyType", TType.I32, (short) 3);
    private static final TField MONEY_FIELD_DESC = new TField("money", TType.STRING, (short) 4);
    private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 5);
    private static final TField TIME_FIELD_DESC = new TField("time", TType.STRING, (short) 6);
    private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short) 7);
    private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 8);

    /**
     * 需要冲正的gbuid
     */
    public long gbuid;
    /**
     * 需要冲正的订单号
     */
    public String productOrderId;
    /**
     * 相关的货币类型
     */
    public int moneyType;
    /**
     * 订单相关的金额，单位：元，最小单位：0.01元
     */
    public String money;
    /**
     * 调用此接口的应用ID，比如gb音乐叫gbMUSIC
     */
    public String product;
    /**
     * 时间戳
     */
    public String time;
    /**
     * 描述，最长100个字符
     */
    public String description;
    /**
     * 校验码，HMacSha1
     */
    public String sign;

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        /**
         * 需要冲正的gbuid
         */
        gbUID((short) 1, "gbuid"),
        /**
         * 需要冲正的订单号
         */
        PRODUCT_ORDER_ID((short) 2, "productOrderId"),
        /**
         * 相关的货币类型
         */
        MONEY_TYPE((short) 3, "moneyType"),
        /**
         * 订单相关的金额，单位：元，最小单位：0.01元
         */
        MONEY((short) 4, "money"),
        /**
         * 调用此接口的应用ID，比如gb音乐叫gbMUSIC
         */
        PRODUCT((short) 5, "product"),
        /**
         * 时间戳
         */
        TIME((short) 6, "time"),
        /**
         * 描述，最长100个字符
         */
        DESCRIPTION((short) 7, "description"),
        /**
         * 校验码，HMacSha1
         */
        SIGN((short) 8, "sign");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // gbUID
                return gbUID;
            case 2: // PRODUCT_ORDER_ID
                return PRODUCT_ORDER_ID;
            case 3: // MONEY_TYPE
                return MONEY_TYPE;
            case 4: // MONEY
                return MONEY;
            case 5: // PRODUCT
                return PRODUCT;
            case 6: // TIME
                return TIME;
            case 7: // DESCRIPTION
                return DESCRIPTION;
            case 8: // SIGN
                return SIGN;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __gbUID_ISSET_ID = 0;
    private static final int __MONEYTYPE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.gbUID, new FieldMetaData("gbuid", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                TType.I64)));
        tmpMap.put(_Fields.PRODUCT_ORDER_ID, new FieldMetaData("productOrderId", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.MONEY_TYPE, new FieldMetaData("moneyType", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.MONEY, new FieldMetaData("money", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.TIME, new FieldMetaData("time", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.DESCRIPTION, new FieldMetaData("description", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.REQUIRED, new FieldValueMetaData(
                TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(ReverseOrderRequest.class, metaDataMap);
    }

    public ReverseOrderRequest() {
    }

    public ReverseOrderRequest(long gbuid, String productOrderId, int moneyType, String money, String product,
            String time, String description, String sign) {
        this();
        this.gbuid = gbuid;
        setgbuidIsSet(true);
        this.productOrderId = productOrderId;
        this.moneyType = moneyType;
        setMoneyTypeIsSet(true);
        this.money = money;
        this.product = product;
        this.time = time;
        this.description = description;
        this.sign = sign;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReverseOrderRequest(ReverseOrderRequest other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        this.gbuid = other.gbuid;
        if (other.isSetProductOrderId()) {
            this.productOrderId = other.productOrderId;
        }
        this.moneyType = other.moneyType;
        if (other.isSetMoney()) {
            this.money = other.money;
        }
        if (other.isSetProduct()) {
            this.product = other.product;
        }
        if (other.isSetTime()) {
            this.time = other.time;
        }
        if (other.isSetDescription()) {
            this.description = other.description;
        }
        if (other.isSetSign()) {
            this.sign = other.sign;
        }
    }

    public ReverseOrderRequest deepCopy() {
        return new ReverseOrderRequest(this);
    }

    @Override
    public void clear() {
        setgbuidIsSet(false);
        this.gbuid = 0;
        this.productOrderId = null;
        setMoneyTypeIsSet(false);
        this.moneyType = 0;
        this.money = null;
        this.product = null;
        this.time = null;
        this.description = null;
        this.sign = null;
    }

    /**
     * 需要冲正的gbuid
     */
    public long getgbuid() {
        return this.gbuid;
    }

    /**
     * 需要冲正的gbuid
     */
    public ReverseOrderRequest setgbuid(long gbuid) {
        this.gbuid = gbuid;
        setgbuidIsSet(true);
        return this;
    }

    public void unsetgbuid() {
        __isset_bit_vector.clear(__gbUID_ISSET_ID);
    }

    /**
     * Returns true if field gbuid is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetgbuid() {
        return __isset_bit_vector.get(__gbUID_ISSET_ID);
    }

    public void setgbuidIsSet(boolean value) {
        __isset_bit_vector.set(__gbUID_ISSET_ID, value);
    }

    /**
     * 需要冲正的订单号
     */
    public String getProductOrderId() {
        return this.productOrderId;
    }

    /**
     * 需要冲正的订单号
     */
    public ReverseOrderRequest setProductOrderId(String productOrderId) {
        this.productOrderId = productOrderId;
        return this;
    }

    public void unsetProductOrderId() {
        this.productOrderId = null;
    }

    /**
     * Returns true if field productOrderId is set (has been asigned a value)
     * and false otherwise
     */
    public boolean isSetProductOrderId() {
        return this.productOrderId != null;
    }

    public void setProductOrderIdIsSet(boolean value) {
        if (!value) {
            this.productOrderId = null;
        }
    }

    /**
     * 相关的货币类型
     */
    public int getMoneyType() {
        return this.moneyType;
    }

    /**
     * 相关的货币类型
     */
    public ReverseOrderRequest setMoneyType(int moneyType) {
        this.moneyType = moneyType;
        setMoneyTypeIsSet(true);
        return this;
    }

    public void unsetMoneyType() {
        __isset_bit_vector.clear(__MONEYTYPE_ISSET_ID);
    }

    /**
     * Returns true if field moneyType is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetMoneyType() {
        return __isset_bit_vector.get(__MONEYTYPE_ISSET_ID);
    }

    public void setMoneyTypeIsSet(boolean value) {
        __isset_bit_vector.set(__MONEYTYPE_ISSET_ID, value);
    }

    /**
     * 订单相关的金额，单位：元，最小单位：0.01元
     */
    public String getMoney() {
        return this.money;
    }

    /**
     * 订单相关的金额，单位：元，最小单位：0.01元
     */
    public ReverseOrderRequest setMoney(String money) {
        this.money = money;
        return this;
    }

    public void unsetMoney() {
        this.money = null;
    }

    /**
     * Returns true if field money is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetMoney() {
        return this.money != null;
    }

    public void setMoneyIsSet(boolean value) {
        if (!value) {
            this.money = null;
        }
    }

    /**
     * 调用此接口的应用ID，比如gb音乐叫gbMUSIC
     */
    public String getProduct() {
        return this.product;
    }

    /**
     * 调用此接口的应用ID，比如gb音乐叫gbMUSIC
     */
    public ReverseOrderRequest setProduct(String product) {
        this.product = product;
        return this;
    }

    public void unsetProduct() {
        this.product = null;
    }

    /**
     * Returns true if field product is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetProduct() {
        return this.product != null;
    }

    public void setProductIsSet(boolean value) {
        if (!value) {
            this.product = null;
        }
    }

    /**
     * 时间戳
     */
    public String getTime() {
        return this.time;
    }

    /**
     * 时间戳
     */
    public ReverseOrderRequest setTime(String time) {
        this.time = time;
        return this;
    }

    public void unsetTime() {
        this.time = null;
    }

    /**
     * Returns true if field time is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetTime() {
        return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
        if (!value) {
            this.time = null;
        }
    }

    /**
     * 描述，最长100个字符
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * 描述，最长100个字符
     */
    public ReverseOrderRequest setDescription(String description) {
        this.description = description;
        return this;
    }

    public void unsetDescription() {
        this.description = null;
    }

    /**
     * Returns true if field description is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetDescription() {
        return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
        if (!value) {
            this.description = null;
        }
    }

    /**
     * 校验码，HMacSha1
     */
    public String getSign() {
        return this.sign;
    }

    /**
     * 校验码，HMacSha1
     */
    public ReverseOrderRequest setSign(String sign) {
        this.sign = sign;
        return this;
    }

    public void unsetSign() {
        this.sign = null;
    }

    /**
     * Returns true if field sign is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetSign() {
        return this.sign != null;
    }

    public void setSignIsSet(boolean value) {
        if (!value) {
            this.sign = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case gbUID:
            if (value == null) {
                unsetgbuid();
            } else {
                setgbuid((Long) value);
            }
            break;

        case PRODUCT_ORDER_ID:
            if (value == null) {
                unsetProductOrderId();
            } else {
                setProductOrderId((String) value);
            }
            break;

        case MONEY_TYPE:
            if (value == null) {
                unsetMoneyType();
            } else {
                setMoneyType((Integer) value);
            }
            break;

        case MONEY:
            if (value == null) {
                unsetMoney();
            } else {
                setMoney((String) value);
            }
            break;

        case PRODUCT:
            if (value == null) {
                unsetProduct();
            } else {
                setProduct((String) value);
            }
            break;

        case TIME:
            if (value == null) {
                unsetTime();
            } else {
                setTime((String) value);
            }
            break;

        case DESCRIPTION:
            if (value == null) {
                unsetDescription();
            } else {
                setDescription((String) value);
            }
            break;

        case SIGN:
            if (value == null) {
                unsetSign();
            } else {
                setSign((String) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case gbUID:
            return new Long(getgbuid());

        case PRODUCT_ORDER_ID:
            return getProductOrderId();

        case MONEY_TYPE:
            return new Integer(getMoneyType());

        case MONEY:
            return getMoney();

        case PRODUCT:
            return getProduct();

        case TIME:
            return getTime();

        case DESCRIPTION:
            return getDescription();

        case SIGN:
            return getSign();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case gbUID:
            return isSetgbuid();
        case PRODUCT_ORDER_ID:
            return isSetProductOrderId();
        case MONEY_TYPE:
            return isSetMoneyType();
        case MONEY:
            return isSetMoney();
        case PRODUCT:
            return isSetProduct();
        case TIME:
            return isSetTime();
        case DESCRIPTION:
            return isSetDescription();
        case SIGN:
            return isSetSign();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof ReverseOrderRequest)
            return this.equals((ReverseOrderRequest) that);
        return false;
    }

    public boolean equals(ReverseOrderRequest that) {
        if (that == null)
            return false;

        boolean this_present_gbuid = true;
        boolean that_present_gbuid = true;
        if (this_present_gbuid || that_present_gbuid) {
            if (!(this_present_gbuid && that_present_gbuid))
                return false;
            if (this.gbuid != that.gbuid)
                return false;
        }

        boolean this_present_productOrderId = true && this.isSetProductOrderId();
        boolean that_present_productOrderId = true && that.isSetProductOrderId();
        if (this_present_productOrderId || that_present_productOrderId) {
            if (!(this_present_productOrderId && that_present_productOrderId))
                return false;
            if (!this.productOrderId.equals(that.productOrderId))
                return false;
        }

        boolean this_present_moneyType = true;
        boolean that_present_moneyType = true;
        if (this_present_moneyType || that_present_moneyType) {
            if (!(this_present_moneyType && that_present_moneyType))
                return false;
            if (this.moneyType != that.moneyType)
                return false;
        }

        boolean this_present_money = true && this.isSetMoney();
        boolean that_present_money = true && that.isSetMoney();
        if (this_present_money || that_present_money) {
            if (!(this_present_money && that_present_money))
                return false;
            if (!this.money.equals(that.money))
                return false;
        }

        boolean this_present_product = true && this.isSetProduct();
        boolean that_present_product = true && that.isSetProduct();
        if (this_present_product || that_present_product) {
            if (!(this_present_product && that_present_product))
                return false;
            if (!this.product.equals(that.product))
                return false;
        }

        boolean this_present_time = true && this.isSetTime();
        boolean that_present_time = true && that.isSetTime();
        if (this_present_time || that_present_time) {
            if (!(this_present_time && that_present_time))
                return false;
            if (!this.time.equals(that.time))
                return false;
        }

        boolean this_present_description = true && this.isSetDescription();
        boolean that_present_description = true && that.isSetDescription();
        if (this_present_description || that_present_description) {
            if (!(this_present_description && that_present_description))
                return false;
            if (!this.description.equals(that.description))
                return false;
        }

        boolean this_present_sign = true && this.isSetSign();
        boolean that_present_sign = true && that.isSetSign();
        if (this_present_sign || that_present_sign) {
            if (!(this_present_sign && that_present_sign))
                return false;
            if (!this.sign.equals(that.sign))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(ReverseOrderRequest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        ReverseOrderRequest typedOther = (ReverseOrderRequest) other;

        lastComparison = Boolean.valueOf(isSetgbuid()).compareTo(typedOther.isSetgbuid());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetgbuid()) {
            lastComparison = TBaseHelper.compareTo(this.gbuid, typedOther.gbuid);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetProductOrderId()).compareTo(typedOther.isSetProductOrderId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetProductOrderId()) {
            lastComparison = TBaseHelper.compareTo(this.productOrderId, typedOther.productOrderId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMoneyType()).compareTo(typedOther.isSetMoneyType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMoneyType()) {
            lastComparison = TBaseHelper.compareTo(this.moneyType, typedOther.moneyType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMoney()).compareTo(typedOther.isSetMoney());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMoney()) {
            lastComparison = TBaseHelper.compareTo(this.money, typedOther.money);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetProduct()) {
            lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTime()) {
            lastComparison = TBaseHelper.compareTo(this.time, typedOther.time);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDescription()) {
            lastComparison = TBaseHelper.compareTo(this.description, typedOther.description);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSign()) {
            lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // gbUID
                if (field.type == TType.I64) {
                    this.gbuid = iprot.readI64();
                    setgbuidIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // PRODUCT_ORDER_ID
                if (field.type == TType.STRING) {
                    this.productOrderId = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // MONEY_TYPE
                if (field.type == TType.I32) {
                    this.moneyType = iprot.readI32();
                    setMoneyTypeIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4: // MONEY
                if (field.type == TType.STRING) {
                    this.money = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 5: // PRODUCT
                if (field.type == TType.STRING) {
                    this.product = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 6: // TIME
                if (field.type == TType.STRING) {
                    this.time = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 7: // DESCRIPTION
                if (field.type == TType.STRING) {
                    this.description = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 8: // SIGN
                if (field.type == TType.STRING) {
                    this.sign = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        if (!isSetgbuid()) {
            throw new TProtocolException("Required field 'gbuid' was not found in serialized data! Struct: "
                    + toString());
        }
        if (!isSetMoneyType()) {
            throw new TProtocolException("Required field 'moneyType' was not found in serialized data! Struct: "
                    + toString());
        }
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(gbUID_FIELD_DESC);
        oprot.writeI64(this.gbuid);
        oprot.writeFieldEnd();
        if (this.productOrderId != null) {
            oprot.writeFieldBegin(PRODUCT_ORDER_ID_FIELD_DESC);
            oprot.writeString(this.productOrderId);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MONEY_TYPE_FIELD_DESC);
        oprot.writeI32(this.moneyType);
        oprot.writeFieldEnd();
        if (this.money != null) {
            oprot.writeFieldBegin(MONEY_FIELD_DESC);
            oprot.writeString(this.money);
            oprot.writeFieldEnd();
        }
        if (this.product != null) {
            oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
            oprot.writeString(this.product);
            oprot.writeFieldEnd();
        }
        if (this.time != null) {
            oprot.writeFieldBegin(TIME_FIELD_DESC);
            oprot.writeString(this.time);
            oprot.writeFieldEnd();
        }
        if (this.description != null) {
            oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
            oprot.writeString(this.description);
            oprot.writeFieldEnd();
        }
        if (this.sign != null) {
            oprot.writeFieldBegin(SIGN_FIELD_DESC);
            oprot.writeString(this.sign);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ReverseOrderRequest(");
        boolean first = true;

        sb.append("gbuid:");
        sb.append(this.gbuid);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("productOrderId:");
        if (this.productOrderId == null) {
            sb.append("null");
        } else {
            sb.append(this.productOrderId);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("moneyType:");
        sb.append(this.moneyType);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("money:");
        if (this.money == null) {
            sb.append("null");
        } else {
            sb.append(this.money);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("product:");
        if (this.product == null) {
            sb.append("null");
        } else {
            sb.append(this.product);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("time:");
        if (this.time == null) {
            sb.append("null");
        } else {
            sb.append(this.time);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("description:");
        if (this.description == null) {
            sb.append("null");
        } else {
            sb.append(this.description);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("sign:");
        if (this.sign == null) {
            sb.append("null");
        } else {
            sb.append(this.sign);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        // alas, we cannot check 'gbuid' because it's a primitive and you chose
        // the non-beans generator.
        if (productOrderId == null) {
            throw new TProtocolException("Required field 'productOrderId' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'moneyType' because it's a primitive and you
        // chose the non-beans generator.
        if (money == null) {
            throw new TProtocolException("Required field 'money' was not present! Struct: " + toString());
        }
        if (product == null) {
            throw new TProtocolException("Required field 'product' was not present! Struct: " + toString());
        }
        if (time == null) {
            throw new TProtocolException("Required field 'time' was not present! Struct: " + toString());
        }
        if (description == null) {
            throw new TProtocolException("Required field 'description' was not present! Struct: " + toString());
        }
        if (sign == null) {
            throw new TProtocolException("Required field 'sign' was not present! Struct: " + toString());
        }
    }

}

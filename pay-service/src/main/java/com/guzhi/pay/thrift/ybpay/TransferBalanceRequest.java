/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.guzhi.pay.thrift.gbpay;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * 用户自己的账本间转账请求
 * 2012/10/30 新增
 */
public class TransferBalanceRequest implements TBase<TransferBalanceRequest, TransferBalanceRequest._Fields>,
        java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("TransferBalanceRequest");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short) 1);
    private static final TField PRODUCT_FIELD_DESC = new TField("product", TType.STRING, (short) 2);
    private static final TField PRODUCT_ORDER_ID_FIELD_DESC = new TField("productOrderId", TType.STRING, (short) 3);
    private static final TField SOURCE_BALANCE_TYPE_FIELD_DESC = new TField("sourceBalanceType", TType.I32, (short) 4);
    private static final TField DEST_BALANCE_TYPE_FIELD_DESC = new TField("destBalanceType", TType.I32, (short) 5);
    private static final TField AMOUNT_FIELD_DESC = new TField("amount", TType.STRING, (short) 6);
    private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short) 7);
    private static final TField TRANSFER_TIME_FIELD_DESC = new TField("transferTime", TType.STRING, (short) 8);
    private static final TField USER_IP_FIELD_DESC = new TField("userIp", TType.STRING, (short) 9);
    private static final TField CALLBACK_ADDR_FIELD_DESC = new TField("callbackAddr", TType.STRING, (short) 10);
    private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short) 11);

    /**
     * 帐号，多玩通行证，不能为空
     */
    public String username;
    /**
     * 产品ID，不能为空
     */
    public String product;
    /**
     * 产品订单ID，不能为空
     */
    public String productOrderId;
    /**
     * 源账本类型，不能为空
     */
    public int sourceBalanceType;
    /**
     * 目标账本类型，不能为空
     */
    public int destBalanceType;
    /**
     * 转账的金额，不能为空，最小单位为0.01
     */
    public String amount;
    /**
     * 描述，不能为空（如：频道押金）
     */
    public String description;
    /**
     * 转账时间，不能为空，格式：gbgbMMddHHmmss，如20121030102301
     */
    public String transferTime;
    /**
     * 用户ip，可为空，最长40个字节
     */
    public String userIp;
    /**
     * 回调地址(格式"host:port" 或 http://xxx)
     */
    public String callbackAddr;
    /**
     * HMacSha1校验码
     */
    public String sign;

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        /**
         * 帐号，多玩通行证，不能为空
         */
        USERNAME((short) 1, "username"),
        /**
         * 产品ID，不能为空
         */
        PRODUCT((short) 2, "product"),
        /**
         * 产品订单ID，不能为空
         */
        PRODUCT_ORDER_ID((short) 3, "productOrderId"),
        /**
         * 源账本类型，不能为空
         */
        SOURCE_BALANCE_TYPE((short) 4, "sourceBalanceType"),
        /**
         * 目标账本类型，不能为空
         */
        DEST_BALANCE_TYPE((short) 5, "destBalanceType"),
        /**
         * 转账的金额，不能为空，最小单位为0.01
         */
        AMOUNT((short) 6, "amount"),
        /**
         * 描述，不能为空（如：频道押金）
         */
        DESCRIPTION((short) 7, "description"),
        /**
         * 转账时间，不能为空，格式：gbgbMMddHHmmss，如20121030102301
         */
        TRANSFER_TIME((short) 8, "transferTime"),
        /**
         * 用户ip，可为空，最长40个字节
         */
        USER_IP((short) 9, "userIp"),
        /**
         * 回调地址(格式"host:port" 或 http://xxx)
         */
        CALLBACK_ADDR((short) 10, "callbackAddr"),
        /**
         * HMacSha1校验码
         */
        SIGN((short) 11, "sign");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // USERNAME
                return USERNAME;
            case 2: // PRODUCT
                return PRODUCT;
            case 3: // PRODUCT_ORDER_ID
                return PRODUCT_ORDER_ID;
            case 4: // SOURCE_BALANCE_TYPE
                return SOURCE_BALANCE_TYPE;
            case 5: // DEST_BALANCE_TYPE
                return DEST_BALANCE_TYPE;
            case 6: // AMOUNT
                return AMOUNT;
            case 7: // DESCRIPTION
                return DESCRIPTION;
            case 8: // TRANSFER_TIME
                return TRANSFER_TIME;
            case 9: // USER_IP
                return USER_IP;
            case 10: // CALLBACK_ADDR
                return CALLBACK_ADDR;
            case 11: // SIGN
                return SIGN;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __SOURCEBALANCETYPE_ISSET_ID = 0;
    private static final int __DESTBALANCETYPE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.PRODUCT, new FieldMetaData("product", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.PRODUCT_ORDER_ID, new FieldMetaData("productOrderId", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.SOURCE_BALANCE_TYPE, new FieldMetaData("sourceBalanceType", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.DEST_BALANCE_TYPE, new FieldMetaData("destBalanceType", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.AMOUNT, new FieldMetaData("amount", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.DESCRIPTION, new FieldMetaData("description", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.TRANSFER_TIME, new FieldMetaData("transferTime", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.USER_IP, new FieldMetaData("userIp", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        tmpMap.put(_Fields.CALLBACK_ADDR, new FieldMetaData("callbackAddr", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.DEFAULT, new FieldValueMetaData(
                TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(TransferBalanceRequest.class, metaDataMap);
    }

    public TransferBalanceRequest() {
    }

    public TransferBalanceRequest(String username, String product, String productOrderId, int sourceBalanceType,
            int destBalanceType, String amount, String description, String transferTime, String userIp,
            String callbackAddr, String sign) {
        this();
        this.username = username;
        this.product = product;
        this.productOrderId = productOrderId;
        this.sourceBalanceType = sourceBalanceType;
        setSourceBalanceTypeIsSet(true);
        this.destBalanceType = destBalanceType;
        setDestBalanceTypeIsSet(true);
        this.amount = amount;
        this.description = description;
        this.transferTime = transferTime;
        this.userIp = userIp;
        this.callbackAddr = callbackAddr;
        this.sign = sign;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TransferBalanceRequest(TransferBalanceRequest other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetUsername()) {
            this.username = other.username;
        }
        if (other.isSetProduct()) {
            this.product = other.product;
        }
        if (other.isSetProductOrderId()) {
            this.productOrderId = other.productOrderId;
        }
        this.sourceBalanceType = other.sourceBalanceType;
        this.destBalanceType = other.destBalanceType;
        if (other.isSetAmount()) {
            this.amount = other.amount;
        }
        if (other.isSetDescription()) {
            this.description = other.description;
        }
        if (other.isSetTransferTime()) {
            this.transferTime = other.transferTime;
        }
        if (other.isSetUserIp()) {
            this.userIp = other.userIp;
        }
        if (other.isSetCallbackAddr()) {
            this.callbackAddr = other.callbackAddr;
        }
        if (other.isSetSign()) {
            this.sign = other.sign;
        }
    }

    public TransferBalanceRequest deepCopy() {
        return new TransferBalanceRequest(this);
    }

    @Override
    public void clear() {
        this.username = null;
        this.product = null;
        this.productOrderId = null;
        setSourceBalanceTypeIsSet(false);
        this.sourceBalanceType = 0;
        setDestBalanceTypeIsSet(false);
        this.destBalanceType = 0;
        this.amount = null;
        this.description = null;
        this.transferTime = null;
        this.userIp = null;
        this.callbackAddr = null;
        this.sign = null;
    }

    /**
     * 帐号，多玩通行证，不能为空
     */
    public String getUsername() {
        return this.username;
    }

    /**
     * 帐号，多玩通行证，不能为空
     */
    public TransferBalanceRequest setUsername(String username) {
        this.username = username;
        return this;
    }

    public void unsetUsername() {
        this.username = null;
    }

    /**
     * Returns true if field username is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetUsername() {
        return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
        if (!value) {
            this.username = null;
        }
    }

    /**
     * 产品ID，不能为空
     */
    public String getProduct() {
        return this.product;
    }

    /**
     * 产品ID，不能为空
     */
    public TransferBalanceRequest setProduct(String product) {
        this.product = product;
        return this;
    }

    public void unsetProduct() {
        this.product = null;
    }

    /**
     * Returns true if field product is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetProduct() {
        return this.product != null;
    }

    public void setProductIsSet(boolean value) {
        if (!value) {
            this.product = null;
        }
    }

    /**
     * 产品订单ID，不能为空
     */
    public String getProductOrderId() {
        return this.productOrderId;
    }

    /**
     * 产品订单ID，不能为空
     */
    public TransferBalanceRequest setProductOrderId(String productOrderId) {
        this.productOrderId = productOrderId;
        return this;
    }

    public void unsetProductOrderId() {
        this.productOrderId = null;
    }

    /**
     * Returns true if field productOrderId is set (has been asigned a value)
     * and false otherwise
     */
    public boolean isSetProductOrderId() {
        return this.productOrderId != null;
    }

    public void setProductOrderIdIsSet(boolean value) {
        if (!value) {
            this.productOrderId = null;
        }
    }

    /**
     * 源账本类型，不能为空
     */
    public int getSourceBalanceType() {
        return this.sourceBalanceType;
    }

    /**
     * 源账本类型，不能为空
     */
    public TransferBalanceRequest setSourceBalanceType(int sourceBalanceType) {
        this.sourceBalanceType = sourceBalanceType;
        setSourceBalanceTypeIsSet(true);
        return this;
    }

    public void unsetSourceBalanceType() {
        __isset_bit_vector.clear(__SOURCEBALANCETYPE_ISSET_ID);
    }

    /**
     * Returns true if field sourceBalanceType is set (has been asigned a value)
     * and false otherwise
     */
    public boolean isSetSourceBalanceType() {
        return __isset_bit_vector.get(__SOURCEBALANCETYPE_ISSET_ID);
    }

    public void setSourceBalanceTypeIsSet(boolean value) {
        __isset_bit_vector.set(__SOURCEBALANCETYPE_ISSET_ID, value);
    }

    /**
     * 目标账本类型，不能为空
     */
    public int getDestBalanceType() {
        return this.destBalanceType;
    }

    /**
     * 目标账本类型，不能为空
     */
    public TransferBalanceRequest setDestBalanceType(int destBalanceType) {
        this.destBalanceType = destBalanceType;
        setDestBalanceTypeIsSet(true);
        return this;
    }

    public void unsetDestBalanceType() {
        __isset_bit_vector.clear(__DESTBALANCETYPE_ISSET_ID);
    }

    /**
     * Returns true if field destBalanceType is set (has been asigned a value)
     * and false otherwise
     */
    public boolean isSetDestBalanceType() {
        return __isset_bit_vector.get(__DESTBALANCETYPE_ISSET_ID);
    }

    public void setDestBalanceTypeIsSet(boolean value) {
        __isset_bit_vector.set(__DESTBALANCETYPE_ISSET_ID, value);
    }

    /**
     * 转账的金额，不能为空，最小单位为0.01
     */
    public String getAmount() {
        return this.amount;
    }

    /**
     * 转账的金额，不能为空，最小单位为0.01
     */
    public TransferBalanceRequest setAmount(String amount) {
        this.amount = amount;
        return this;
    }

    public void unsetAmount() {
        this.amount = null;
    }

    /**
     * Returns true if field amount is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetAmount() {
        return this.amount != null;
    }

    public void setAmountIsSet(boolean value) {
        if (!value) {
            this.amount = null;
        }
    }

    /**
     * 描述，不能为空（如：频道押金）
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * 描述，不能为空（如：频道押金）
     */
    public TransferBalanceRequest setDescription(String description) {
        this.description = description;
        return this;
    }

    public void unsetDescription() {
        this.description = null;
    }

    /**
     * Returns true if field description is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetDescription() {
        return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
        if (!value) {
            this.description = null;
        }
    }

    /**
     * 转账时间，不能为空，格式：gbgbMMddHHmmss，如20121030102301
     */
    public String getTransferTime() {
        return this.transferTime;
    }

    /**
     * 转账时间，不能为空，格式：gbgbMMddHHmmss，如20121030102301
     */
    public TransferBalanceRequest setTransferTime(String transferTime) {
        this.transferTime = transferTime;
        return this;
    }

    public void unsetTransferTime() {
        this.transferTime = null;
    }

    /**
     * Returns true if field transferTime is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetTransferTime() {
        return this.transferTime != null;
    }

    public void setTransferTimeIsSet(boolean value) {
        if (!value) {
            this.transferTime = null;
        }
    }

    /**
     * 用户ip，可为空，最长40个字节
     */
    public String getUserIp() {
        return this.userIp;
    }

    /**
     * 用户ip，可为空，最长40个字节
     */
    public TransferBalanceRequest setUserIp(String userIp) {
        this.userIp = userIp;
        return this;
    }

    public void unsetUserIp() {
        this.userIp = null;
    }

    /**
     * Returns true if field userIp is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetUserIp() {
        return this.userIp != null;
    }

    public void setUserIpIsSet(boolean value) {
        if (!value) {
            this.userIp = null;
        }
    }

    /**
     * 回调地址(格式"host:port" 或 http://xxx)
     */
    public String getCallbackAddr() {
        return this.callbackAddr;
    }

    /**
     * 回调地址(格式"host:port" 或 http://xxx)
     */
    public TransferBalanceRequest setCallbackAddr(String callbackAddr) {
        this.callbackAddr = callbackAddr;
        return this;
    }

    public void unsetCallbackAddr() {
        this.callbackAddr = null;
    }

    /**
     * Returns true if field callbackAddr is set (has been asigned a value) and
     * false otherwise
     */
    public boolean isSetCallbackAddr() {
        return this.callbackAddr != null;
    }

    public void setCallbackAddrIsSet(boolean value) {
        if (!value) {
            this.callbackAddr = null;
        }
    }

    /**
     * HMacSha1校验码
     */
    public String getSign() {
        return this.sign;
    }

    /**
     * HMacSha1校验码
     */
    public TransferBalanceRequest setSign(String sign) {
        this.sign = sign;
        return this;
    }

    public void unsetSign() {
        this.sign = null;
    }

    /**
     * Returns true if field sign is set (has been asigned a value) and false
     * otherwise
     */
    public boolean isSetSign() {
        return this.sign != null;
    }

    public void setSignIsSet(boolean value) {
        if (!value) {
            this.sign = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case USERNAME:
            if (value == null) {
                unsetUsername();
            } else {
                setUsername((String) value);
            }
            break;

        case PRODUCT:
            if (value == null) {
                unsetProduct();
            } else {
                setProduct((String) value);
            }
            break;

        case PRODUCT_ORDER_ID:
            if (value == null) {
                unsetProductOrderId();
            } else {
                setProductOrderId((String) value);
            }
            break;

        case SOURCE_BALANCE_TYPE:
            if (value == null) {
                unsetSourceBalanceType();
            } else {
                setSourceBalanceType((Integer) value);
            }
            break;

        case DEST_BALANCE_TYPE:
            if (value == null) {
                unsetDestBalanceType();
            } else {
                setDestBalanceType((Integer) value);
            }
            break;

        case AMOUNT:
            if (value == null) {
                unsetAmount();
            } else {
                setAmount((String) value);
            }
            break;

        case DESCRIPTION:
            if (value == null) {
                unsetDescription();
            } else {
                setDescription((String) value);
            }
            break;

        case TRANSFER_TIME:
            if (value == null) {
                unsetTransferTime();
            } else {
                setTransferTime((String) value);
            }
            break;

        case USER_IP:
            if (value == null) {
                unsetUserIp();
            } else {
                setUserIp((String) value);
            }
            break;

        case CALLBACK_ADDR:
            if (value == null) {
                unsetCallbackAddr();
            } else {
                setCallbackAddr((String) value);
            }
            break;

        case SIGN:
            if (value == null) {
                unsetSign();
            } else {
                setSign((String) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case USERNAME:
            return getUsername();

        case PRODUCT:
            return getProduct();

        case PRODUCT_ORDER_ID:
            return getProductOrderId();

        case SOURCE_BALANCE_TYPE:
            return new Integer(getSourceBalanceType());

        case DEST_BALANCE_TYPE:
            return new Integer(getDestBalanceType());

        case AMOUNT:
            return getAmount();

        case DESCRIPTION:
            return getDescription();

        case TRANSFER_TIME:
            return getTransferTime();

        case USER_IP:
            return getUserIp();

        case CALLBACK_ADDR:
            return getCallbackAddr();

        case SIGN:
            return getSign();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a
     * value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case USERNAME:
            return isSetUsername();
        case PRODUCT:
            return isSetProduct();
        case PRODUCT_ORDER_ID:
            return isSetProductOrderId();
        case SOURCE_BALANCE_TYPE:
            return isSetSourceBalanceType();
        case DEST_BALANCE_TYPE:
            return isSetDestBalanceType();
        case AMOUNT:
            return isSetAmount();
        case DESCRIPTION:
            return isSetDescription();
        case TRANSFER_TIME:
            return isSetTransferTime();
        case USER_IP:
            return isSetUserIp();
        case CALLBACK_ADDR:
            return isSetCallbackAddr();
        case SIGN:
            return isSetSign();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof TransferBalanceRequest)
            return this.equals((TransferBalanceRequest) that);
        return false;
    }

    public boolean equals(TransferBalanceRequest that) {
        if (that == null)
            return false;

        boolean this_present_username = true && this.isSetUsername();
        boolean that_present_username = true && that.isSetUsername();
        if (this_present_username || that_present_username) {
            if (!(this_present_username && that_present_username))
                return false;
            if (!this.username.equals(that.username))
                return false;
        }

        boolean this_present_product = true && this.isSetProduct();
        boolean that_present_product = true && that.isSetProduct();
        if (this_present_product || that_present_product) {
            if (!(this_present_product && that_present_product))
                return false;
            if (!this.product.equals(that.product))
                return false;
        }

        boolean this_present_productOrderId = true && this.isSetProductOrderId();
        boolean that_present_productOrderId = true && that.isSetProductOrderId();
        if (this_present_productOrderId || that_present_productOrderId) {
            if (!(this_present_productOrderId && that_present_productOrderId))
                return false;
            if (!this.productOrderId.equals(that.productOrderId))
                return false;
        }

        boolean this_present_sourceBalanceType = true;
        boolean that_present_sourceBalanceType = true;
        if (this_present_sourceBalanceType || that_present_sourceBalanceType) {
            if (!(this_present_sourceBalanceType && that_present_sourceBalanceType))
                return false;
            if (this.sourceBalanceType != that.sourceBalanceType)
                return false;
        }

        boolean this_present_destBalanceType = true;
        boolean that_present_destBalanceType = true;
        if (this_present_destBalanceType || that_present_destBalanceType) {
            if (!(this_present_destBalanceType && that_present_destBalanceType))
                return false;
            if (this.destBalanceType != that.destBalanceType)
                return false;
        }

        boolean this_present_amount = true && this.isSetAmount();
        boolean that_present_amount = true && that.isSetAmount();
        if (this_present_amount || that_present_amount) {
            if (!(this_present_amount && that_present_amount))
                return false;
            if (!this.amount.equals(that.amount))
                return false;
        }

        boolean this_present_description = true && this.isSetDescription();
        boolean that_present_description = true && that.isSetDescription();
        if (this_present_description || that_present_description) {
            if (!(this_present_description && that_present_description))
                return false;
            if (!this.description.equals(that.description))
                return false;
        }

        boolean this_present_transferTime = true && this.isSetTransferTime();
        boolean that_present_transferTime = true && that.isSetTransferTime();
        if (this_present_transferTime || that_present_transferTime) {
            if (!(this_present_transferTime && that_present_transferTime))
                return false;
            if (!this.transferTime.equals(that.transferTime))
                return false;
        }

        boolean this_present_userIp = true && this.isSetUserIp();
        boolean that_present_userIp = true && that.isSetUserIp();
        if (this_present_userIp || that_present_userIp) {
            if (!(this_present_userIp && that_present_userIp))
                return false;
            if (!this.userIp.equals(that.userIp))
                return false;
        }

        boolean this_present_callbackAddr = true && this.isSetCallbackAddr();
        boolean that_present_callbackAddr = true && that.isSetCallbackAddr();
        if (this_present_callbackAddr || that_present_callbackAddr) {
            if (!(this_present_callbackAddr && that_present_callbackAddr))
                return false;
            if (!this.callbackAddr.equals(that.callbackAddr))
                return false;
        }

        boolean this_present_sign = true && this.isSetSign();
        boolean that_present_sign = true && that.isSetSign();
        if (this_present_sign || that_present_sign) {
            if (!(this_present_sign && that_present_sign))
                return false;
            if (!this.sign.equals(that.sign))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(TransferBalanceRequest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        TransferBalanceRequest typedOther = (TransferBalanceRequest) other;

        lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUsername()) {
            lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetProduct()) {
            lastComparison = TBaseHelper.compareTo(this.product, typedOther.product);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetProductOrderId()).compareTo(typedOther.isSetProductOrderId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetProductOrderId()) {
            lastComparison = TBaseHelper.compareTo(this.productOrderId, typedOther.productOrderId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSourceBalanceType()).compareTo(typedOther.isSetSourceBalanceType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSourceBalanceType()) {
            lastComparison = TBaseHelper.compareTo(this.sourceBalanceType, typedOther.sourceBalanceType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDestBalanceType()).compareTo(typedOther.isSetDestBalanceType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDestBalanceType()) {
            lastComparison = TBaseHelper.compareTo(this.destBalanceType, typedOther.destBalanceType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAmount()) {
            lastComparison = TBaseHelper.compareTo(this.amount, typedOther.amount);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDescription()) {
            lastComparison = TBaseHelper.compareTo(this.description, typedOther.description);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTransferTime()).compareTo(typedOther.isSetTransferTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTransferTime()) {
            lastComparison = TBaseHelper.compareTo(this.transferTime, typedOther.transferTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUserIp()).compareTo(typedOther.isSetUserIp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserIp()) {
            lastComparison = TBaseHelper.compareTo(this.userIp, typedOther.userIp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCallbackAddr()).compareTo(typedOther.isSetCallbackAddr());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCallbackAddr()) {
            lastComparison = TBaseHelper.compareTo(this.callbackAddr, typedOther.callbackAddr);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSign()) {
            lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // USERNAME
                if (field.type == TType.STRING) {
                    this.username = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // PRODUCT
                if (field.type == TType.STRING) {
                    this.product = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // PRODUCT_ORDER_ID
                if (field.type == TType.STRING) {
                    this.productOrderId = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4: // SOURCE_BALANCE_TYPE
                if (field.type == TType.I32) {
                    this.sourceBalanceType = iprot.readI32();
                    setSourceBalanceTypeIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 5: // DEST_BALANCE_TYPE
                if (field.type == TType.I32) {
                    this.destBalanceType = iprot.readI32();
                    setDestBalanceTypeIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 6: // AMOUNT
                if (field.type == TType.STRING) {
                    this.amount = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 7: // DESCRIPTION
                if (field.type == TType.STRING) {
                    this.description = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 8: // TRANSFER_TIME
                if (field.type == TType.STRING) {
                    this.transferTime = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 9: // USER_IP
                if (field.type == TType.STRING) {
                    this.userIp = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 10: // CALLBACK_ADDR
                if (field.type == TType.STRING) {
                    this.callbackAddr = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 11: // SIGN
                if (field.type == TType.STRING) {
                    this.sign = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.username != null) {
            oprot.writeFieldBegin(USERNAME_FIELD_DESC);
            oprot.writeString(this.username);
            oprot.writeFieldEnd();
        }
        if (this.product != null) {
            oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
            oprot.writeString(this.product);
            oprot.writeFieldEnd();
        }
        if (this.productOrderId != null) {
            oprot.writeFieldBegin(PRODUCT_ORDER_ID_FIELD_DESC);
            oprot.writeString(this.productOrderId);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SOURCE_BALANCE_TYPE_FIELD_DESC);
        oprot.writeI32(this.sourceBalanceType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DEST_BALANCE_TYPE_FIELD_DESC);
        oprot.writeI32(this.destBalanceType);
        oprot.writeFieldEnd();
        if (this.amount != null) {
            oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
            oprot.writeString(this.amount);
            oprot.writeFieldEnd();
        }
        if (this.description != null) {
            oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
            oprot.writeString(this.description);
            oprot.writeFieldEnd();
        }
        if (this.transferTime != null) {
            oprot.writeFieldBegin(TRANSFER_TIME_FIELD_DESC);
            oprot.writeString(this.transferTime);
            oprot.writeFieldEnd();
        }
        if (this.userIp != null) {
            oprot.writeFieldBegin(USER_IP_FIELD_DESC);
            oprot.writeString(this.userIp);
            oprot.writeFieldEnd();
        }
        if (this.callbackAddr != null) {
            oprot.writeFieldBegin(CALLBACK_ADDR_FIELD_DESC);
            oprot.writeString(this.callbackAddr);
            oprot.writeFieldEnd();
        }
        if (this.sign != null) {
            oprot.writeFieldBegin(SIGN_FIELD_DESC);
            oprot.writeString(this.sign);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TransferBalanceRequest(");
        boolean first = true;

        sb.append("username:");
        if (this.username == null) {
            sb.append("null");
        } else {
            sb.append(this.username);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("product:");
        if (this.product == null) {
            sb.append("null");
        } else {
            sb.append(this.product);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("productOrderId:");
        if (this.productOrderId == null) {
            sb.append("null");
        } else {
            sb.append(this.productOrderId);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("sourceBalanceType:");
        sb.append(this.sourceBalanceType);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("destBalanceType:");
        sb.append(this.destBalanceType);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("amount:");
        if (this.amount == null) {
            sb.append("null");
        } else {
            sb.append(this.amount);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("description:");
        if (this.description == null) {
            sb.append("null");
        } else {
            sb.append(this.description);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("transferTime:");
        if (this.transferTime == null) {
            sb.append("null");
        } else {
            sb.append(this.transferTime);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("userIp:");
        if (this.userIp == null) {
            sb.append("null");
        } else {
            sb.append(this.userIp);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("callbackAddr:");
        if (this.callbackAddr == null) {
            sb.append("null");
        } else {
            sb.append(this.callbackAddr);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("sign:");
        if (this.sign == null) {
            sb.append("null");
        } else {
            sb.append(this.sign);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
    }

}
